:mod:`base`
===========

.. py:module:: base

.. autoapi-nested-parse::

   Summary
   -------
   Provide base classes for solvers, problems, and oracles.

   Listing
   -------
   Solver : class
   Problem : class
   Oracle : class
   Solution : class
   DesignPoint : class
   DataFarmingExperiment : class



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   base.Solver
   base.Problem
   base.Oracle
   base.Solution




.. class:: Solver(fixed_factors)


   Bases: :py:obj:`object`

   Base class to implement simulation-optimization solvers.

   .. attribute:: name

      name of solver

      :type: string

   .. attribute:: objective_type



      description of objective types:
          "single" or "multi"

      :type: string

   .. attribute:: constraint_type



      description of constraints types:
          "unconstrained", "box", "deterministic", "stochastic"

      :type: string

   .. attribute:: variable_type



      description of variable types:
          "discrete", "continuous", "mixed"

      :type: string

   .. attribute:: gradient_needed

      indicates if gradient of objective function is needed

      :type: bool

   .. attribute:: factors

      changeable factors (i.e., parameters) of the solver

      :type: dict

   .. attribute:: specifications

      details of each factor (for GUI, data validation, and defaults)

      :type: dict

   .. attribute:: rng_list

      list of RNGs used for the solver's internal purposes

      :type: list of rng.MRG32k3a objects

   .. attribute:: solution_progenitor_rngs

      list of RNGs used as a baseline for simulating solutions

      :type: list of rng.MRG32k3a objects

   :param fixed_factors: dictionary of user-specified solver factors
   :type fixed_factors: dict

   .. method:: attach_rngs(self, rng_list)

      Attach a list of random-number generators to the solver.

      :param rng_list: list of random-number generators used for the solver's internal purposes
      :type rng_list: list of rng.MRG32k3a objects


   .. method:: solve(self, problem, crn_across_solns)
      :abstractmethod:

      Run a single macroreplication of a solver on a problem.

      :param problem: simulation-optimization problem to solve
      :type problem: Problem object
      :param crn_across_solns: indicates if CRN are used when simulating different solutions
      :type crn_across_solns: bool

      :returns: * **recommended_solns** (*list of Solution objects*) -- list of solutions recommended throughout the budget
                * **intermediate_budgets** (*list of ints*) -- list of intermediate budgets when recommended solutions changes


   .. method:: check_solver_factor(self, factor_name)

      Determine if the setting of a solver factor is permissible.

      :param factor_name: name of factor for dictionary lookup (i.e., key)
      :type factor_name: string

      :returns: **is_permissible** -- indicates if solver factor is permissible
      :rtype: bool


   .. method:: check_solver_factors(self)

      Determine if the joint settings of solver factors are permissible.

      :returns: **is_simulatable** -- indicates if solver factors are permissible
      :rtype: bool


   .. method:: check_factor_datatype(self, factor_name)

      Determine if a factor's data type matches its specification.

      :param factor_name: string corresponding to name of factor to check
      :type factor_name: string

      :returns: **is_right_type** -- indicates if factor is of specified data type
      :rtype: bool


   .. method:: prepare_sim_new_soln(self, solution, problem, crn_across_solns)

      Prime the progenitor rngs for simulation the next solution,
      depending on whether using CRN across solutions.

      :param solution: solution to simulate next
      :type solution: base.Solution object
      :param problem: problem being solved by the solver
      :type problem: base.Problem object
      :param crn_across_solns: indicates if CRN are used when simulating different solutions
      :type crn_across_solns: bool



.. class:: Problem(oracle_fixed_factors)


   Bases: :py:obj:`object`

   Base class to implement simulation-optimization problems.

   .. attribute:: name

      name of problem

      :type: string

   .. attribute:: dim

      number of decision variables

      :type: int

   .. attribute:: n_objectives

      number of objectives

      :type: int

   .. attribute:: n_stochastic_constraints

      number of stochastic constraints

      :type: int

   .. attribute:: minmax

      indicator of maximization (+1) or minimization (-1) for each objective

      :type: tuple of int (+/- 1)

   .. attribute:: constraint_type



      description of constraints types:
          "unconstrained", "box", "deterministic", "stochastic"

      :type: string

   .. attribute:: variable_type



      description of variable types:
          "discrete", "continuous", "mixed"

      :type: string

   .. attribute:: gradient_available

      indicates if gradient of objective function is available

      :type: bool

   .. attribute:: initial_solution

      default initial solution from which solvers start

      :type: tuple

   .. attribute:: budget

      max number of replications (fn evals) for a solver to take

      :type: int > 0

   .. attribute:: optimal_bound

      bound on optimal objective function value

      :type: float

   .. attribute:: optimal_solution

      optimal solution (if known)

      :type: tuple

   .. attribute:: ref_optimal_solution

      reference solution (in lieu of optimal)

      :type: tuple

   .. attribute:: oracle

      associated simulation oracle that generates replications

      :type: Oracle object

   .. attribute:: oracle_default_factors

      default values for overriding oracle-level default factors

      :type: dict

   .. attribute:: oracle_fixed_factors

      combination of overriden oracle-level factors and defaults

      :type: dict

   .. attribute:: rng_list

      list of RNGs used to generate a random initial solution
      or a random problem instance

      :type: list of rng.MRG32k3a objects

   .. method:: attach_rngs(self, rng_list)

      Attach a list of random-number generators to the problem.

      :param rng_list: list of random-number generators used to generate a random initial solution
                       or a random problem instance
      :type rng_list: list of rng.MRG32k3a objects


   .. method:: vector_to_factor_dict(self, vector)
      :abstractmethod:

      Convert a vector of variables to a dictionary with factor keys

      :param vector: vector of values associated with decision variables
      :type vector: tuple

      :returns: **factor_dict** -- dictionary with factor keys and associated values
      :rtype: dictionary


   .. method:: factor_dict_to_vector(self, factor_dict)
      :abstractmethod:

      Convert a dictionary with factor keys to a vector
      of variables.

      :param factor_dict: dictionary with factor keys and associated values
      :type factor_dict: dictionary

      :returns: **vector** -- vector of values associated with decision variables
      :rtype: tuple


   .. method:: response_dict_to_objectives(self, response_dict)
      :abstractmethod:

      Convert a dictionary with response keys to a vector
      of objectives.

      :param response_dict: dictionary with response keys and associated values
      :type response_dict: dictionary

      :returns: **objectives** -- vector of objectives
      :rtype: tuple


   .. method:: response_dict_to_stoch_constraints(self, response_dict)

      Convert a dictionary with response keys to a vector
      of left-hand sides of stochastic constraints: E[Y] >= 0

      :param response_dict: dictionary with response keys and associated values
      :type response_dict: dictionary

      :returns: **stoch_constraints** -- vector of LHSs of stochastic constraint
      :rtype: tuple


   .. method:: deterministic_objectives_and_gradients(self, x)

      Compute deterministic components of objectives for a solution `x`.

      :param x: vector of decision variables
      :type x: tuple

      :returns: * **det_objectives** (*tuple*) -- vector of deterministic components of objectives
                * **det_objectives_gradients** (*tuple*) -- vector of gradients of deterministic components of objectives


   .. method:: deterministic_stochastic_constraints_and_gradients(self, x)

      Compute deterministic components of stochastic constraints
      for a solution `x`.

      :param x: vector of decision variables
      :type x: tuple

      :returns: * **det_stoch_constraints** (*tuple*) -- vector of deterministic components of stochastic
                  constraints
                * **det_stoch_constraints_gradients** (*tuple*) -- vector of gradients of deterministic components of
                  stochastic constraints


   .. method:: check_deterministic_constraints(self, x)

      Check if a solution `x` satisfies the problem's deterministic
      constraints.

      :param x: vector of decision variables
      :type x: tuple

      :returns: **satisfies** -- indicates if solution `x` satisfies the deterministic constraints.
      :rtype: bool


   .. method:: get_random_solution(self, rand_sol_rng)

      Generate a random solution for starting or restarting solvers.

      :param rand_sol_rng: random-number generator used to sample a new random solution
      :type rand_sol_rng: rng.MRG32k3a object

      :returns: **x** -- vector of decision variables
      :rtype: tuple


   .. method:: simulate(self, solution, m=1)

      Simulate `m` i.i.d. replications at solution `x`.

      :param solution: solution to evalaute
      :type solution: Solution object
      :param m: number of replications to simulate at `x`
      :type m: int



.. class:: Oracle(fixed_factors)


   Bases: :py:obj:`object`

   Base class to implement simulation oracles (models) featured in
   simulation-optimization problems.

   .. attribute:: name

      name of oracle

      :type: string

   .. attribute:: n_rngs

      number of random-number generators used to run a simulation replication

      :type: int

   .. attribute:: n_responses

      number of responses (performance measures)

      :type: int

   .. attribute:: factors

      changeable factors of the simulation model

      :type: dict

   .. attribute:: specifications

      details of each factor (for GUI, data validation, and defaults)

      :type: dict

   .. attribute:: check_factor_list

      switch case for checking factor simulatability

      :type: dict

   :param fixed_factors: dictionary of user-specified oracle factors
   :type fixed_factors: dict

   .. method:: check_simulatable_factor(self, factor_name)

      Determine if a simulation replication can be run with the given factor.

      :param factor_name: name of factor for dictionary lookup (i.e., key)
      :type factor_name: string

      :returns: **is_simulatable** -- indicates if oracle specified by factors is simulatable
      :rtype: bool


   .. method:: check_simulatable_factors(self)

      Determine if a simulation replication can be run with the given factors.

      :returns: **is_simulatable** -- indicates if oracle specified by factors is simulatable
      :rtype: bool


   .. method:: check_factor_datatype(self, factor_name)

      Determine if a factor's data type matches its specification.

      :returns: **is_right_type** -- indicates if factor is of specified data type
      :rtype: bool


   .. method:: replicate(self, rng_list)
      :abstractmethod:

      Simulate a single replication for the current oracle factors.

      :param rng_list: rngs for oracle to use when simulating a replication
      :type rng_list: list of rng.MRG32k3a objects

      :returns: * **responses** (*dict*) -- performance measures of interest
                * **gradients** (*dict of dicts*) -- gradient estimate for each response



.. class:: Solution(x, problem)


   Bases: :py:obj:`object`

   Base class for solutions represented as vectors of decision variables
   and dictionaries of decision factors.

   .. attribute:: x

      vector of decision variables

      :type: tuple

   .. attribute:: dim

      number of decision variables describing `x`

      :type: int

   .. attribute:: decision_factors

      decision factor names and values

      :type: dict

   .. attribute:: rng_list

      rngs for oracle to use when running replications at the solution

      :type: list of rng.MRG32k3a objects

   .. attribute:: n_reps

      number of replications run at the solution

      :type: int

   .. attribute:: det_objectives

      deterministic components added to objectives

      :type: tuple

   .. attribute:: det_objectives_gradients

      gradients of deterministic components added to objectives

      :type: tuple of tuples (# objectives x dimension)

   .. attribute:: det_stoch_constraints

      deterministic components added to LHS of stochastic constraints

      :type: tuple

   .. attribute:: det_stoch_constraints_gradients

      gradients of deterministics components added to LHS stochastic constraints

      :type: tuple (# stochastic constraints x dimension)

   .. attribute:: storage_size

      max number of replications that can be recorded in current storage

      :type: int

   .. attribute:: objectives

      objective(s) estimates from each replication

      :type: numpy array (# replications x # objectives)

   .. attribute:: objectives_gradients

      gradient estimates of objective(s) from each replication

      :type: numpy array (# replications x # objectives x dimension)

   .. attribute:: stochastic_constraints

      stochastic constraint estimates from each replication

      :type: numpy array (# replications x # stochastic constraints)

   .. attribute:: stochastic_constraints_gradients

      gradient estimates of stochastic constraints from each replication

      :type: numpy array (# replications x # stochastic constraints x dimension)

   :param x: vector of decision variables
   :type x: tuple
   :param problem: problem to which x is a solution
   :type problem: Problem object

   .. method:: attach_rngs(self, rng_list, copy=True)

      Attach a list of random-number generators to the solution.

      :param rng_list: list of random-number generators used to run simulation replications
      :type rng_list: list of rng.MRG32k3a objects


   .. method:: pad_storage(self, m)

      Append zeros to numpy arrays for summary statistics.

      :param m: number of replications to simulate
      :type m: int


   .. method:: recompute_summary_statistics(self)

      Recompute summary statistics of the solution.



