:mod:`oracles.cntnv`
====================

.. py:module:: oracles.cntnv

.. autoapi-nested-parse::

   Summary
   -------
   Simulate a day's worth of sales for a newsvendor.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   oracles.cntnv.CntNV




.. class:: CntNV(fixed_factors={})


   Bases: :py:obj:`base.Oracle`

   An oracle that simulates a day's worth of sales for a newsvendor
   with a Burr Type XII demand distribution. Returns the profit, after
   accounting for order costs and salvage.

   .. attribute:: name

      name of oracle

      :type: string

   .. attribute:: n_rngs

      number of random-number generators used to run a simulation replication

      :type: int

   .. attribute:: n_responses

      number of responses (performance measures)

      :type: int

   .. attribute:: factors

      changeable factors of the simulation model

      :type: dict

   .. attribute:: specifications

      details of each factor (for GUI, data validation, and defaults)

      :type: dict

   .. attribute:: check_factor_list

      switch case for checking factor simulatability

      :type: dict

   :param fixed_factors: fixed_factors of the simulation model
   :type fixed_factors: dict

   .. seealso:: :obj:`base.Oracle`

   .. method:: check_purchase_price(self)


   .. method:: check_sales_price(self)


   .. method:: check_salvage_price(self)


   .. method:: check_order_quantity(self)


   .. method:: check_Burr_c(self)


   .. method:: check_Burr_k(self)


   .. method:: check_simulatable_factors(self)

      Determine if a simulation replication can be run with the given factors.

      :returns: **is_simulatable** -- indicates if oracle specified by factors is simulatable
      :rtype: bool


   .. method:: replicate(self, rng_list)

      Simulate a single replication for the current oracle factors.

      :param rng_list: rngs for oracle to use when simulating a replication
      :type rng_list: list of rng.MRG32k3a objects

      :returns: **responses** -- performance measures of interest
                "profit" = profit in this scenario
                "stockout_qty" = amount by which demand exceeded supply
                "stockout" = was there unmet demand? (Y/N)
      :rtype: dict



