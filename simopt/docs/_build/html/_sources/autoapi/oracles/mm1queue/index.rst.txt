:mod:`oracles.mm1queue`
=======================

.. py:module:: oracles.mm1queue

.. autoapi-nested-parse::

   Summary
   -------
   Simulate a M/M/1 queue.



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   oracles.mm1queue.MM1Queue




.. class:: MM1Queue(fixed_factors={})


   Bases: :py:obj:`base.Oracle`

   An oracle that simulates an M/M/1 queue with an Exponential(lambda)
   interarrival time distribution and an Exponential(x) service time
   distribution. Returns
       - the average sojourn time
       - the average waiting time
       - the fraction of customers who wait
   for customers after a warmup period.

   .. attribute:: name

      name of oracle

      :type: string

   .. attribute:: n_rngs

      number of random-number generators used to run a simulation replication

      :type: int

   .. attribute:: n_responses

      number of responses (performance measures)

      :type: int

   .. attribute:: factors

      changeable factors of the simulation model

      :type: dict

   .. attribute:: specifications

      details of each factor (for GUI, data validation, and defaults)

      :type: dict

   .. attribute:: check_factor_list

      switch case for checking factor simulatability

      :type: dict

   :param fixed_factors: fixed factors of the simulation model
   :type fixed_factors: nested dict

   .. seealso:: :obj:`base.Oracle`

   .. method:: check_lambda(self)


   .. method:: check_mu(self)


   .. method:: check_warmup(self)


   .. method:: check_people(self)


   .. method:: check_simulatable_factors(self)

      Determine if a simulation replication can be run with the given factors.

      :returns: **is_simulatable** -- indicates if oracle specified by factors is simulatable
      :rtype: bool


   .. method:: replicate(self, rng_list)

      Simulate a single replication for the current oracle factors.

      :param rng_list: rngs for oracle to use when simulating a replication
      :type rng_list: list of rng.MRG32k3a objects

      :returns: * **responses** (*dict*) -- performance measures of interest
                  "avg_sojourn_time" = average sojourn time
                  "avg_waiting_time" = average waiting time
                  "frac_cust_wait" = fraction of customers who wait
                * **gradients** (*dict of dicts*) -- gradient estimates for each response



