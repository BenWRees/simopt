:mod:`rng.mrg32k3a`
===================

.. py:module:: rng.mrg32k3a

.. autoapi-nested-parse::

   Summary
   -------
   Provide a subclass of random.Random using mrg32k3a as the generator
   with stream/substream/subsubstream support.

   Listing
   -------
   MRG323k3a : class
   advance_stream : method
   advance_substream : method
   advance_subsubstream : method
   reset_stream : method
   reset_substream : method
   reset_subsubstream : method
   start_fixed_s_ss_sss : method



Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   rng.mrg32k3a.MRG32k3a



Functions
~~~~~~~~~

.. autoapisummary::

   rng.mrg32k3a.mrg32k3a
   rng.mrg32k3a.bsm



Attributes
~~~~~~~~~~

.. autoapisummary::

   rng.mrg32k3a.mrgnorm
   rng.mrg32k3a.mrgm1
   rng.mrg32k3a.mrgm2
   rng.mrg32k3a.mrga12
   rng.mrg32k3a.mrga13n
   rng.mrg32k3a.mrga21
   rng.mrg32k3a.mrga23n
   rng.mrg32k3a.A1p0
   rng.mrg32k3a.A2p0
   rng.mrg32k3a.A1p47
   rng.mrg32k3a.A2p47
   rng.mrg32k3a.A1p94
   rng.mrg32k3a.A2p94
   rng.mrg32k3a.A1p141
   rng.mrg32k3a.A2p141
   rng.mrg32k3a.bsma
   rng.mrg32k3a.bsmb
   rng.mrg32k3a.bsmc


.. data:: mrgnorm
   :annotation: = 2.328306549295728e-10

   

.. data:: mrgm1
   :annotation: = 4294967087

   

.. data:: mrgm2
   :annotation: = 4294944443

   

.. data:: mrga12
   :annotation: = 1403580

   

.. data:: mrga13n
   :annotation: = 810728

   

.. data:: mrga21
   :annotation: = 527612

   

.. data:: mrga23n
   :annotation: = 1370589

   

.. data:: A1p0
   :annotation: = [[0, 1, 0], [0, 0, 1], None]

   

.. data:: A2p0
   :annotation: = [[0, 1, 0], [0, 0, 1], None]

   

.. data:: A1p47
   :annotation: = [[1362557480, 3230022138, 4278720212], [3427386258, 3848976950, 3230022138], [2109817045,...

   

.. data:: A2p47
   :annotation: = [[2920112852, 1965329198, 1177141043], [2135250851, 2920112852, 969184056], [296035385,...

   

.. data:: A1p94
   :annotation: = [[2873769531, 2081104178, 596284397], [4153800443, 1261269623, 2081104178], [3967600061,...

   

.. data:: A2p94
   :annotation: = [[1347291439, 2050427676, 736113023], [4102191254, 1347291439, 878627148], [1293500383,...

   

.. data:: A1p141
   :annotation: = [[3230096243, 2131723358, 3262178024], [2882890127, 4088518247, 2131723358], [3991553306,...

   

.. data:: A2p141
   :annotation: = [[2196438580, 805386227, 4266375092], [4124675351, 2196438580, 2527961345], [94452540,...

   

.. data:: bsma
   

   

.. data:: bsmb
   

   

.. data:: bsmc
   :annotation: = [0.3374754822726147, 0.9761690190917186, 0.1607979714918209, 0.0276438810333863,...

   

.. function:: mrg32k3a(state)

   Generate a random number between 0 and 1 from a given state.

   :param state: current state of the generator
   :type state: tuple of int of length 6

   :returns: * **new_state** (*tuple of int of length 6*) -- next state of the generator
             * **u** (*float*) -- pseudo uniform random variate


.. function:: bsm(u)

   Approximate a quantile of the standard normal distribution via
   the Beasley-Springer-Moro algorithm.

   :param u: probability value for the desired quantile (between 0 and 1)
   :type u: float

   :returns: **z**
   :rtype: float


.. class:: MRG32k3a(ref_seed=(12345, 12345, 12345, 12345, 12345, 12345), s_ss_sss_index=None)


   Bases: :py:obj:`random.Random`

   Implements mrg32k3a as the generator for a random.Random object.

   .. attribute:: _current_state

      current state of mrg32k3a generator

      :type: tuple of int of length 6

   .. attribute:: ref_seed

      seed from which to start the generator
      streams/substreams/subsubstreams are referenced w.r.t. ref_seed

      :type: tuple of int of length 6

   .. attribute:: s_ss_sss_index

      triplet of the indices of the current stream-substream-subsubstream

      :type: list of int of length 3

   .. attribute:: stream_start

      state corresponding to the start of the current stream

      :type: list of int of length 6

   .. attribute:: substream_start

      state corresponding to the start of the current substream

      :type: list of int of length 6

   .. attribute:: subsubstream_start

      state corresponding to the start of the current subsubstream

      :type: list of int of length 6

   :param ref_seed: seed from which to start the generator
   :type ref_seed: tuple of int of length 6 (optional)
   :param s_ss_sss_index: triplet of the indices of the stream-substream-subsubstream to start at
   :type s_ss_sss_index: list of int of length 3

   .. seealso:: :obj:`random.Random`

   .. method:: __deepcopy__(self, memo)


   .. method:: seed(self, new_state)

      Set the state (or seed) of the generator and update the generator state.

      :param new_state: new state to which to advance the generator
      :type new_state: tuple of int of length 6


   .. method:: getstate(self)

      Return the state of the generator.

      :returns: * **_current_state** (*tuple of int of length 6*) -- current state of the generator
                * **random.Random.getstate()** (*tuple of int*) -- Random.getstate output

      .. seealso:: :obj:`random.Random`


   .. method:: setstate(self, state)

      Set the internal state of the generator.

      :param state: state[0] is new state for the generator
                    state[1] is random.Random.getstate()
      :type state: tuple

      .. seealso:: :obj:`random.Random`


   .. method:: random(self)

      Generate a standard uniform variate and advance the generator
      state.

      :returns: **u** -- pseudo uniform random variate
      :rtype: float


   .. method:: get_current_state(self)

      Return the current state of the generator.

      :returns: **_current_state** -- current state of the generator
      :rtype: tuple of int of length 6


   .. method:: normalvariate(self, mu=0, sigma=1)

      Generate a normal random variate.

      :param mu: expected value of the normal distribution from which to
                 generate
      :type mu: float
      :param sigma: standard deviation of the normal distribution from which to
                    generate
      :type sigma: float

      :returns: a normal random variate from the specified distribution
      :rtype: float


   .. method:: mvnormalvariate(self, mean_vec, cov, factorize_flag)

      Generate a normal random vector.

      :param mean_vec: location parameters of the multivariate normal distribution
                       from which to generate
      :type mean_vec: array
      :param cov: covariance matrix of the multivariate normal distribution
                  from which to generate
      :type cov: array
      :param factorize_flag: 0 : need to calculate chol based on covariance
                             1 : do not need to calculate chol since we already have it
      :type factorize_flag: binary

      :returns: a normal random multivariate from the specified distribution
      :rtype: float


   .. method:: poissonvariate(self, lmbda)

      Generate a poisson random variate.

      :param lmbda: expected value of the poisson distribution from which to
                    generate
      :type lmbda: float

      :returns: a poisson random variate from the specified distribution
      :rtype: float


   .. method:: advance_stream(self)

      Advance the state of the generator to the start of the next stream.
      Streams are of length 2**141.


   .. method:: advance_substream(self)

      Advance the state of the generator to the start of the next substream.
      Substreams are of length 2**94.


   .. method:: advance_subsubstream(self)

      Advance the state of the generator to the start of the next subsubstream.
      Subsubstreams are of length 2**47.


   .. method:: reset_stream(self)

      Reset the state of the generator to the start of the current stream.


   .. method:: reset_substream(self)

      Reset the state of the generator to the start of the current substream.


   .. method:: reset_subsubstream(self)

      Reset the state of the generator to the start of the current subsubstream.


   .. method:: start_fixed_s_ss_sss(self, s_ss_sss_triplet)

      Set the rng to the start of a specified (stream, substream, subsubstream) triplet.

      :param s_ss_sss_triplet: triplet of the indices of the current stream-substream-subsubstream
      :type s_ss_sss_triplet: list of int of length 3



