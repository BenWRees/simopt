:mod:`rng.matmodops`
====================

.. py:module:: rng.matmodops

.. autoapi-nested-parse::

   Summary
   -------
   Useful matrix/modulus operations for mrg32k3a generator.

   Listing
   -------
   mat33_mat31_mult
   mat33_mat33_mult
   mat31_mod
   mat33_mod
   mat33_mat33_mod
   mat33_power_mod



Module Contents
---------------


Functions
~~~~~~~~~

.. autoapisummary::

   rng.matmodops.mat33_mat31_mult
   rng.matmodops.mat33_mat33_mult
   rng.matmodops.mat31_mod
   rng.matmodops.mat33_mod
   rng.matmodops.mat33_mat33_mod
   rng.matmodops.mat33_power_mod



.. function:: mat33_mat31_mult(A, b)

   Multiply a 3x3 matrix with a 3x1 matrix.

   :param A: 3x3 matrix
   :type A: list of list of float
   :param b: 3x1 matrix
   :type b: list of float

   :returns: **res** -- 3x1 matrix
   :rtype: list of float


.. function:: mat33_mat33_mult(A, B)

   Multiply a 3x3 matrix with a 3x3 matrix.

   :param A: 3x3 matrix
   :type A: list of list of float
   :param B: 3x3 matrix
   :type B: list of list of float

   :returns: **res** -- 3x3 matrix
   :rtype: list of float


.. function:: mat31_mod(b, m)

   Compute moduli of a 3x1 matrix.

   :param b: 3x1 matrix
   :type b: list of float
   :param m: modulus
   :type m: float

   :returns: **res** -- 3x1 matrix
   :rtype: list of float


.. function:: mat33_mod(A, m)

   Compute moduli of a 3x3 matrix.

   :param A: 3x3 matrix
   :type A: list of float
   :param m: modulus
   :type m: float

   :returns: **res** -- 3x3 matrix
   :rtype: list of float


.. function:: mat33_mat33_mod(A, B, m)

   Compute moduli of a 3x3 matrix x 3x3 matrix product.

   :param A: 3x3 matrix
   :type A: list of list of float
   :param B: 3x3 matrix
   :type B: list of list of float
   :param m: modulus
   :type m: float

   :returns: **res** -- 3x3 matrix
   :rtype: list of list of float


.. function:: mat33_power_mod(A, j, m)

   Compute moduli of a 3x3 matrix power.
   Use divide-and-conquer algorithm described in L'Ecuyer (1990).

   :param A: 3x3 matrix
   :type A: list of list of float
   :param j: exponent
   :type j: int
   :param m: modulus
   :type m: float

   :returns: **res** -- 3x3 matrix
   :rtype: list of list of float


