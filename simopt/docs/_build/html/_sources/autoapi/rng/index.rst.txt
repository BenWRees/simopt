:mod:`rng`
==========

.. py:module:: rng


Submodules
----------
.. toctree::
   :titlesonly:
   :maxdepth: 1

   matmodops/index.rst
   mrg32k3a/index.rst


Package Contents
----------------

Classes
~~~~~~~

.. autoapisummary::

   rng.MRG32k3a




.. class:: MRG32k3a(ref_seed=(12345, 12345, 12345, 12345, 12345, 12345), s_ss_sss_index=None)


   Bases: :py:obj:`random.Random`

   Implements mrg32k3a as the generator for a random.Random object.

   .. attribute:: _current_state

      current state of mrg32k3a generator

      :type: tuple of int of length 6

   .. attribute:: ref_seed

      seed from which to start the generator
      streams/substreams/subsubstreams are referenced w.r.t. ref_seed

      :type: tuple of int of length 6

   .. attribute:: s_ss_sss_index

      triplet of the indices of the current stream-substream-subsubstream

      :type: list of int of length 3

   .. attribute:: stream_start

      state corresponding to the start of the current stream

      :type: list of int of length 6

   .. attribute:: substream_start

      state corresponding to the start of the current substream

      :type: list of int of length 6

   .. attribute:: subsubstream_start

      state corresponding to the start of the current subsubstream

      :type: list of int of length 6

   :param ref_seed: seed from which to start the generator
   :type ref_seed: tuple of int of length 6 (optional)
   :param s_ss_sss_index: triplet of the indices of the stream-substream-subsubstream to start at
   :type s_ss_sss_index: list of int of length 3

   .. seealso:: :obj:`random.Random`

   .. method:: __deepcopy__(self, memo)


   .. method:: seed(self, new_state)

      Set the state (or seed) of the generator and update the generator state.

      :param new_state: new state to which to advance the generator
      :type new_state: tuple of int of length 6


   .. method:: getstate(self)

      Return the state of the generator.

      :returns: * **_current_state** (*tuple of int of length 6*) -- current state of the generator
                * **random.Random.getstate()** (*tuple of int*) -- Random.getstate output

      .. seealso:: :obj:`random.Random`


   .. method:: setstate(self, state)

      Set the internal state of the generator.

      :param state: state[0] is new state for the generator
                    state[1] is random.Random.getstate()
      :type state: tuple

      .. seealso:: :obj:`random.Random`


   .. method:: random(self)

      Generate a standard uniform variate and advance the generator
      state.

      :returns: **u** -- pseudo uniform random variate
      :rtype: float


   .. method:: get_current_state(self)

      Return the current state of the generator.

      :returns: **_current_state** -- current state of the generator
      :rtype: tuple of int of length 6


   .. method:: normalvariate(self, mu=0, sigma=1)

      Generate a normal random variate.

      :param mu: expected value of the normal distribution from which to
                 generate
      :type mu: float
      :param sigma: standard deviation of the normal distribution from which to
                    generate
      :type sigma: float

      :returns: a normal random variate from the specified distribution
      :rtype: float


   .. method:: mvnormalvariate(self, mean_vec, cov, factorize_flag)

      Generate a normal random vector.

      :param mean_vec: location parameters of the multivariate normal distribution
                       from which to generate
      :type mean_vec: array
      :param cov: covariance matrix of the multivariate normal distribution
                  from which to generate
      :type cov: array
      :param factorize_flag: 0 : need to calculate chol based on covariance
                             1 : do not need to calculate chol since we already have it
      :type factorize_flag: binary

      :returns: a normal random multivariate from the specified distribution
      :rtype: float


   .. method:: poissonvariate(self, lmbda)

      Generate a poisson random variate.

      :param lmbda: expected value of the poisson distribution from which to
                    generate
      :type lmbda: float

      :returns: a poisson random variate from the specified distribution
      :rtype: float


   .. method:: advance_stream(self)

      Advance the state of the generator to the start of the next stream.
      Streams are of length 2**141.


   .. method:: advance_substream(self)

      Advance the state of the generator to the start of the next substream.
      Substreams are of length 2**94.


   .. method:: advance_subsubstream(self)

      Advance the state of the generator to the start of the next subsubstream.
      Subsubstreams are of length 2**47.


   .. method:: reset_stream(self)

      Reset the state of the generator to the start of the current stream.


   .. method:: reset_substream(self)

      Reset the state of the generator to the start of the current substream.


   .. method:: reset_subsubstream(self)

      Reset the state of the generator to the start of the current subsubstream.


   .. method:: start_fixed_s_ss_sss(self, s_ss_sss_triplet)

      Set the rng to the start of a specified (stream, substream, subsubstream) triplet.

      :param s_ss_sss_triplet: triplet of the indices of the current stream-substream-subsubstream
      :type s_ss_sss_triplet: list of int of length 3



