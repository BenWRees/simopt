:mod:`data_farming_base`
========================

.. py:module:: data_farming_base


Module Contents
---------------

Classes
~~~~~~~

.. autoapisummary::

   data_farming_base.DesignPoint
   data_farming_base.DataFarmingExperiment
   data_farming_base.DataFarmingMetaExperiment



Functions
~~~~~~~~~

.. autoapisummary::

   data_farming_base.record_df_experiment_results



.. class:: DesignPoint(oracle)


   Bases: :py:obj:`object`

   Base class for design points represented as dictionaries of factors.

   .. attribute:: oracle

      oracle to simulate

      :type: Oracle object

   .. attribute:: oracle_factors

      oracle factor names and values

      :type: dict

   .. attribute:: rng_list

      rngs for oracle to use when running replications at the solution

      :type: list of rng.MRG32k3a objects

   .. attribute:: n_reps

      number of replications run at a design point

      :type: int

   .. attribute:: responses

      responses observed from replications

      :type: dict

   .. attribute:: gradients

      gradients of responses (w.r.t. oracle factors) observed from replications

      :type: dict of dict

   :param oracle: oracle with factors oracle_factors
   :type oracle: Oracle object

   .. method:: attach_rngs(self, rng_list, copy=True)

      Attach a list of random-number generators to the design point.

      :param rng_list: list of random-number generators used to run simulation replications
      :type rng_list: list of rng.MRG32k3a objects


   .. method:: simulate(self, m=1)

      Simulate m replications for the current oracle factors.
      Append results to the responses and gradients dictionaries.

      :param m: number of macroreplications to run at the design point
      :type m: int > 0



.. class:: DataFarmingExperiment(oracle_name, factor_settings_filename, factor_headers, design_filename=None, oracle_fixed_factors={})


   Bases: :py:obj:`object`

   Base class for data-farming experiments consisting of an oracle
   and design of associated factors.

   .. attribute:: oracle

      oracle on which the experiment is run

      :type: Oracle object

   .. attribute:: design

      list of design points forming the design

      :type: list of DesignPoint objects

   .. attribute:: n_design_pts

      number of design points in the design

      :type: int

   :param oracle_name: name of oracle on which the experiment is run
   :type oracle_name: string
   :param factor_settings_filename: name of .txt file containing factor ranges and # of digits
   :type factor_settings_filename: string
   :param factor_headers: ordered list of factor names appearing in factor settings/design file
   :type factor_headers: list of strings
   :param design_filename: name of .txt file containing design matrix
   :type design_filename: string
   :param oracle_fixed_factors: non-default values of oracle factors that will not be varied
   :type oracle_fixed_factors: dictionary

   .. method:: run(self, n_reps=10, crn_across_design_pts=True)

      Run a fixed number of macroreplications at each design point.

      :param n_reps: number of replications run at each design point
      :type n_reps: int
      :param crn_across_design_pts: use CRN across design points?
      :type crn_across_design_pts: Boolean


   .. method:: print_to_csv(self, csv_filename='raw_results')

      Extract observed responses from simulated design points.
      Publish to .csv output file.

      Argument
      --------
      csv_filename : string
          name of .csv file to print output to



.. class:: DataFarmingMetaExperiment(solver_name, problem_name, solver_factor_settings_filename, solver_factor_headers, design_filename=None, solver_fixed_factors={}, problem_fixed_factors={}, oracle_fixed_factors={})


   Bases: :py:obj:`object`

   Base class for data-farming meta experiments consisting of problem-solver
   pairs and a design of associated factors.

   .. attribute:: design

      list of design points forming the design

      :type: list of DesignPoint objects

   .. attribute:: n_design_pts

      number of design points in the design

      :type: int

   :param solver_name: name of solver
   :type solver_name: string
   :param problem_name: name of problem
   :type problem_name: string
   :param solver_factor_settings_filename: name of .txt file containing solver factor ranges and # of digits
   :type solver_factor_settings_filename: string
   :param solver_factor_headers: ordered list of solver factor names appearing in factor settings/design file
   :type solver_factor_headers: list of strings
   :param design_filename: name of .txt file containing design matrix
   :type design_filename: string
   :param solver_fixed_factors: dictionary of user-specified solver factors that will not be varied
   :type solver_fixed_factors: dict
   :param problem_fixed_factors: dictionary of user-specified problem factors that will not be varied
   :type problem_fixed_factors: dict
   :param oracle_fixed_factors: dictionary of user-specified oracle factors that will not be varied
   :type oracle_fixed_factors: dict

   .. method:: run(self, n_macroreps=10, crn_across_solns=True)

      Run n_macroreps of each problem-solver design point.

      :param n_macroreps: number of macroreplications for each design point
      :type n_macroreps: int
      :param crn_across_solns: indicates if CRN are used when solver simulates different solutions
      :type crn_across_solns: bool


   .. method:: post_replicate(self, n_postreps, n_postreps_init_opt, crn_across_budget=True, crn_across_macroreps=False)

      For each design point, run postreplications at solutions
      recommended by the solver on each macroreplication.

      :param n_postreps: number of postreplications to take at each recommended solution
      :type n_postreps: int
      :param n_postreps_init_opt: number of postreplications to take at initial x0 and optimal x*
      :type n_postreps_init_opt: int
      :param crn_across_budget: use CRN for post-replications at solutions recommended at different times?
      :type crn_across_budget: bool
      :param crn_across_macroreps: use CRN for post-replications at solutions recommended on different macroreplications?
      :type crn_across_macroreps: bool


   .. method:: calculate_statistics(self, solve_tols=[0.05, 0.1, 0.2, 0.5], beta=0.5)

      For each design point, calculate statistics from each macroreplication.
          - area under estimated progress curve
          - alpha-solve time

      :param solve_tols: relative optimality gap(s) definining when a problem is solved
      :type solve_tols: list of floats in (0,1]
      :param beta: quantile to compute, e.g., beta quantile
      :type beta: float in (0,1)


   .. method:: print_to_csv(self, csv_filename='meta_raw_results')

      Extract observed statistics from simulated design points.
      Publish to .csv output file.

      Argument
      --------
      csv_filename : string
          name of .csv file to print output to



.. function:: record_df_experiment_results(experiment, file_name)

   Save wrapper_base.Experiment object to .pickle file.

   :param experiment: Experiment object to pickle
   :type experiment: wrapper_base.Experiment object
   :param file_name: base name of pickle file to write outputs to
   :type file_name: string


