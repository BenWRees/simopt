import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_RMITD1_RNDSRCH(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "RMITD-1"
        self.expected_solver_name = "RNDSRCH"
        self.expected_all_recommended_xs = "[[(100, 50, 30), (175.08312738903115, 53.49231714531826, 0.5331458316404217), (166.41214546135774, 30.63243575662995, 8.620546616863855), (140.5243724186601, 11.884035093681725, 2.6596140473149075), (156.02410134231047, 34.125807811079554, 7.328905985786684), (137.76632194765727, 29.455936077710877, 0.5305126566315612), (137.76632194765727, 29.455936077710877, 0.5305126566315612)], [(100, 50, 30), (74.67673442623597, 61.8070442825242, 3.8593686657838253), (124.39646354747576, 11.170866834824045, 6.5803749413969905), (196.81240057968054, 142.57180552346065, 5.375621960994175), (196.01101488114594, 99.49375942691742, 0.8546394709881885), (199.60318298951307, 16.12808610187888, 0.49209946355705353), (199.60318298951307, 16.12808610187888, 0.49209946355705353)], [(100, 50, 30), (128.07894722568363, 103.57650517111483, 2.1196934489757377), (180.031163628791, 153.77454384814604, 0.6767062332376131), (180.031163628791, 153.77454384814604, 0.6767062332376131)], [(100, 50, 30), (73.54768586762219, 59.0969318738584, 4.8556434479481165), (103.95805487019835, 16.78715792757665, 9.87193543775067), (87.09110541151603, 22.306904997638487, 6.649804763300203), (108.62152208417575, 13.049186327082749, 2.4801144180502277), (41.685374656356394, 18.023337272194716, 1.889385607324589), (64.31580995621357, 9.641142656411434, 0.5292650102840556), (64.31580995621357, 9.641142656411434, 0.5292650102840556)], [(100, 50, 30), (114.29500025076793, 11.828055945279925, 8.327346791533785), (87.86185678915732, 18.224624216258956, 14.876355951251938), (74.29960240943295, 28.197069760642602, 4.3169785518971135), (52.95440093952124, 13.73577054055414, 11.679573270806868), (44.775899479488636, 15.334883935203743, 2.184397087980666), (58.52546793718295, 10.655472058881585, 3.73067981004282), (39.32439879967714, 7.681895698847787, 2.380161288909975), (39.32439879967714, 7.681895698847787, 2.380161288909975)], [(100, 50, 30), (187.47880607740763, 64.3202458458513, 30.492683020997347), (179.14687107842167, 40.23227327696813, 29.360415997674348), (147.9360727525091, 43.32850845817704, 3.5323898621688348), (142.13722244942147, 32.85186896873376, 3.2918003584943887), (139.32074694398685, 5.425412796550864, 2.718040944391982), (139.32074694398685, 5.425412796550864, 2.718040944391982)], [(100, 50, 30), (73.67178507236096, 35.18890201097625, 21.669836181058997), (46.37794728544844, 11.930589536568762, 10.87036199426169), (50.79043208724118, 36.552024400518526, 5.98351588579158), (34.21166621056073, 14.629569007770707, 2.800535453136865), (42.42803021916894, 30.018310398750142, 1.4640068878683805), (43.212950646014356, 23.720527331780104, 2.164707204852975), (43.212950646014356, 23.720527331780104, 2.164707204852975)], [(100, 50, 30), (67.62310142293691, 45.48901400103116, 4.946184258164449), (96.00618052512537, 48.3663751883912, 12.99321020547946), (88.9967418534966, 40.91598124022691, 7.602371177937186), (88.66113830393105, 22.17612625393883, 11.437107803979522), (78.82402976867702, 40.25406319947103, 3.155018122923507), (81.32844067092884, 14.062872465019458, 3.4907240714110923), (81.32844067092884, 14.062872465019458, 3.4907240714110923)], [(100, 50, 30), (34.36180929356635, 24.692619623631444, 2.866542012486779), (141.02101398919964, 70.6293035975879, 17.605200563995567), (127.77508585183367, 56.28112715354061, 8.987842749215497), (82.43973803414627, 43.01925733406225, 2.012136536306795), (82.3727822242162, 21.680640128807436, 2.1555115581365314), (108.56938105598822, 2.615016918611601, 1.3671675893410247), (97.80383080784159, 18.756835605348883, 0.15735808590671094), (100.70187625149039, 42.4540891382961, 0.37706584633088114), (101.35199508658029, 36.76466128021701, 0.6297145343806184), (101.35199508658029, 36.76466128021701, 0.6297145343806184)], [(100, 50, 30), (194.97353982983537, 134.56862023805107, 35.928910102977724), (188.17971645420909, 36.052812891776, 10.18242335830444), (158.4908694415588, 116.80386408586143, 10.775367506145603), (94.2937604182172, 42.742687997054105, 3.896170950123006), (137.61937181112108, 106.25602940592313, 6.744730193844038), (122.08009944126492, 73.34863461007272, 4.840569618818928), (104.4283428977, 65.34399161849876, 0.4907858330019409), (104.4283428977, 65.34399161849876, 0.4907858330019409)], [(100, 50, 30), (26.073972280925663, 5.1080709003095395, 1.0384940579549327), (71.59351089304553, 23.85609810288726, 0.6079966031162286), (58.791535168103714, 42.63784109351015, 1.7836185570323515), (58.791535168103714, 42.63784109351015, 1.7836185570323515)], [(100, 50, 30), (65.5762663203905, 50.343176552881665, 3.333149359863034), (60.45132343980374, 24.96778420016615, 11.833818364291039), (58.248692219082265, 33.90986836823929, 0.2834375619317901), (57.02286969422291, 17.083419476019046, 1.918434491156222), (57.02286969422291, 17.083419476019046, 1.918434491156222)], [(100, 50, 30), (87.22851819906658, 64.66845349665692, 24.79094601155184), (177.99515682807953, 150.67953186606587, 22.829344856670065), (108.95995336204543, 20.256274755416708, 12.720319266856277), (180.6137178017882, 31.416622906610737, 15.472762756593214), (175.19351677974956, 62.90984169702211, 3.252508415962046), (185.20327674278096, 58.93396000803068, 1.9300664312797176), (173.78704113599485, 24.404774996497018, 1.446430827690664), (173.78704113599485, 24.404774996497018, 1.446430827690664)], [(100, 50, 30), (109.03393250868143, 44.906461411282415, 20.32795279012392), (47.41117178032262, 14.676268364457373, 8.5924847487446), (63.27037503017067, 13.463544007487865, 9.821781945165863), (48.09525283142286, 12.339561098867263, 4.350813642369872), (58.78329659507743, 21.641216543822793, 2.6280771816708275), (49.03688379555751, 14.214039863208377, 3.172888015387745), (62.19958018919283, 13.86308271519868, 4.499685749396365), (71.8814973140488, 8.828410747533068, 3.646668037052023), (69.85756865012792, 10.435648115960605, 2.2438001042954676), (55.775210401332885, 14.519188371484908, 2.5728904025538837), (55.775210401332885, 14.519188371484908, 2.5728904025538837)], [(100, 50, 30), (20.072109060128845, 18.481520480512703, 8.539756335380796), (67.54333378025645, 40.624088991854926, 6.441015130777646), (69.02639487699842, 30.644335731403398, 10.85890369924064), (69.19388472855279, 9.477622660655882, 1.080439245498591), (32.16484735959402, 3.865289409640291, 0.3252607462122653), (32.16484735959402, 3.865289409640291, 0.3252607462122653)], [(100, 50, 30), (195.95356838739065, 64.06919162869265, 61.08495991343439), (198.55291552352872, 107.75949429114695, 27.771059651016355), (180.46629236475306, 76.76879036424413, 2.3143242768429806), (172.44997151885048, 46.24316557743085, 18.904800371313115), (137.85065772778745, 9.539781274337905, 7.331388100266627), (132.90395686496586, 51.2360994371373, 6.526091358956649), (128.2528829939197, 36.39265670666299, 0.02199579136798266), (136.34705798704832, 60.603782675598474, 0.5332715136279527), (142.86776997998734, 46.75405796730055, 1.1294658842796703), (142.86776997998734, 46.75405796730055, 1.1294658842796703)], [(100, 50, 30), (21.931639351365387, 20.98915608733531, 4.847249576874988), (104.36048477584983, 35.897852123424705, 4.768082916681014), (47.52463323183444, 17.247556566142425, 11.360559464198625), (34.727250370957904, 27.05107052499025, 6.37662334515193), (91.5186768946901, 24.8151950914321, 1.7781343706538784), (41.902540138859386, 13.570254766990663, 2.6613871924505887), (35.44761137410607, 16.515920040037336, 3.1893334964712543), (35.44761137410607, 16.515920040037336, 3.1893334964712543)], [(100, 50, 30), (197.7991910516824, 74.1632004328877, 22.277471430998776), (130.25070272668876, 48.77752152870514, 24.32117775520426), (117.72897995254674, 55.66760086893593, 21.74033348494893), (130.77371018029092, 25.049629903008004, 17.786524188610965), (91.35763337891264, 29.63305617768217, 5.608052985387626), (171.24322569430598, 55.49118429007157, 3.3111402040154587), (119.2819279643337, 59.03234180964695, 8.029101479345261), (109.29840410455785, 33.78770994670775, 0.7806034671062421), (109.29840410455785, 33.78770994670775, 0.7806034671062421)], [(100, 50, 30), (53.26764417804545, 23.348845461513815, 8.622448610483975), (126.32348259801147, 16.615616636361988, 2.8462129626451755), (116.82442019215773, 66.65680479831421, 5.966670820738081), (70.81361788539974, 16.61758433479293, 1.2364504991987961), (167.0002722963823, 104.14602259694897, 0.7583584072390918), (98.40733415184671, 28.719479305122913, 0.8030586799225317), (98.40733415184671, 28.719479305122913, 0.8030586799225317)], [(100, 50, 30), (94.31855553254941, 48.308552533429804, 26.30692829187985), (75.06053950930766, 9.22358131932675, 5.402939376377359), (62.150452408775244, 35.453935101260086, 7.080881361109979), (63.07549516663491, 39.75799434577647, 0.7245977294436488), (66.11267764853244, 17.67267549315386, 2.770861279298353), (50.390207739817725, 24.09507870017001, 0.5195100112022093), (57.264263581244, 13.496429940512739, 1.0919349331228216), (57.264263581244, 13.496429940512739, 1.0919349331228216)], [(100, 50, 30), (168.6177831777602, 31.91206018387073, 20.058736710859755), (142.565618793864, 22.556448888904736, 2.474963272640566), (125.32022452601387, 49.52265459595066, 11.862254624103421), (112.80279035283729, 44.54594302586191, 3.1306679945390075), (121.06891357859924, 14.169082452349635, 11.625984967268277), (124.98485455216138, 17.099131121444348, 10.087276924902946), (124.98485455216138, 17.099131121444348, 10.087276924902946)], [(100, 50, 30), (81.78977836209208, 70.56198503749745, 12.638630957537156), (54.766200853364964, 23.040349779742016, 20.490624630369698), (52.41619970243647, 29.354973860512157, 0.4079857573055284), (41.30411706661255, 15.388815710524486, 7.180165940307667), (38.6900415754711, 12.945581714781234, 5.700815326014904), (38.6900415754711, 12.945581714781234, 5.700815326014904)], [(100, 50, 30), (73.8198264861768, 68.0339878311077, 21.738366950671267), (96.4045249512748, 30.97177647103777, 9.749246581421069), (31.6695851244204, 28.92938037805984, 14.388802180269467), (63.284632834420464, 58.80272822244267, 8.666953864210845), (68.16055164146115, 36.410011018924955, 9.08006827548477), (60.31647029934122, 38.76562129316136, 7.363536518908943), (39.88422856105481, 11.061609373617626, 2.156270306674816), (57.7951115605848, 38.41971717572333, 1.493557335496863), (57.7951115605848, 38.41971717572333, 1.493557335496863)], [(100, 50, 30), (101.64532525051098, 77.20546993863252, 17.39481166427043), (77.25722893828146, 27.636790170439607, 17.956953992845126), (148.04541990008377, 100.19087517627096, 17.409519949271377), (159.68255647783442, 20.219288581426262, 3.130149154707563), (101.2257916049484, 46.65825541711346, 12.493140389810598), (106.00396903437228, 61.972595260082706, 6.843869719543704), (112.73541651874936, 18.491032078427885, 6.442199819716057), (99.17043867228816, 1.5330663693318622, 1.118907060644745), (101.44400375437756, 12.992924149736815, 0.47332753856948767), (101.44400375437756, 12.992924149736815, 0.47332753856948767)]]"
        self.expected_all_intermediate_budgets = "[[0, 60, 470, 640, 3820, 6890, 10000], [0, 40, 80, 100, 560, 3000, 10000], [0, 40, 1520, 10000], [0, 80, 90, 120, 2410, 2530, 3830, 10000], [0, 170, 370, 620, 1100, 2410, 3180, 9900, 10000], [0, 40, 60, 170, 2210, 2610, 10000], [0, 40, 510, 1960, 4970, 5590, 8240, 10000], [0, 80, 940, 1420, 1790, 2090, 4280, 10000], [0, 50, 170, 290, 340, 510, 780, 1940, 3680, 7980, 10000], [0, 80, 130, 190, 240, 980, 2350, 4640, 10000], [0, 150, 5900, 6640, 10000], [0, 320, 790, 1960, 4730, 10000], [0, 40, 50, 100, 140, 1670, 3660, 7650, 10000], [0, 20, 130, 230, 1300, 2230, 3840, 3940, 4080, 6500, 7380, 10000], [0, 70, 220, 280, 630, 2130, 10000], [0, 20, 30, 40, 50, 980, 1050, 1430, 2420, 9960, 10000], [0, 110, 120, 280, 500, 530, 740, 7820, 10000], [0, 120, 170, 320, 460, 590, 940, 1020, 1080, 10000], [0, 70, 80, 270, 550, 1750, 9890, 10000], [0, 20, 30, 220, 2650, 4410, 5300, 7430, 10000], [0, 40, 130, 360, 1220, 1910, 8440, 10000], [0, 330, 720, 1470, 1830, 6130, 10000], [0, 270, 400, 720, 1220, 1370, 2240, 2940, 5890, 10000], [0, 50, 110, 260, 370, 520, 620, 810, 1870, 3650, 10000]]"
        self.expected_all_est_objectives = "[[4506.047142126555, 3342.3641612574866, 3582.8865673791165, 5051.45927131579, 4159.1376986865325, 5268.433600189716, 5268.433600189716], [3503.43007812232, 4552.7282278195335, 4337.38770112416, -29.90138566484151, 663.4575630274444, 831.3184702252797, 831.3184702252797], [3854.4221570058726, 3696.372863281683, 285.76880844162883, 285.76880844162883], [2842.6366699906334, 3705.1499342547754, 3726.335401953453, 4465.06574285847, 3835.2877204083693, 4649.505251918164, 5286.408602012684, 5286.408602012684], [3152.340974881656, 4258.8432178762605, 4327.68444475099, 5197.298802196925, 3935.400854411654, 4838.431104494418, 5134.01576353541, 4446.814740961055, 4446.814740961055], [2569.18394230087, -1141.3388938651267, -633.474544886249, 1796.065670009543, 2136.9356263281015, 2280.0229212829395, 2280.0229212829395], [3403.2774806763955, 3803.7963853636793, 3946.8228898532934, 4510.65138039327, 4403.915654356277, 4734.093527716102, 4922.533575949079, 4922.533575949079], [3335.297892703174, 4890.155723174274, 4552.038391251517, 5023.2760055684985, 4787.482170841365, 5367.092251680084, 5421.575219169749, 5421.575219169749], [2349.1541419308, 3759.8137777335673, 1707.2443264779367, 2597.057630905399, 4165.6069751203595, 4433.729680100104, 3739.7221051993947, 4164.613521136326, 3924.099468246922, 3967.3200858562104, 3967.3200858562104], [4134.983467487309, 502.17860280432365, 2102.7341617634943, 2672.50324736627, 6037.763559936185, 3554.2930608757656, 4909.585514257262, 5597.325809261068, 5597.325809261068], [3344.2718140381708, 4002.946909760664, 5660.499823373194, 5030.645033668597, 5030.645033668597], [3379.3031022424398, 4947.195486107102, 4714.8643144250855, 5680.960386914198, 5652.112651078853, 5652.112651078853], [3720.4359149012594, 3978.4726965621057, 1364.4189310443285, 4868.919553955196, 2003.5204559472813, 2686.4632357603377, 2188.9770610650617, 2768.7674669868347, 2768.7674669868347], [4725.8256213400755, 5586.4409495540285, 4894.163489757639, 5707.303629158735, 5583.314165265412, 6465.934459738232, 5828.905021937684, 6370.380624711213, 6737.079911184241, 6852.6917679815715, 6321.963113273573, 6321.963113273573], [3681.984017936016, 1612.9834348389247, 5144.581384236183, 5065.272070885889, 6000.6395450728305, 4532.9745266857035, 4532.9745266857035], [4214.711466612593, 479.83267757803407, 1141.9040902258007, 2775.990341196985, 2944.8077623797953, 4963.772707675095, 5207.338060259236, 5654.279879537586, 5268.444310579665, 4965.393450296629, 4965.393450296629], [4176.293106763494, 2653.879768104361, 5784.70776361277, 4446.266943107153, 3950.320427510908, 6270.48178759695, 5335.512555626409, 4737.63655353664, 4737.63655353664], [3770.732306460771, 357.47816275110023, 3772.0918006458087, 4214.532104532414, 4053.921515577552, 5689.058628537901, 2326.2564296149344, 4820.83435717051, 5570.38731037324, 5570.38731037324], [3765.6089385001023, 4750.2691236514565, 4784.036526387377, 4878.250562745088, 6058.827503521088, 2076.7445643083165, 5811.479669854382, 5811.479669854382], [4377.848003355299, 4633.502519672449, 6351.347066615171, 5757.374487069332, 6272.698489107874, 6459.970475453348, 6122.258430230688, 6378.308198214308, 6378.308198214308], [4633.368557756737, 3717.6438580455374, 5572.310059303371, 5833.439807205041, 6597.62505623071, 5988.317921985282, 5968.373250760556, 5968.373250760556], [3289.4918315318296, 3648.815736792555, 3047.120901046174, 5427.603638675323, 4176.247872703781, 4204.891454056826, 4204.891454056826], [3214.278533857261, 2926.536677805623, 4675.359234786074, 2066.3876226473185, 3797.980988481955, 4835.992349687509, 4827.289556195474, 4914.930999812479, 5266.096118737433, 5266.096118737433], [4117.49092937594, 4609.033527273688, 4815.436492984939, 3221.56986366805, 3334.9557306868046, 5506.528243097553, 5565.7195239315415, 5282.95982905967, 5943.740347336205, 5957.7918286825625, 5957.7918286825625]]"
        self.expected_objective_curves = "[([0, 60, 470, 640, 3820, 6890, 10000], [3456.9776372884635, 3342.3641612574866, 3582.8865673791165, 5051.45927131579, 4159.1376986865325, 5268.433600189716, 5268.433600189716]), ([0, 40, 80, 100, 560, 3000, 10000], [3456.9776372884635, 4552.7282278195335, 4337.38770112416, -29.90138566484151, 663.4575630274444, 831.3184702252797, 831.3184702252797]), ([0, 40, 1520, 10000], [3456.9776372884635, 3696.372863281683, 285.76880844162883, 285.76880844162883]), ([0, 80, 90, 120, 2410, 2530, 3830, 10000], [3456.9776372884635, 3705.1499342547754, 3726.335401953453, 4465.06574285847, 3835.2877204083693, 4649.505251918164, 5286.408602012684, 5286.408602012684]), ([0, 170, 370, 620, 1100, 2410, 3180, 9900, 10000], [3456.9776372884635, 4258.8432178762605, 4327.68444475099, 5197.298802196925, 3935.400854411654, 4838.431104494418, 5134.01576353541, 4446.814740961055, 4446.814740961055]), ([0, 40, 60, 170, 2210, 2610, 10000], [3456.9776372884635, -1141.3388938651267, -633.474544886249, 1796.065670009543, 2136.9356263281015, 2280.0229212829395, 2280.0229212829395]), ([0, 40, 510, 1960, 4970, 5590, 8240, 10000], [3456.9776372884635, 3803.7963853636793, 3946.8228898532934, 4510.65138039327, 4403.915654356277, 4734.093527716102, 4922.533575949079, 4922.533575949079]), ([0, 80, 940, 1420, 1790, 2090, 4280, 10000], [3456.9776372884635, 4890.155723174274, 4552.038391251517, 5023.2760055684985, 4787.482170841365, 5367.092251680084, 5421.575219169749, 5421.575219169749]), ([0, 50, 170, 290, 340, 510, 780, 1940, 3680, 7980, 10000], [3456.9776372884635, 3759.8137777335673, 1707.2443264779367, 2597.057630905399, 4165.6069751203595, 4433.729680100104, 3739.7221051993947, 4164.613521136326, 3924.099468246922, 3967.3200858562104, 3967.3200858562104]), ([0, 80, 130, 190, 240, 980, 2350, 4640, 10000], [3456.9776372884635, 502.17860280432365, 2102.7341617634943, 2672.50324736627, 6037.763559936185, 3554.2930608757656, 4909.585514257262, 5597.325809261068, 5597.325809261068]), ([0, 150, 5900, 6640, 10000], [3456.9776372884635, 4002.946909760664, 5660.499823373194, 5030.645033668597, 5030.645033668597]), ([0, 320, 790, 1960, 4730, 10000], [3456.9776372884635, 4947.195486107102, 4714.8643144250855, 5680.960386914198, 5652.112651078853, 5652.112651078853]), ([0, 40, 50, 100, 140, 1670, 3660, 7650, 10000], [3456.9776372884635, 3978.4726965621057, 1364.4189310443285, 4868.919553955196, 2003.5204559472813, 2686.4632357603377, 2188.9770610650617, 2768.7674669868347, 2768.7674669868347]), ([0, 20, 130, 230, 1300, 2230, 3840, 3940, 4080, 6500, 7380, 10000], [3456.9776372884635, 5586.4409495540285, 4894.163489757639, 5707.303629158735, 5583.314165265412, 6465.934459738232, 5828.905021937684, 6370.380624711213, 6737.079911184241, 5714.429498980904, 6321.963113273573, 6321.963113273573]), ([0, 70, 220, 280, 630, 2130, 10000], [3456.9776372884635, 1612.9834348389247, 5144.581384236183, 5065.272070885889, 6000.6395450728305, 4532.9745266857035, 4532.9745266857035]), ([0, 20, 30, 40, 50, 980, 1050, 1430, 2420, 9960, 10000], [3456.9776372884635, 479.83267757803407, 1141.9040902258007, 2775.990341196985, 2944.8077623797953, 4963.772707675095, 5207.338060259236, 5654.279879537586, 5268.444310579665, 4965.393450296629, 4965.393450296629]), ([0, 110, 120, 280, 500, 530, 740, 7820, 10000], [3456.9776372884635, 2653.879768104361, 5784.70776361277, 4446.266943107153, 3950.320427510908, 6270.48178759695, 5335.512555626409, 4737.63655353664, 4737.63655353664]), ([0, 120, 170, 320, 460, 590, 940, 1020, 1080, 10000], [3456.9776372884635, 357.47816275110023, 3772.0918006458087, 4214.532104532414, 4053.921515577552, 5689.058628537901, 2326.2564296149344, 4820.83435717051, 5570.38731037324, 5570.38731037324]), ([0, 70, 80, 270, 550, 1750, 9890, 10000], [3456.9776372884635, 4750.2691236514565, 4784.036526387377, 4878.250562745088, 6058.827503521088, 2076.7445643083165, 5811.479669854382, 5811.479669854382]), ([0, 20, 30, 220, 2650, 4410, 5300, 7430, 10000], [3456.9776372884635, 4633.502519672449, 6351.347066615171, 5757.374487069332, 6272.698489107874, 6459.970475453348, 6122.258430230688, 6378.308198214308, 6378.308198214308]), ([0, 40, 130, 360, 1220, 1910, 8440, 10000], [3456.9776372884635, 3717.6438580455374, 5572.310059303371, 5833.439807205041, 6597.62505623071, 5988.317921985282, 5968.373250760556, 5968.373250760556]), ([0, 330, 720, 1470, 1830, 6130, 10000], [3456.9776372884635, 3648.815736792555, 3047.120901046174, 5427.603638675323, 4176.247872703781, 4204.891454056826, 4204.891454056826]), ([0, 270, 400, 720, 1220, 1370, 2240, 2940, 5890, 10000], [3456.9776372884635, 2926.536677805623, 4675.359234786074, 2066.3876226473185, 3797.980988481955, 4835.992349687509, 4827.289556195474, 4914.930999812479, 5266.096118737433, 5266.096118737433]), ([0, 50, 110, 260, 370, 520, 620, 810, 1870, 3650, 10000], [3456.9776372884635, 4609.033527273688, 4815.436492984939, 3221.56986366805, 3334.9557306868046, 5506.528243097553, 5565.7195239315415, 5282.95982905967, 5943.740347336205, 5957.7918286825625, 5957.7918286825625])]"
        self.expected_progress_curves = "[([0.0, 0.006, 0.047, 0.064, 0.382, 0.689, 1.0], [1.0, 1.0507711716807329, 0.9442251982302482, 0.29368078182100277, 0.688959010239248, 0.19756607277411395, 0.19756607277411395]), ([0.0, 0.004, 0.008, 0.01, 0.056, 0.3, 1.0], [1.0, 0.5146073282335368, 0.6099982999523887, 2.5446083622528044, 2.237466065906132, 2.1631074892975537, 2.1631074892975537]), ([0.0, 0.004, 0.152, 1.0], [1.0, 0.8939533417940785, 2.404773622268667, 2.404773622268667]), ([0.0, 0.008, 0.009, 0.012, 0.241, 0.253, 0.383, 1.0], [1.0, 0.8900652983225724, 0.8806806163906199, 0.5534398218289227, 0.8324172091819128, 0.4717373004199315, 0.18960355444626276, 0.18960355444626276]), ([0.0, 0.017, 0.037, 0.062, 0.11, 0.241, 0.318, 0.99, 1.0], [1.0, 0.6447917254870595, 0.6142966225602052, 0.2290771757127435, 0.7880693603076389, 0.3880474305351251, 0.25711012726107507, 0.5615246019330408, 0.5615246019330408]), ([0.0, 0.004, 0.006, 0.017, 0.221, 0.261, 1.0], [1.0, 3.036949982936147, 2.811977589239953, 1.735746349883941, 1.5847486864994365, 1.5213642585154157, 1.5213642585154157]), ([0.0, 0.004, 0.051, 0.196, 0.497, 0.559, 0.824, 1.0], [1.0, 0.8463671567219151, 0.7830096575359146, 0.5332464177930004, 0.5805279248090448, 0.434266611793809, 0.3507919422202565, 0.3507919422202565]), ([0.0, 0.008, 0.094, 0.142, 0.179, 0.209, 0.428, 1.0], [1.0, 0.3651345970180121, 0.5149129101950938, 0.3061653296536915, 0.4106166531695587, 0.15386252668104167, 0.1297278071708684, 0.1297278071708684]), ([0.0, 0.005, 0.017, 0.029, 0.034, 0.051, 0.078, 0.194, 0.368, 0.798, 1.0], [1.0, 0.8658504548495383, 1.7750921915556281, 1.3809250690902315, 0.6860932674326763, 0.567320987265989, 0.8747506103191259, 0.6865333450267511, 0.7930756181847213, 0.7739298643625842, 0.7739298643625842]), ([0.0, 0.008, 0.013, 0.019, 0.024, 0.098, 0.235, 0.464, 1.0], [1.0, 2.308908989212682, 1.5998991599801713, 1.3475043712932435, -0.14322965926408412, 0.9568914734180229, 0.3565276400269463, 0.05187427989363295, 0.05187427989363295]), ([0.0, 0.015, 0.59, 0.664, 1.0], [1.0, 0.7581479890061177, 0.023889623749176362, 0.30290101725565277, 0.30290101725565277]), ([0.0, 0.032, 0.079, 0.196, 0.473, 1.0], [1.0, 0.3398672750871406, 0.44278471736997826, 0.014826057926043005, 0.0276049509447044, 0.0276049509447044]), ([0.0, 0.004, 0.005, 0.01, 0.014, 0.167, 0.366, 0.765, 1.0], [1.0, 0.7689895106411391, 1.926956070139771, 0.3745417385741368, 1.6438485825569307, 1.341320412897071, 1.561695510651007, 1.3048615042385305, 1.3048615042385305]), ([0.0, 0.002, 0.013, 0.023, 0.13, 0.223, 0.384, 0.394, 0.408, 0.65, 0.738, 1.0], [1.0, 0.05669602599229776, 0.3633592472746247, 0.003156598793130731, 0.05808112055031512, -0.33289966156528156, -0.050710061596155674, -0.290571478781627, -0.453010949893143, -0.0, -0.2691236188031904, -0.2691236188031904]), ([0.0, 0.007, 0.022, 0.028, 0.063, 0.213, 1.0], [1.0, 1.8168476297284464, 0.2524297968052787, 0.28756202473718917, -0.1267845622530135, 0.5233577700343292, 0.5233577700343292]), ([0.0, 0.002, 0.003, 0.004, 0.005, 0.098, 0.105, 0.143, 0.242, 0.996, 1.0], [1.0, 2.3188077275226706, 2.025525100378895, 1.3016619347005405, 1.2268796440800682, 0.3325239417256197, 0.22463001197354218, 0.02664491786691899, 0.19756132831416298, 0.33180598948529194, 0.33180598948529194]), ([0.0, 0.011, 0.012, 0.028, 0.05, 0.053, 0.074, 0.782, 1.0], [1.0, 1.3557541504260515, -0.03113167807670417, 0.5617672639641554, 0.7814603276401301, -0.24631855857124083, 0.1678516161449467, 0.43269713167303137, 0.43269713167303137]), ([0.0, 0.012, 0.017, 0.032, 0.046, 0.059, 0.094, 0.102, 0.108, 1.0], [1.0, 2.373008003906506, 0.8604115690329273, 0.6644205441988904, 0.7355673941850738, 0.011238720467767548, 1.5008838624030783, 0.3958423906946367, 0.06380742422550419, 0.06380742422550419]), ([0.0, 0.007, 0.008, 0.027, 0.055, 0.175, 0.989, 1.0], [1.0, 0.4271011894829971, 0.4121429955525161, 0.37040831320714046, -0.1525605087684946, 1.6114119624882581, -0.04299102564283186, -0.04299102564283186]), ([0.0, 0.002, 0.003, 0.022, 0.265, 0.441, 0.53, 0.743, 1.0], [1.0, 0.47882614803492207, -0.2821400440214753, -0.0190236561927089, -0.2473005070896299, -0.3302577517260997, -0.18065897136961717, -0.2940832141313902, -0.2940832141313902]), ([0.0, 0.004, 0.013, 0.036, 0.122, 0.191, 0.844, 1.0], [1.0, 0.8845307733110866, 0.06295569003672305, -0.0527188686694356, -0.3912356104850282, -0.12132636254712428, -0.1124913253252131, -0.1124913253252131]), ([0.0, 0.033, 0.072, 0.147, 0.183, 0.613, 1.0], [1.0, 0.9150200707446013, 1.1815572430124888, 0.1270573539896191, 0.6813795910243371, 0.6686911338133068, 0.6686911338133068]), ([0.0, 0.027, 0.04, 0.072, 0.122, 0.137, 0.224, 0.294, 0.589, 1.0], [1.0, 1.2349733203547304, 0.4602845720997239, 1.6159998528600303, 0.8489432457098611, 0.3891277436298551, 0.3929828838610672, 0.35415971110410777, 0.1986015240685352, 0.1986015240685352]), ([0.0, 0.005, 0.011, 0.026, 0.037, 0.052, 0.062, 0.081, 0.187, 0.365, 1.0], [1.0, 0.4896653569739849, 0.398233522163338, 1.104280307197304, 1.054052938480016, 0.09209554339178015, 0.06587514780398143, 0.19113128268336857, -0.10157950751755267, -0.10780399521751331, -0.10780399521751331])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
