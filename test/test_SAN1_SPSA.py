import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_SAN1_SPSA(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "SAN-1"
        self.expected_solver_name = "SPSA"
        self.expected_all_recommended_xs = "[[(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.690833430754342, 8.690833430754342, 8.690833430754342, 8.690833430754342, 8.690833430754342, 8.690833430754342, 8.690833430754342, 8.690833430754342, 7.309166569245658, 8.690833430754342, 7.309166569245658, 8.690833430754342, 8.690833430754342), (8.535584815340517, 8.548120377340283, 8.522336798555877, 8.621529233041567, 8.650995830107824, 8.629822449870986, 8.640846863163976, 8.720383961270262, 7.261481098891493, 8.747471695468342, 7.12241296482881, 8.632297095536302, 8.699185275045146), (8.36205312192482, 8.530644095539358, 8.524625487569551, 8.709027509638883, 8.653545652200076, 8.641913184034546, 8.597101665633286, 8.588075520219316, 7.097227763141245, 8.73054181856169, 6.907283786495858, 8.653023834881012, 8.673714123520973), (8.16028506764311, 8.579440846875999, 8.518517639728936, 8.592797418399895, 8.61418748978751, 8.701027376835368, 8.561744360625474, 8.545191335447003, 6.942933593751546, 8.834947624221877, 6.728103328139801, 8.548366042380378, 8.68448675845381), (8.111068845904107, 8.56169160621777, 8.56231401774589, 8.581219588870368, 8.563489022682106, 8.736251638222832, 8.571978971502979, 8.52559979191042, 6.889139674086566, 8.850800423931911, 6.672705239110956, 8.52933290146623, 8.716372166504218), (8.029487615319471, 8.56037579950969, 8.53738976393501, 8.561613591782123, 8.548199740920637, 8.73363964528626, 8.553966588655424, 8.54989304351216, 6.854610668608657, 8.829657228980874, 6.627588517241264, 8.517456948089816, 8.730457752435019), (8.029487615319471, 8.56037579950969, 8.53738976393501, 8.561613591782123, 8.548199740920637, 8.73363964528626, 8.553966588655424, 8.54989304351216, 6.854610668608657, 8.829657228980874, 6.627588517241264, 8.517456948089816, 8.730457752435019)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.235945798647217, 7.764054201352783, 8.235945798647217, 8.235945798647217, 8.235945798647217, 7.764054201352783, 8.235945798647217, 7.764054201352783, 8.235945798647217, 8.235945798647217, 8.235945798647217, 7.764054201352783, 7.764054201352783), (8.17315379684797, 7.701262199553537, 8.17315379684797, 8.298737800446464, 8.298737800446464, 7.826846203152029, 8.298737800446464, 7.701262199553537, 8.17315379684797, 8.298737800446464, 8.298737800446464, 7.826846203152029, 7.826846203152029), (8.121667378831702, 7.810977996366434, 8.194105087974222, 8.258285585710848, 8.297105281132875, 7.833005468423753, 8.2153389818255, 7.5654899873485295, 8.160515402654745, 8.23230412736654, 8.356667068770879, 7.88600267644704, 7.773644225013307), (8.062546092859023, 7.769888690706032, 8.20840569545227, 8.290618173501173, 8.311405888610924, 7.80111762672172, 8.27446026779818, 7.506813447464144, 8.201604708315148, 8.26419196906857, 8.370967676248927, 7.844468624698345, 7.732554919352904), (8.048001469593485, 7.701768419802525, 8.168139858464444, 8.172137150030993, 8.350158345912556, 7.837971432141989, 8.268018625747294, 7.34747456236698, 8.168912553150014, 8.354137334630062, 8.308357198511986, 7.832919077499321, 7.78838427897459), (8.043905966129271, 7.662732023885591, 8.19367978816968, 8.086975823183073, 8.395339135066438, 7.804815984294533, 8.242575394735264, 7.236678620645836, 8.184772239942363, 8.312869909636644, 8.252377926412032, 7.796625126833338, 7.715708249210032), (8.03565640032701, 7.6449042338627295, 8.179971682236339, 8.048535536677786, 8.415731250613494, 7.817693136948237, 8.219339169938792, 7.1801731276486, 8.193021805744625, 8.336106134433116, 8.216082355805742, 7.83254141467394, 7.671036632539983), (7.946591071060861, 7.597220612666689, 8.14368265575465, 7.9853499811711055, 8.388788923392498, 7.802370237387061, 8.096250160086553, 7.046172800104506, 8.17891768532303, 8.338292568297712, 8.216742186691695, 7.802571413364348, 7.704181462663385), (7.90651155303884, 7.603421070814153, 8.156495603598962, 7.960256437842647, 8.352712442739254, 7.854516646198731, 8.046043840841744, 6.9715580755558575, 8.156300194228404, 8.31918764702747, 8.173925290773841, 7.817315365166334, 7.692187713686654), (7.90651155303884, 7.603421070814153, 8.156495603598962, 7.960256437842647, 8.352712442739254, 7.854516646198731, 8.046043840841744, 6.9715580755558575, 8.156300194228404, 8.31918764702747, 8.173925290773841, 7.817315365166334, 7.692187713686654)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.080313409691614, 7.919686590308386, 7.919686590308386, 8.080313409691614, 8.080313409691614, 7.919686590308386, 8.080313409691614, 8.080313409691614, 7.919686590308386, 8.080313409691614, 8.080313409691614, 7.919686590308386, 7.919686590308386), (8.083561587676407, 7.922934768293178, 7.916438412323593, 8.077065231706822, 8.077065231706822, 7.922934768293178, 8.077065231706822, 8.083561587676407, 7.916438412323593, 8.077065231706822, 8.077065231706822, 7.922934768293178, 7.916438412323593), (7.901466754796955, 8.10502960117263, 8.098533245203045, 7.89497039882737, 8.259160064586274, 7.740839935413726, 7.89497039882737, 7.901466754796955, 7.7343435794441415, 7.89497039882737, 8.259160064586274, 8.10502960117263, 8.098533245203045), (7.899701430924152, 8.106794925045433, 8.096767921330242, 7.896735722700173, 8.260925388459077, 7.739074611540923, 7.893205074954567, 7.903232078669758, 7.7325782555713385, 7.893205074954567, 8.260925388459077, 8.106794925045433, 8.096767921330242), (7.877863583563652, 8.128632772405933, 8.118605768690742, 7.8748978753396734, 8.239087541098577, 7.717236764180424, 7.915042922315067, 7.881394231309258, 7.754416102931838, 7.871367227594067, 8.239087541098577, 8.084957077684933, 8.118605768690742), (7.658915435982225, 8.024904361248652, 8.128788019630239, 7.890573977530007, 8.316667182823487, 7.4972636859855974, 7.945838974673105, 7.962611551182542, 7.873257256564047, 7.876987509266513, 8.367870702273446, 7.935559911559955, 7.8996576211093155), (7.601225591713794, 8.062339663288544, 8.18647786389867, 7.920944436459905, 8.339766842166178, 7.466893227055699, 7.888149130404674, 7.965456668296694, 7.815567412295616, 7.846823006813828, 8.425560546541877, 7.905189452630057, 7.937092923149209), (7.5693284878363345, 8.030442559411085, 8.154580760021211, 7.918119690484487, 8.319965473747978, 7.451972745621023, 7.856252026527215, 7.997353772174153, 7.795766043877415, 7.866624375232029, 8.440481027976553, 7.885388084211856, 7.968990027026669), (7.5493294556422015, 8.010443527216951, 8.134581727827078, 7.898120658290354, 8.299966441553844, 7.43197371342689, 7.836252994333082, 7.97735473998002, 7.815765076071548, 7.846625343037896, 8.460480060170687, 7.905387116405989, 7.988989059220802), (7.423285726246227, 8.071269498066725, 8.152848519344234, 7.883595665755766, 8.339789527399786, 7.417182822551044, 7.738271867772254, 7.999759079741271, 7.8203707019801145, 7.756522379788588, 8.444165769700868, 7.8972880476654534, 7.990393008727699), (7.274911468605291, 8.059644908899418, 8.15510814438186, 7.8937540314244785, 8.333849052654251, 7.405320972408363, 7.630567387303355, 8.013556058897398, 7.883023076399899, 7.649520678780284, 8.357737344235666, 7.863819170643388, 7.965071236645172), (7.111904674755689, 8.034724856905413, 8.142386127671625, 7.870106652646715, 8.250491416454494, 7.327385327176383, 7.557214861406694, 7.989067565397127, 7.903212640712921, 7.658526776176304, 8.34976444149012, 7.84960575916972, 7.940056693013395), (7.08637674172856, 8.009196923878283, 8.147899358231898, 7.875619883206988, 8.224963483427365, 7.301857394149255, 7.531686928379565, 7.976868184314102, 7.908725871273194, 7.684054709203433, 8.344251210929846, 7.855118989729993, 7.965584626040524), (6.89093483040567, 8.061757368950188, 8.23905705163664, 7.831047177551505, 8.205964312645468, 7.2669123683007735, 7.464072250629443, 7.95625674475552, 7.949302161043236, 7.579702971611696, 8.195764797931306, 7.81683330217809, 7.9320014894056605), (6.7383900096756735, 8.028970370790319, 8.274328495090504, 7.7029959711653495, 8.181124330012931, 7.194359738621592, 7.409088780540391, 7.92445450047549, 7.896898826481704, 7.572076914970258, 8.0574079982275, 7.787283738811361, 7.98334861699202), (6.7383900096756735, 8.028970370790319, 8.274328495090504, 7.7029959711653495, 8.181124330012931, 7.194359738621592, 7.409088780540391, 7.92445450047549, 7.896898826481704, 7.572076914970258, 8.0574079982275, 7.787283738811361, 7.98334861699202)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.063253929681187, 8.063253929681187, 7.936746070318813, 7.936746070318813, 7.936746070318813, 7.936746070318813, 8.063253929681187, 7.936746070318813, 8.063253929681187, 7.936746070318813, 8.063253929681187, 8.063253929681187, 8.063253929681187), (7.914016751585324, 8.21249110777705, 7.7875088922229505, 8.085983248414676, 7.7875088922229505, 8.085983248414676, 7.914016751585324, 8.085983248414676, 7.914016751585324, 8.085983248414676, 8.21249110777705, 8.21249110777705, 7.914016751585324), (7.981367911552726, 8.279842267744453, 7.720157732255548, 8.018632088447273, 7.720157732255548, 8.15333440838208, 7.8466655916179215, 8.018632088447273, 7.981367911552726, 8.018632088447273, 8.145139947809646, 8.279842267744453, 7.981367911552726), (8.007762383589052, 8.299418751728032, 7.656919525246742, 8.013370853429839, 7.794998743234366, 8.139882249971633, 7.861535735771415, 8.046575129687257, 8.012032484114851, 8.073131312773059, 8.078881863429848, 8.186319197547176, 7.912282749374736), (8.03080416842659, 8.276376966890494, 7.612647832544002, 8.036412638267377, 7.771956958396827, 8.095610557268893, 7.817264043068675, 8.023533344849719, 8.05630417681759, 8.096173097610597, 8.05584007859231, 8.209360982384714, 7.889240964537197), (7.965449220032011, 8.26294748331675, 7.525570965424779, 7.990208622259229, 7.793841711289374, 8.076174016752393, 7.82742074689967, 7.9691037462820375, 8.039126973807361, 8.051191643474915, 8.073426053858796, 8.174682663073675, 7.843520996243357), (7.95645888923181, 8.25395715251655, 7.516580634624579, 7.999198953059429, 7.802832042089574, 8.067183685952193, 7.81843041609947, 7.960113415481837, 8.030136643007161, 8.060181974275116, 8.082416384658996, 8.183672993873875, 7.834530665443157), (7.851803567117658, 8.234788042066919, 7.242331614742303, 7.97806364168118, 7.932711100833629, 8.06487504345949, 7.909885694184025, 7.83487894111654, 7.93643287194956, 8.049995243499241, 8.051460299819484, 8.063023714944014, 7.622283825674311), (7.789983910102045, 8.21246099092323, 7.07947659400096, 8.024699977823229, 7.926860305759298, 7.968960295557602, 7.842020852252981, 7.769264990138814, 8.013832087776342, 8.06845569525365, 8.05573510771781, 8.11838368135442, 7.465283749772931), (7.7833673944886135, 8.213253032470625, 7.080268635548355, 8.025492019370624, 7.918396895421323, 7.968168254010208, 7.8393819159810425, 7.771903926410753, 8.011193151504402, 8.065816758981711, 8.047271697379836, 8.11176716574099, 7.464491708225537), (7.791628792190771, 8.215799178767353, 7.062086418785713, 8.027052145173995, 7.9128402602586725, 7.960724927178459, 7.830135756999098, 7.762544187620647, 8.010309544400869, 8.084735484710285, 8.042598724558047, 8.10446871088242, 7.447902354399915), (7.791628792190771, 8.215799178767353, 7.062086418785713, 8.027052145173995, 7.9128402602586725, 7.960724927178459, 7.830135756999098, 7.762544187620647, 8.010309544400869, 8.084735484710285, 8.042598724558047, 8.10446871088242, 7.447902354399915)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.903872059153121, 7.903872059153121, 7.903872059153121, 7.903872059153121, 8.096127940846879, 8.096127940846879, 7.903872059153121, 8.096127940846879, 7.903872059153121, 8.096127940846879, 8.096127940846879, 8.096127940846879, 8.096127940846879), (8.037915958161186, 8.037915958161186, 7.769828160145057, 8.037915958161186, 7.962084041838814, 7.962084041838814, 8.037915958161186, 8.230171839854943, 7.769828160145057, 8.230171839854943, 8.230171839854943, 7.962084041838814, 8.230171839854943), (8.129052150564627, 7.992150311575925, 7.6786919677416146, 8.083681604746447, 8.119221674493199, 8.086859505757534, 8.083681604746447, 8.399040746812231, 7.600959253187768, 8.027663661382379, 8.027663661382379, 7.759575863366249, 8.061302932897656), (8.130220642301222, 7.993318803312518, 7.679860459478208, 8.082513113009853, 8.118053182756604, 8.088027997494128, 8.082513113009853, 8.397872255075637, 7.599790761451175, 8.028832153118973, 8.028832153118973, 7.760744355102842, 8.06247142463425), (8.116016876875499, 8.016581875856561, 7.694064224903929, 8.087750017125359, 8.11998985964453, 8.111291070038172, 8.052076459462377, 8.367435601528161, 7.576527688907131, 7.986128411033699, 8.052095225663017, 7.730307701555365, 8.105175166719523), (7.977294008170332, 7.8523334398548155, 7.5484036512863195, 7.755587604031192, 8.161764301520748, 8.0044363339799, 8.009491606300978, 8.225530092543671, 7.3461681560147465, 7.921891269407596, 8.00948063265935, 7.424215961852791, 7.9438541648446055), (7.936247017787478, 7.864333439878652, 7.529561139338367, 7.686116732899329, 8.188921542349714, 7.995845449757829, 7.989081533405886, 8.205626136950674, 7.337394390866048, 7.894866975687368, 7.972130502911143, 7.403987506519477, 7.94938008690342), (7.936247017787478, 7.864333439878652, 7.529561139338367, 7.686116732899329, 8.188921542349714, 7.995845449757829, 7.989081533405886, 8.205626136950674, 7.337394390866048, 7.894866975687368, 7.972130502911143, 7.403987506519477, 7.94938008690342)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.113465366171269, 7.886534633828731, 8.113465366171269, 8.113465366171269, 8.113465366171269, 8.113465366171269, 7.886534633828731, 7.886534633828731, 7.886534633828731, 7.886534633828731, 8.113465366171269, 8.113465366171269, 7.886534633828731), (7.682139581797375, 8.317860418202624, 7.682139581797375, 7.682139581797375, 7.682139581797375, 8.544791150545162, 8.317860418202624, 8.317860418202624, 8.317860418202624, 8.317860418202624, 8.544791150545162, 8.544791150545162, 7.455208849454837), (7.783593941281893, 8.216406058718105, 7.580685222312857, 7.580685222312857, 7.783593941281893, 8.646245510029681, 8.216406058718105, 8.216406058718105, 8.419314777687143, 8.419314777687143, 8.646245510029681, 8.646245510029681, 7.353754489970319), (7.851227836579564, 8.346076866594187, 7.648319117610527, 7.648319117610527, 7.851227836579564, 8.713879405327353, 8.086735250842024, 8.086735250842024, 8.351680882389472, 8.548985585563225, 8.57861161473201, 8.713879405327353, 7.2240836820942365), (7.865081993368018, 8.359931023382641, 7.634464960822073, 7.634464960822073, 7.837373679791109, 8.713672730934361, 8.07288109405357, 8.100589407630478, 8.337826725601017, 8.53513142877477, 8.592465771520464, 8.714086079720344, 7.210229525305782), (7.818646909703868, 8.35763324455472, 7.680900044486223, 7.588029877157923, 7.883808763455259, 8.667237647270213, 8.019664576717911, 8.04737289029482, 8.28461020826536, 8.526052216275339, 8.638900855184612, 8.711788300892422, 7.212527304133704), (7.831214903386177, 8.363900621463378, 7.674632667577563, 7.584104721223887, 7.8735829907475745, 8.657011874562526, 8.029890349425598, 8.041105513386162, 8.250846239709377, 8.492288247719356, 8.623972257219597, 8.715713456826458, 7.199959310451395), (7.824608160984117, 8.367027090017407, 7.681239409979622, 7.577497978821827, 7.850432730361246, 8.61576933663723, 8.010220362887297, 8.026139704401226, 8.247719771155348, 8.493865956718691, 8.604302270681297, 8.696043470288158, 7.203085779005424), (7.779076931310521, 8.352578640480136, 7.703891320167636, 7.571140483171667, 7.86782199264901, 8.599944721636799, 7.95079999327011, 7.978702177383739, 8.261199616166522, 8.525009069198326, 8.587137808201511, 8.68528823701067, 7.1774142029102945), (7.7107609471966265, 8.441816057000063, 7.649649938911646, 7.48842664666516, 7.880984397560597, 8.54387717522208, 7.950000508644358, 7.9371888668454575, 8.13708746130616, 8.443725768555206, 8.485367445832955, 8.701007595630456, 7.067932571212261), (7.712846489926692, 8.433336701660906, 7.641170583572489, 7.496906002004318, 7.8641144673727545, 8.560747105409924, 7.922565680387293, 7.939274409575523, 8.120217531118318, 8.41629094029814, 8.457932617575889, 8.717877525818299, 7.040497742955196), (7.592951325201064, 8.236775447195642, 7.5504687973323925, 7.307402593308906, 7.86167151072268, 8.469921482905507, 7.947361980589894, 7.940813016827736, 8.049377635081457, 8.344674494277955, 8.350021343188283, 8.566775621062527, 6.799274275758394), (7.5474566531663285, 8.247534085622483, 7.536603059343783, 7.286303681216479, 7.823978997470011, 8.423156296572298, 7.935910191788662, 7.906763328144178, 8.066547591634691, 8.353651479154632, 8.341661493077321, 8.571193937788848, 6.768648246123041), (7.538527153269275, 8.213685724013692, 7.5580860236426535, 7.263147401853862, 7.809810927123781, 8.392950463763865, 7.908667301629671, 7.904583808370756, 8.044343660054809, 8.367154020732956, 8.33687693680781, 8.574156024153387, 6.7145346336991505), (7.538527153269275, 8.213685724013692, 7.5580860236426535, 7.263147401853862, 7.809810927123781, 8.392950463763865, 7.908667301629671, 7.904583808370756, 8.044343660054809, 8.367154020732956, 8.33687693680781, 8.574156024153387, 6.7145346336991505)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.5770200900835185, 7.5770200900835185, 8.422979909916481, 8.422979909916481, 8.422979909916481, 8.422979909916481, 7.5770200900835185, 8.422979909916481, 8.422979909916481, 8.422979909916481, 8.422979909916481, 8.422979909916481, 7.5770200900835185), (7.280162447815748, 7.326768425191883, 8.12612226764871, 8.719837552184252, 8.673231574808117, 8.673231574808117, 7.326768425191883, 8.673231574808117, 8.673231574808117, 8.673231574808117, 8.673231574808117, 8.172728245024846, 7.280162447815748), (7.176539306474797, 7.231570430735926, 7.782188722536607, 8.831851750447408, 8.780619058260319, 8.776319912521304, 7.238385316755605, 8.812140491344428, 8.509153333877782, 8.971266026631143, 8.776854716149066, 8.069639907311661, 7.011924035197699), (7.180731797202216, 7.230396498836147, 7.768835852616719, 8.804556157914565, 8.781792990160099, 8.749024319988461, 7.265680909288448, 8.820126938637117, 8.5133458246052, 8.993195196536789, 8.778028648048846, 8.073832398039078, 6.984628442664856), (7.145939051042762, 7.27802919560681, 7.7290587506834845, 8.778358265978602, 8.766382388074371, 8.686734640207176, 7.243629023698522, 8.803596927432414, 8.497648994619388, 8.920927451464538, 8.80014170374673, 8.048157502762301, 6.961936232249905), (7.1401261831232175, 7.283842063526355, 7.72324588276394, 8.784171133898147, 8.760569520154826, 8.69254750812672, 7.237816155778977, 8.79778405951287, 8.491836126699843, 8.926740319384082, 8.794328835827185, 8.053970370681846, 6.95612336433036), (7.130756689618576, 7.298140155402122, 7.708947790888172, 8.76987304202238, 8.774867612030592, 8.683178014622078, 7.246702653313295, 8.78300297166678, 8.500688014914138, 8.9360752035687, 8.808661537022976, 8.039637669486055, 6.947236866796042), (7.106789270363027, 7.283459201263776, 7.684980371632623, 8.74599139043477, 8.768930997691484, 8.673595097620513, 7.25628557031486, 8.77196832019089, 8.491105097912573, 8.939425054346795, 8.81824445402454, 8.0363735863759, 6.910422447428772), (7.048705537101706, 7.302199977645242, 7.688275595395184, 8.694593058892577, 8.790225166157823, 8.646566853033095, 7.199016633187887, 8.768708021097732, 8.461663998471641, 8.907996699896708, 8.772553629085055, 7.9840210192297345, 6.845318916869092), (6.983027153605094, 7.3019265293975275, 7.615991505261795, 8.625657967200144, 8.79068642751798, 8.571834016593659, 7.1322271646163395, 8.752789567450247, 8.44394378911727, 8.879609010696658, 8.700746834493081, 8.024040908531797, 6.763795936688937), (6.932702321287791, 7.319949982915294, 7.586824108231331, 8.58872734317977, 8.78533457259704, 8.554762991457231, 7.11132771945351, 8.739159938909378, 8.449109577417431, 8.879605673756053, 8.671454182014699, 7.987801491840318, 6.723728297934977), (6.933337349840571, 7.32028187443535, 7.583978450443638, 8.58187431242376, 8.777558291758226, 8.54919068191272, 7.10818232931506, 8.73894411191893, 8.449884801910297, 8.882059053757192, 8.666784568282377, 7.990946881978768, 6.718168250827345), (6.933337349840571, 7.32028187443535, 7.583978450443638, 8.58187431242376, 8.777558291758226, 8.54919068191272, 7.10818232931506, 8.73894411191893, 8.449884801910297, 8.882059053757192, 8.666784568282377, 7.990946881978768, 6.718168250827345)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.077972306739566, 7.922027693260433, 7.922027693260433, 7.922027693260433, 8.077972306739566, 7.922027693260433, 8.077972306739566, 8.077972306739566, 7.922027693260433, 7.922027693260433, 8.077972306739566, 8.077972306739566, 8.077972306739566), (8.198545544145269, 7.8014544558547305, 8.042600930666136, 8.042600930666136, 7.957399069333864, 8.042600930666136, 8.198545544145269, 8.198545544145269, 7.8014544558547305, 8.042600930666136, 8.198545544145269, 8.198545544145269, 8.198545544145269), (8.148029324357388, 7.701631470295362, 8.007478910987519, 8.012028364327119, 7.960892089820172, 8.098655588490505, 8.212057719361251, 8.238889588040372, 7.762404993732651, 8.06625619267895, 8.129056976005181, 8.142559622967315, 8.154946628683593), (8.077320184468883, 7.5830728788740185, 8.055057248791044, 7.884573088451197, 7.913970008027383, 8.04068165930313, 8.222069714681263, 8.225067129283024, 7.660937574686651, 8.07204370278969, 8.120539862743621, 8.051855522020707, 8.15004641588124), (8.056097049695781, 7.587455084411906, 8.054175855857007, 7.849398333307423, 7.919503537292654, 8.01801360790431, 8.214981581935456, 8.196790230900712, 7.638199074388797, 8.061663932037563, 8.117793354719714, 8.036676327884125, 8.145848447969547), (8.056097049695781, 7.587455084411906, 8.054175855857007, 7.849398333307423, 7.919503537292654, 8.01801360790431, 8.214981581935456, 8.196790230900712, 7.638199074388797, 8.061663932037563, 8.117793354719714, 8.036676327884125, 8.145848447969547)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (8.06139743455774, 8.06139743455774, 8.06139743455774, 7.93860256544226, 8.06139743455774, 8.06139743455774, 8.06139743455774, 7.93860256544226, 8.06139743455774, 7.93860256544226, 8.06139743455774, 7.93860256544226, 7.93860256544226), (8.077427627271685, 8.077427627271685, 8.077427627271685, 7.922572372728315, 8.045367241843795, 8.045367241843795, 8.077427627271685, 7.922572372728315, 8.077427627271685, 7.954632758156205, 8.077427627271685, 7.954632758156205, 7.954632758156205), (8.073109727154042, 8.073109727154042, 8.073109727154042, 7.926890272845957, 8.049685141961438, 8.041049341726152, 8.081745527389328, 7.926890272845957, 8.073109727154042, 7.9503148580385625, 8.073109727154042, 7.958950658273847, 7.9503148580385625), (8.047162563900136, 8.071730297258627, 8.09905689040795, 7.928269702741371, 8.06504248689989, 8.06699650498006, 8.055798364135422, 7.900943109592051, 8.088467072092493, 7.965672202977013, 8.061140478943171, 7.970919906484717, 7.976262021292468), (8.044799222887756, 8.070187604768927, 8.10142023142033, 7.926727010251671, 8.047992709386671, 8.05385276096892, 8.053435023123042, 7.891852856832376, 8.075470785830737, 7.982721980490231, 8.070230731702848, 7.969229756245634, 7.981858205033632), (8.033505182090426, 8.061975162216044, 8.108221859407326, 7.916936099378242, 8.04276954972022, 8.06514680176625, 8.048136525059945, 7.886629697165926, 8.071750756088186, 7.99251289136366, 8.062018289149965, 7.978945328722416, 7.993152245830961), (8.034090329465664, 8.061827209708023, 8.104224958808393, 7.907312163902188, 8.04291750222824, 8.070495577128957, 8.061172213759695, 7.8673641807121895, 8.087604519318228, 8.007633554710443, 8.048249500566955, 7.974948428123482, 8.009006009061004), (8.004887434985205, 8.079958225423, 8.09473797513637, 7.89847668293786, 8.0379998972442, 8.058744169100807, 8.06149995583503, 7.83568558014071, 8.072933733127138, 8.011417315604165, 8.058276218774372, 7.955100313207252, 8.0056236885547), (7.987587939625018, 8.076850875564222, 8.095336383203048, 7.884874322420271, 8.045142059410974, 8.049254794652363, 8.057141539000323, 7.8249618398696805, 8.075120748901732, 8.004099342215834, 8.059762959936172, 7.946318157945254, 8.003406350300247), (7.980378546453177, 8.072479025432274, 8.086171749789193, 7.8771629032721835, 8.053960910781006, 8.038052993380221, 8.064350932172166, 7.812354257170232, 8.082330142073575, 7.995782516822048, 8.066972353108016, 7.937655550507645, 7.993155737317625), (7.981509239634863, 8.061873087973721, 8.08452423741488, 7.871958042336186, 8.060699591803003, 8.040767607633908, 8.066069704597636, 7.794382276369828, 8.084342312885097, 8.001623708786493, 8.071200118089545, 7.941223566653158, 7.994924554851972), (7.982156251791063, 8.06122607581752, 8.08387722525868, 7.872605054492387, 8.060052579646802, 8.040120595477708, 8.065422692441436, 7.793735264213628, 8.083695300728897, 8.002270720942693, 8.070553105933344, 7.940576554496958, 7.994277542695771), (7.968030994850567, 8.057911171318812, 8.083814122895442, 7.854387545064094, 8.06923203441796, 8.03023860898218, 8.066692192652864, 7.772943878515553, 8.07837226142731, 7.998425709957095, 8.080294386530875, 7.931830827578102, 7.9863209922623914), (7.957161631962985, 8.054138998744989, 8.080291998987779, 7.84087639287812, 8.07622023606887, 8.021180205655767, 8.054344695043795, 7.751091706876857, 8.086678040427191, 7.985533488279079, 8.070483467210341, 7.928697657305617, 7.977997427223102), (7.934038398015931, 8.07027064864374, 8.092308390709578, 7.813639138516066, 8.089130685374618, 8.014050526211326, 8.042483993766128, 7.712111590917715, 8.093105463614412, 8.000917807684717, 8.057236335997748, 7.930576884756782, 7.9781921094619745), (7.931622457934484, 8.067854708562294, 8.092436568719375, 7.81122319843462, 8.086714745293172, 8.01163458612988, 8.042612171775925, 7.709695650836268, 8.092977285604615, 7.99850186760327, 8.054820395916302, 7.930448706746985, 7.975776169380528), (7.924005882205394, 8.063829906989612, 8.09626534898427, 7.805174761535346, 8.092763182192444, 8.013578205130438, 8.038644917448776, 7.702217549169433, 8.0925702480168, 7.999605421599743, 8.047342294249466, 7.924913313590018, 7.9703792502858155), (7.923011978451782, 8.062836003236, 8.095271445230658, 7.806168665288959, 8.091769278438832, 8.012584301376826, 8.039638821202388, 7.70122364541582, 8.091576344263189, 7.998611517846131, 8.046348390495854, 7.923919409836405, 7.969385346532203), (7.923011978451782, 8.062836003236, 8.095271445230658, 7.806168665288959, 8.091769278438832, 8.012584301376826, 8.039638821202388, 7.70122364541582, 8.091576344263189, 7.998611517846131, 8.046348390495854, 7.923919409836405, 7.969385346532203)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.95570515490756, 8.04429484509244, 8.04429484509244, 8.04429484509244, 8.04429484509244, 8.04429484509244, 8.04429484509244, 7.95570515490756, 8.04429484509244, 7.95570515490756, 7.95570515490756, 7.95570515490756, 8.04429484509244), (7.968306518546054, 8.056896208730935, 8.056896208730935, 8.056896208730935, 8.031693481453944, 8.031693481453944, 8.031693481453944, 7.968306518546054, 8.056896208730935, 7.943103791269065, 7.943103791269065, 7.968306518546054, 8.056896208730935), (7.9646636111907885, 8.053253301375669, 8.0605391160862, 8.053253301375669, 8.028050574098678, 8.028050574098678, 8.03533638880921, 7.97194942590132, 8.0605391160862, 7.946746698624331, 7.9394608839137994, 7.97194942590132, 8.0605391160862), (7.981171632459012, 8.062719450462861, 8.082241047564494, 8.062719450462861, 8.023778335221554, 8.03751672318587, 8.051844410077436, 7.976221664778444, 8.082241047564494, 7.968448630102624, 7.9177589524355065, 7.993651357379613, 8.044031094817974), (7.976982177359172, 8.0669089055627, 8.078051592464655, 8.075906835564625, 8.013594634013797, 8.038702494391702, 8.062028111285192, 7.975035893572612, 8.095428432666258, 7.955261245000861, 7.904571567333743, 7.98046397227785, 8.048220549917813), (7.990865844225243, 8.073402909167788, 8.060826115968913, 8.069412831959538, 8.020088637618885, 8.052586161257773, 8.04480263478945, 7.984871706807371, 8.105264245901017, 7.972486721496602, 7.887346090838002, 7.99434763914392, 8.041726546312725), (8.018020587662061, 8.062049316089183, 8.085453543723421, 8.05750323047669, 8.040852342332506, 8.089547736575597, 8.064937247935557, 8.039138039933121, 8.106143183968157, 7.993698514224649, 7.758881726810158, 8.03128508386055, 8.060488132269487), (8.008511666546822, 8.068268941218372, 8.093511534716681, 8.055971258867908, 8.073793758818864, 8.093199298442544, 8.090071332904605, 8.042142622060288, 8.131971164407135, 8.01116301204098, 7.704057350679427, 8.037182675611364, 8.069850910992804), (8.00558559479389, 8.065342869465441, 8.096437606469612, 8.05889733062084, 8.070867687065933, 8.090273226689613, 8.087145261151674, 8.039216550307357, 8.129045092654204, 8.008236940288048, 7.701131278926496, 8.040108747364295, 8.066924839239872), (7.953929769233563, 8.049503428031361, 8.098774529975096, 8.044500493002943, 8.086622580237588, 8.10012673514364, 8.092512979858157, 8.025059328813942, 8.110649339259737, 8.03043521006584, 7.628916882299956, 8.035291609653854, 8.06210507404424), (7.928634759133891, 8.03976615264458, 8.114060820816855, 8.05172088000847, 8.08404808067276, 8.086262860179184, 8.0988589979258, 8.045703589164601, 8.107865869315665, 8.03481451594372, 7.5990882647369045, 8.041423795033941, 8.03763442599009), (7.813560625754196, 8.046879461251553, 8.087798709035145, 8.040495199326386, 8.070899677611113, 8.064188018350567, 8.101127430127558, 8.01855235522476, 8.106710936244834, 8.046790366808995, 7.475214543278735, 7.97482685125253, 8.057402809245023), (7.813560625754196, 8.046879461251553, 8.087798709035145, 8.040495199326386, 8.070899677611113, 8.064188018350567, 8.101127430127558, 8.01855235522476, 8.106710936244834, 8.046790366808995, 7.475214543278735, 7.97482685125253, 8.057402809245023)]]"
        self.expected_all_intermediate_budgets = "[[0, 210, 1290, 2730, 5430, 5970, 7410, 10000], [0, 210, 270, 1230, 1470, 2310, 3570, 4050, 6990, 8430, 10000], [0, 210, 270, 330, 390, 450, 1110, 1350, 1530, 1590, 2490, 3330, 5010, 5190, 7050, 8730, 10000], [0, 210, 270, 330, 1470, 1590, 2130, 2190, 4290, 5610, 5790, 6330, 10000], [0, 210, 270, 510, 570, 810, 3270, 5190, 10000], [0, 210, 270, 330, 450, 570, 750, 990, 1230, 1710, 2370, 2550, 5670, 6390, 7110, 10000], [0, 210, 330, 750, 990, 1470, 1530, 1770, 2070, 3510, 6570, 9390, 9930, 10000], [0, 210, 270, 690, 2130, 2790, 10000], [0, 210, 270, 330, 510, 750, 990, 1290, 2130, 2670, 3030, 3990, 4050, 4950, 6570, 8970, 9090, 9450, 9510, 10000], [0, 210, 270, 330, 510, 690, 870, 2130, 2970, 3030, 4350, 4830, 9090, 10000]]"
        self.expected_all_est_objectives = "[[53.523223876925904, 56.57953731891425, 56.17483738010048, 55.809227011677194, 55.391313536144864, 55.32552791978661, 55.18526132527346, 55.18526132527346], [54.953360714200635, 55.61313707920279, 55.731069545581164, 55.53392886096517, 55.51493821805342, 55.332090300331565, 55.08211233096914, 54.97802875357293, 54.668293220909305, 54.49960810786369, 54.49960810786369], [53.8672782395678, 54.033542135029, 54.027219781888796, 53.68446475324022, 53.683002382659744, 53.63197998088576, 53.33121435205956, 53.30900375843461, 53.28777428603786, 53.24398167127337, 53.03162876340306, 52.73568635828664, 52.46021956416129, 52.44562472232084, 52.03183880816954, 51.635534604042526, 51.635534604042526], [52.695576178381195, 52.788067615918244, 52.784160026974206, 52.76016423845156, 52.71420732949482, 52.69752998381837, 52.49479453417234, 52.483136931718946, 52.08255821354956, 51.88413359698663, 51.865664392622556, 51.85071038565298, 51.85071038565298], [52.78821960384539, 52.788273435321926, 53.21231619479584, 52.99278774999765, 52.99454524266207, 52.97647751390166, 52.02923285964101, 51.87121471798824, 51.87121471798824], [54.034159529816264, 54.111353260448325, 54.325291653231886, 54.31310743938197, 54.26162436124886, 54.247442322970166, 54.10342797142252, 54.067790857470335, 54.00675521816507, 53.87925180817268, 53.490872461796314, 53.44382964925671, 52.717221952592844, 52.59897811262619, 52.501656479463634, 52.501656479463634], [54.76136678045259, 55.47802727271265, 55.4296392396077, 55.26865928358665, 55.247372631288215, 55.088383491981915, 55.078008391426586, 55.05131651575005, 54.972989029833606, 54.70427711513909, 54.37622532529476, 54.19720785480522, 54.181245591731695, 54.181245591731695], [53.224291400680606, 53.34925532111238, 53.955446124831866, 53.79045904377995, 53.49707865162603, 53.39634813084847, 53.39634813084847], [55.38260900616551, 55.43574811186206, 55.482988306179685, 55.47663109865594, 55.47562014212667, 55.471382268596955, 55.45859443739686, 55.46883934654201, 55.41099355629902, 55.36701792389251, 55.3427674120483, 55.34233813817211, 55.34120352769918, 55.29569628816769, 55.23849795287408, 55.18080279007969, 55.169775070864844, 55.14437781509375, 55.14125564077218, 55.14125564077218], [52.56075901754922, 52.58042980189659, 52.60623600213006, 52.60825966300523, 52.66128319110316, 52.660417908450796, 52.66670392313874, 52.70832148320055, 52.71866843366267, 52.710010606832974, 52.60791459772372, 52.572011052203024, 52.34420978697597, 52.34420978697597]]"
        self.expected_objective_curves = "[([0, 210, 1290, 2730, 5430, 5970, 7410, 10000], [55.70371272821374, 56.57953731891425, 56.17483738010048, 55.809227011677194, 55.391313536144864, 55.32552791978661, 55.18526132527346, 55.18526132527346]), ([0, 210, 270, 1230, 1470, 2310, 3570, 4050, 6990, 8430, 10000], [55.70371272821374, 55.61313707920279, 55.731069545581164, 55.53392886096517, 55.51493821805342, 55.332090300331565, 55.08211233096914, 54.97802875357293, 54.668293220909305, 54.49960810786369, 54.49960810786369]), ([0, 210, 270, 330, 390, 450, 1110, 1350, 1530, 1590, 2490, 3330, 5010, 5190, 7050, 8730, 10000], [55.70371272821374, 54.033542135029, 54.027219781888796, 53.68446475324022, 53.683002382659744, 53.63197998088576, 53.33121435205956, 53.30900375843461, 53.28777428603786, 53.24398167127337, 53.03162876340306, 52.73568635828664, 52.46021956416129, 52.44562472232084, 52.03183880816954, 53.28726242932293, 53.28726242932293]), ([0, 210, 270, 330, 1470, 1590, 2130, 2190, 4290, 5610, 5790, 6330, 10000], [55.70371272821374, 52.788067615918244, 52.784160026974206, 52.76016423845156, 52.71420732949482, 52.69752998381837, 52.49479453417234, 52.483136931718946, 52.08255821354956, 51.88413359698663, 51.865664392622556, 51.85071038565298, 51.85071038565298]), ([0, 210, 270, 510, 570, 810, 3270, 5190, 10000], [55.70371272821374, 52.788273435321926, 53.21231619479584, 52.99278774999765, 52.99454524266207, 52.97647751390166, 52.02923285964101, 51.87121471798824, 51.87121471798824]), ([0, 210, 270, 330, 450, 570, 750, 990, 1230, 1710, 2370, 2550, 5670, 6390, 7110, 10000], [55.70371272821374, 54.111353260448325, 54.325291653231886, 54.31310743938197, 54.26162436124886, 54.247442322970166, 54.10342797142252, 54.067790857470335, 54.00675521816507, 53.87925180817268, 53.490872461796314, 53.44382964925671, 52.717221952592844, 52.59897811262619, 52.501656479463634, 52.501656479463634]), ([0, 210, 330, 750, 990, 1470, 1530, 1770, 2070, 3510, 6570, 9390, 9930, 10000], [55.70371272821374, 55.47802727271265, 55.4296392396077, 55.26865928358665, 55.247372631288215, 55.088383491981915, 55.078008391426586, 55.05131651575005, 54.972989029833606, 54.70427711513909, 54.37622532529476, 54.19720785480522, 54.181245591731695, 54.181245591731695]), ([0, 210, 270, 690, 2130, 2790, 10000], [55.70371272821374, 53.34925532111238, 53.955446124831866, 53.79045904377995, 53.49707865162603, 53.39634813084847, 53.39634813084847]), ([0, 210, 270, 330, 510, 750, 990, 1290, 2130, 2670, 3030, 3990, 4050, 4950, 6570, 8970, 9090, 9450, 9510, 10000], [55.70371272821374, 55.43574811186206, 55.482988306179685, 55.47663109865594, 55.47562014212667, 55.471382268596955, 55.45859443739686, 55.46883934654201, 55.41099355629902, 55.36701792389251, 55.3427674120483, 55.34233813817211, 55.34120352769918, 55.29569628816769, 55.23849795287408, 55.18080279007969, 55.169775070864844, 55.14437781509375, 55.14125564077218, 55.14125564077218]), ([0, 210, 270, 330, 510, 690, 870, 2130, 2970, 3030, 4350, 4830, 9090, 10000], [55.70371272821374, 52.58042980189659, 52.60623600213006, 52.60825966300523, 52.66128319110316, 52.660417908450796, 52.66670392313874, 52.70832148320055, 52.71866843366267, 52.710010606832974, 52.60791459772372, 52.572011052203024, 52.34420978697597, 52.34420978697597])]"
        self.expected_progress_curves = "[([0.0, 0.021, 0.129, 0.273, 0.543, 0.597, 0.741, 1.0], [1.0, 1.3624426254918336, 1.1949655873754135, 1.0436649922044288, 0.8707197941491822, 0.8434957223822389, 0.785449175934528, 0.785449175934528]), ([0.0, 0.021, 0.027, 0.123, 0.147, 0.231, 0.357, 0.405, 0.699, 0.843, 1.0], [1.0, 0.9625170651957846, 1.0113210759517726, 0.9297383160222652, 0.9218794153362206, 0.8462114333356023, 0.7427630117077417, 0.6996900888158509, 0.5715121855476575, 0.5017051991912481, 0.5017051991912481]), ([0.0, 0.021, 0.027, 0.033, 0.039, 0.045, 0.111, 0.135, 0.153, 0.159, 0.249, 0.333, 0.501, 0.519, 0.705, 0.873, 1.0], [1.0, 0.308833045748397, 0.30621666537297276, 0.1643742989870778, 0.1637691259441446, 0.1426545175462791, 0.018188630967004172, 0.008997217580541084, 0.00021182174330858103, -0.017910882781006752, -0.10578891940678711, -0.22825881057411762, -0.34225527648603565, -0.348295062136564, -0.5195321508286974, 0.0, 0.0]), ([0.0, 0.021, 0.027, 0.033, 0.147, 0.159, 0.213, 0.219, 0.429, 0.561, 0.579, 0.633, 1.0], [1.0, -0.20658186664705, -0.2081989447826243, -0.21812912564902237, -0.23714748037282304, -0.2440490689070892, -0.3279471113121354, -0.3327713787339599, -0.4985429314752917, -0.5806570211604849, -0.5883001348518988, -0.5944885538632225, -0.5944885538632225]), ([0.0, 0.021, 0.027, 0.051, 0.057, 0.081, 0.327, 0.519, 1.0], [1.0, -0.20649669237147045, -0.031015011797052693, -0.12186250197674044, -0.12113519851627863, -0.12861216949668752, -0.5206105709103032, -0.5860032428495142, -0.5860032428495142]), ([0.0, 0.021, 0.027, 0.033, 0.045, 0.057, 0.075, 0.099, 0.123, 0.171, 0.237, 0.255, 0.567, 0.639, 0.711, 1.0], [1.0, 0.34103363578537815, 0.4295677938774201, 0.4245255987801297, 0.4032203486134941, 0.3973513935246155, 0.33775391220511497, 0.32300619984018775, 0.2977478118099091, 0.24498305598153058, 0.08425997115142224, 0.0647922367803927, -0.2358999384310712, -0.28483280496713376, -0.32510743143357923, -0.32510743143357923]), ([0.0, 0.021, 0.033, 0.075, 0.099, 0.147, 0.153, 0.177, 0.207, 0.351, 0.657, 0.939, 0.993, 1.0], [1.0, 0.9066045531312275, 0.8865801259260992, 0.8199617658899154, 0.8111527072851485, 0.7453582072371738, 0.7410646777736911, 0.730018774744448, 0.6976044991632784, 0.5864034060483664, 0.45064568324524806, 0.3765628558137413, 0.36995719002336586, 0.36995719002336586]), ([0.0, 0.021, 0.027, 0.069, 0.213, 0.279, 1.0], [1.0, 0.025654527973493605, 0.27651456179986167, 0.20823793259393478, 0.0868282796461459, 0.04514295269206072, 0.04514295269206072]), ([0.0, 0.021, 0.027, 0.033, 0.051, 0.075, 0.099, 0.129, 0.213, 0.267, 0.303, 0.399, 0.405, 0.495, 0.657, 0.897, 0.909, 0.945, 0.951, 1.0], [1.0, 0.8891081614735975, 0.9086575783762783, 0.906026774205938, 0.9056084099094595, 0.9038546500528372, 0.8985626598943957, 0.9028023122265182, 0.8788639799258102, 0.8606655371824635, 0.8506299441246052, 0.8504522976501918, 0.8499827616231309, 0.8311504936669568, 0.8074800977478404, 0.7836040996274273, 0.7790404968833914, 0.7685303466093492, 0.7672382967281655, 0.7672382967281655]), ([0.0, 0.021, 0.027, 0.033, 0.051, 0.069, 0.087, 0.213, 0.297, 0.303, 0.435, 0.483, 0.909, 1.0], [1.0, -0.29250865525799774, -0.2818292714340003, -0.28099181954181934, -0.2590490847285811, -0.25940716478210435, -0.25680582235398575, -0.2395832210528491, -0.2353013409467815, -0.23888421075944496, -0.2811346179605023, -0.29599258774253207, -0.39026362047662766, -0.39026362047662766])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 10
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
