import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_CNTNEWS1_SPSA(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "CNTNEWS-1"
        self.expected_solver_name = "SPSA"
        self.expected_all_recommended_xs = "[[(0,), (0.09999999999999999,), (0.14916782386404526,), (0.1651214576715408,), (0.17531301861842097,), (0.17829510504001253,), (0.1809670896609604,), (0.1833971769453942,), (0.18563244571068954,), (0.18563244571069762,), (0.18563244571069762,)], [(0,), (0.09999999999999999,), (0.1540846062504531,), (0.17402664850983296,), (0.17062946152754227,), (0.17062946152755235,), (0.17062946152756042,), (0.17062946152756042,)], [(0,), (0.09999999999999999,), (0.15900138863685542,), (0.19090865625182796,), (0.20789459116326917,), (0.21385876400645962,), (0.21920273324834202,), (0.22163282053278507,), (0.2238680892980804,), (0.2238680892980804,)], [(0,), (0.09999999999999999,), (0.14425104147764842,), (0.14823944992951418,), (0.15163663691180487,), (0.1546187233334001,), (0.1572907079543413,), (0.15972079523876587,), (0.15972079523876587,)], [(0,), (0.09999999999999999,), (0.14425104147764842,), (0.15222785838137995,), (0.14543348441680265,), (0.14841557083840518,), (0.14841557083840518,)], [(0,), (0.09999999999999999,), (0.13441747670483828,), (0.15435951896420422,), (0.14756514499961879,), (0.14348433999868518,), (0.14380596010119867,), (0.14403748414410464,), (0.14576050339814944,), (0.14576050339815624,), (0.14576050339815624,)], [(0,), (0.09999999999999999,), (0.14916782386404526,), (0.1611330492196704,), (0.1679274231842436,), (0.17389159602742674,), (0.17923556526931247,), (0.18409573983818933,), (0.18856627736876563,), (0.18856627736876966,), (0.18856627736876966,)], [(0,), (0.09999999999999999,), (0.14916782386405625,), (0.16910986612341292,), (0.17930142707028088,), (0.18526559991347133,), (0.19060956915537372,), (0.1954697437242475,), (0.19994028125482669,), (0.20408919868289538,), (0.20796739972576508,), (0.20979073822575334,), (0.21151375747979353,), (0.21314886596389587,), (0.21470619973870425,), (0.21470619973870425,)], [(0,), (0.09999999999999999,), (0.1540846062504531,), (0.1820034654135923,), (0.20238658730732012,), (0.2143149329937083,), (0.2250028714775131,), (0.2347232206152422,), (0.236958489380549,), (0.23903294809457257,), (0.23895044465745666,), (0.23815505990404412,), (0.23815505990404412,)], [(0,), (0.09999999999999999,), (0.14425104147764295,), (0.15222785838139768,), (0.15902223234596685,), (0.15902223234597052,), (0.159022232345975,), (0.159022232345975,)], [(0,), (0.09999999999999999,), (0.14916782386405075,), (0.15346902153855294,), (0.1500718345562582,), (0.15305392097783516,), (0.1503819363568873,), (0.15281202364131494,), (0.150576754876011,), (0.15265121359003725,), (0.15253545156857828,), (0.15244754079866737,), (0.15244754079866737,)], [(0,), (0.09999999999999999,), (0.15900138863686092,), (0.19489706470375023,), (0.19829425168603684,), (0.2012763381076357,), (0.2012763381076362,), (0.2012763381076362,)], [(0,), (0.09999999999999999,), (0.16883495340967106,), (0.18478858721717123,), (0.19498014816403106,), (0.2009443210072434,), (0.20628829024912582,), (0.20871837753355038,), (0.21095364629883998,), (0.21302810501287972,), (0.2149672055343273,), (0.21679054403431555,), (0.21679054403431555,)], [(0,), (0.09999999999999999,), (0.14916782386405075,), (0.1611330492196759,), (0.16792742318426132,), (0.16792742318426498,), (0.16792742318426906,), (0.1679274231842808,), (0.1679274231842808,)], [(0,), (0.09999999999999999,), (0.14916782386404526,), (0.1491678238640499,), (0.1491678238640499,)], [(0,), (0.09999999999999999,), (0.14916782386405625,), (0.18107509147903342,), (0.1912666524259095,), (0.20021291169069882,), (0.2082288655535391,), (0.20579877826908988,), (0.20579877826908988,)], [(0,), (0.09999999999999999,), (0.16391817102326323,), (0.17588339637887446,), (0.1792805833611692,), (0.1792805833611911,), (0.17928058336118494,), (0.17928058336118494,)], [(0,), (0.09999999999999999,), (0.1540846062504531,), (0.18599187386546273,), (0.19958062179462546,), (0.21150896748099904,), (0.21952492134384596,), (0.22681518319715047,), (0.23352098949300776,), (0.2355954482070367,), (0.2375345487284639,), (0.239357887228457,), (0.24108090648247876,), (0.24271601496659873,), (0.24271601496659873,)], [(0,), (0.09999999999999999,), (0.15900138863686092,), (0.17495502244437966,), (0.18854377037351797,), (0.1945079432167011,), (0.19985191245861014,), (0.2022819997430532,), (0.2045172685083428,), (0.20659172722237715,), (0.20853082774380435,), (0.21035416624378775,), (0.21035416624378775,)], [(0,), (0.09999999999999999,), (0.1540846062504531,), (0.16206142315420782,), (0.16545861013649443,), (0.16844069655808236,), (0.1684406965580757,), (0.1684406965580757,)], [(0,), (0.09999999999999999,), (0.14916782386405075,), (0.16910986612341206,), (0.1725070531056824,), (0.17548913952728126,), (0.17548913952728126,)], [(0,), (0.09999999999999999,), (0.16391817102326323,), (0.17588339637886516,), (0.1792805833611599,), (0.1792805833611599,)], [(0,), (0.09999999999999999,), (0.14916782386403976,), (0.16512145767153993,), (0.17191583163612129,), (0.1748979180577238,), (0.17756990267866168,), (0.17541548193801182,), (0.1754154819380244,), (0.1754154819380244,)], [(0,), (0.09999999999999999,), (0.14916782386405075,), (0.16113304921967125,), (0.17132461016653108,), (0.1772887830097069,), (0.17996076763067143,), (0.18239085491511756,), (0.18462612368041575,), (0.1851969209045913,), (0.1851969209045913,), (0.1851969209045913,)]]"
        self.expected_all_intermediate_budgets = "[[0, 210, 270, 330, 390, 450, 510, 570, 630, 930, 1000], [0, 210, 270, 330, 390, 570, 690, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 1000], [0, 210, 270, 330, 390, 450, 1000], [0, 210, 270, 330, 390, 570, 690, 810, 870, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 810, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 810, 870, 1000], [0, 210, 270, 330, 390, 450, 630, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 810, 930, 1000], [0, 210, 270, 330, 390, 450, 570, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 1000], [0, 210, 270, 330, 390, 450, 570, 990, 1000], [0, 210, 270, 330, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 1000], [0, 210, 270, 330, 390, 450, 570, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 1000], [0, 210, 270, 330, 390, 450, 510, 1000], [0, 210, 270, 330, 390, 450, 1000], [0, 210, 270, 330, 390, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 870, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 1000]]"
        self.expected_all_est_objectives = "[[0.0, 0.3528961132849871, 0.433564071695458, 0.4453426026667063, 0.44790583734543843, 0.4482535291098946, 0.4482915292989911, 0.4480933729136198, 0.4477313528945558, 0.44773135289455396, 0.44773135289455396], [0.0, 0.3653863363301532, 0.4820584522164391, 0.5000073720450766, 0.49780558849158935, 0.4978055884915966, 0.49780558849160256, 0.49780558849160256], [0.0, 0.3487492736590919, 0.4377188655397367, 0.4457690254707469, 0.4344733659314021, 0.428630422569088, 0.4226044607656039, 0.4195581868072364, 0.41669704278765834, 0.41669704278765834], [0.0, 0.36444198176302317, 0.46138118598072964, 0.46712417341958135, 0.471653391198235, 0.4753836163309769, 0.4785899978761065, 0.481365148059892, 0.481365148059892], [0.0, 0.3362590251873797, 0.40593634406117607, 0.41099348390791407, 0.4068844212363845, 0.40897848556342387, 0.40897848556342387], [0.0, 0.35920029599611353, 0.4342688250105092, 0.46225463577866227, 0.4538319452951886, 0.44831546937801037, 0.4487786023256298, 0.4491034978665007, 0.45144981838124937, 0.4514498183812581, 0.4514498183812581], [0.0, 0.3580609717723564, 0.45380658902269794, 0.466324323336392, 0.4708875462107065, 0.4729886306213358, 0.4746063596992872, 0.47553510686790085, 0.47567954254363604, 0.47567954254363615, 0.47567954254363615], [0.0, 0.35337259733556264, 0.4460815523287945, 0.4576400256566333, 0.45639804282312246, 0.4536677256240786, 0.4506582957714473, 0.4476824009354082, 0.44434145920083395, 0.4403889327853159, 0.4365606245719081, 0.43468503803445985, 0.43289309801025816, 0.4311644920875476, 0.42948257161075454, 0.42948257161075454], [0.0, 0.34031957586493206, 0.43142662716742164, 0.44450986236850254, 0.4362213148690918, 0.42649950570882667, 0.4136892221122319, 0.3997984695120931, 0.39623303098399487, 0.39279175681124096, 0.39293366272308033, 0.39428457656584437, 0.39428457656584437], [0.0, 0.33135452468318005, 0.4050572620037609, 0.41544665771498984, 0.4219788076800103, 0.4219788076800131, 0.4219788076800169, 0.4219788076800169], [0.0, 0.35587078661458543, 0.4631652735436748, 0.4688013032148481, 0.46438822544964614, 0.4682865785195579, 0.4647975598264766, 0.4679828484441908, 0.46505472027172007, 0.4677770115785556, 0.46762883619108814, 0.46751631040560215, 0.46751631040560215], [0.0, 0.34133048784404985, 0.4307024912864151, 0.4320676315157468, 0.4304329194275664, 0.4287924220644193, 0.42879242206441903, 0.42879242206441903], [0.0, 0.34673042822879724, 0.4660239154423808, 0.4742915524687417, 0.47522348765312133, 0.47423934901570647, 0.472316768996342, 0.47128643968887035, 0.47018780784666747, 0.4690354974487754, 0.46772111893068363, 0.46640831521069226, 0.46640831521069226], [0.0, 0.3481623984433789, 0.4472680240894201, 0.4603543102413296, 0.46595220290597056, 0.4659522029059731, 0.4659522029059764, 0.4659522029059855, 0.4659522029059855], [0.0, 0.34197703704452365, 0.42412101413032116, 0.4241210141303259, 0.4241210141303259], [0.0, 0.3429565198263366, 0.4318873738696527, 0.45179394737717443, 0.452402519805684, 0.4523034096602085, 0.4510672422574171, 0.4515945902236655, 0.4515945902236655], [0.0, 0.3449520563614682, 0.43446422809718066, 0.4358814316398247, 0.4358092733419727, 0.4358092733419707, 0.4358092733419715, 0.4358092733419715], [0.0, 0.3416529462548695, 0.4238446810198577, 0.42760325724202575, 0.422642255643728, 0.4138355581825656, 0.405597932140372, 0.39734789428687806, 0.38805661899243143, 0.3849864200956684, 0.38207665933732543, 0.379193612365044, 0.3763706013683074, 0.37363033071300195, 0.37363033071300195], [0.0, 0.3587150820419896, 0.4704740156447356, 0.4833676128108941, 0.48845488502265577, 0.48908808260183995, 0.4885697875356152, 0.4880046870332288, 0.487281900018147, 0.48640707219628504, 0.4855538679668568, 0.4847048393795735, 0.4847048393795735], [0.0, 0.3606693443119018, 0.4699280113111894, 0.48090817401928193, 0.4845344006875726, 0.4873165311587282, 0.48731653115872237, 0.48731653115872237], [0.0, 0.3448072131536465, 0.4272931675195326, 0.4442526194982122, 0.44651356717969803, 0.4481201266565315, 0.4481201266565315], [0.0, 0.3654083910405005, 0.476438493940118, 0.4789691787223637, 0.4786423622854193, 0.4786423622854193], [0.0, 0.3508491166462495, 0.4413304974901081, 0.45585900459316264, 0.4599086723048256, 0.4614593572440588, 0.4627706459858097, 0.46172849046180864, 0.4617284904618153, 0.4617284904618153], [0.0, 0.3527590023200048, 0.4514140745112743, 0.461985542184172, 0.46726482914182454, 0.4692636305414976, 0.46975561513489594, 0.46983875370285877, 0.46983875370285877, 0.4698146882298035, 0.4698146882298035, 0.4698146882298035]]"
        self.expected_objective_curves = "[([0, 210, 270, 330, 390, 450, 510, 570, 630, 930, 1000], [0.0, 0.3528961132849871, 0.433564071695458, 0.4453426026667063, 0.44790583734543843, 0.4482535291098946, 0.4482915292989911, 0.4480933729136198, 0.4477313528945558, 0.44773135289455396, 0.44773135289455396]), ([0, 210, 270, 330, 390, 570, 690, 1000], [0.0, 0.3653863363301532, 0.4820584522164391, 0.5053034727420339, 0.49780558849158935, 0.4978055884915966, 0.49780558849160256, 0.49780558849160256]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 1000], [0.0, 0.3487492736590919, 0.4377188655397367, 0.4457690254707469, 0.4344733659314021, 0.428630422569088, 0.4226044607656039, 0.4195581868072364, 0.41669704278765834, 0.41669704278765834]), ([0, 210, 270, 330, 390, 450, 510, 570, 1000], [0.0, 0.36444198176302317, 0.46138118598072964, 0.46712417341958135, 0.471653391198235, 0.4753836163309769, 0.4785899978761065, 0.481365148059892, 0.481365148059892]), ([0, 210, 270, 330, 390, 450, 1000], [0.0, 0.3362590251873797, 0.40593634406117607, 0.41099348390791407, 0.4068844212363845, 0.40897848556342387, 0.40897848556342387]), ([0, 210, 270, 330, 390, 570, 690, 810, 870, 990, 1000], [0.0, 0.35920029599611353, 0.4342688250105092, 0.46225463577866227, 0.4538319452951886, 0.44831546937801037, 0.4487786023256298, 0.4491034978665007, 0.45144981838124937, 0.4514498183812581, 0.4514498183812581]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 810, 1000], [0.0, 0.3580609717723564, 0.45380658902269794, 0.466324323336392, 0.4708875462107065, 0.4729886306213358, 0.4746063596992872, 0.47553510686790085, 0.47567954254363604, 0.47567954254363615, 0.47567954254363615]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0.0, 0.35337259733556264, 0.4460815523287945, 0.4576400256566333, 0.45639804282312246, 0.4536677256240786, 0.4506582957714473, 0.4476824009354082, 0.44434145920083395, 0.4403889327853159, 0.4365606245719081, 0.43468503803445985, 0.43289309801025816, 0.4311644920875476, 0.42948257161075454, 0.42948257161075454]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 810, 870, 1000], [0.0, 0.34031957586493206, 0.43142662716742164, 0.44450986236850254, 0.4362213148690918, 0.42649950570882667, 0.4136892221122319, 0.3997984695120931, 0.39623303098399487, 0.39279175681124096, 0.39293366272308033, 0.39428457656584437, 0.39428457656584437]), ([0, 210, 270, 330, 390, 450, 630, 1000], [0.0, 0.33135452468318005, 0.4050572620037609, 0.41544665771498984, 0.4219788076800103, 0.4219788076800131, 0.4219788076800169, 0.4219788076800169]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 810, 930, 1000], [0.0, 0.35587078661458543, 0.4631652735436748, 0.4688013032148481, 0.46438822544964614, 0.4682865785195579, 0.4647975598264766, 0.4679828484441908, 0.46505472027172007, 0.4677770115785556, 0.46762883619108814, 0.46751631040560215, 0.46751631040560215]), ([0, 210, 270, 330, 390, 450, 570, 1000], [0.0, 0.34133048784404985, 0.4307024912864151, 0.4320676315157468, 0.4304329194275664, 0.4287924220644193, 0.42879242206441903, 0.42879242206441903]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 1000], [0.0, 0.34673042822879724, 0.4660239154423808, 0.4742915524687417, 0.47522348765312133, 0.47423934901570647, 0.472316768996342, 0.47128643968887035, 0.47018780784666747, 0.4690354974487754, 0.46772111893068363, 0.46640831521069226, 0.46640831521069226]), ([0, 210, 270, 330, 390, 450, 570, 990, 1000], [0.0, 0.3481623984433789, 0.4472680240894201, 0.4603543102413296, 0.46595220290597056, 0.4659522029059731, 0.4659522029059764, 0.4659522029059855, 0.4659522029059855]), ([0, 210, 270, 330, 1000], [0.0, 0.34197703704452365, 0.42412101413032116, 0.4241210141303259, 0.4241210141303259]), ([0, 210, 270, 330, 390, 450, 510, 570, 1000], [0.0, 0.3429565198263366, 0.4318873738696527, 0.45179394737717443, 0.452402519805684, 0.4523034096602085, 0.4510672422574171, 0.4515945902236655, 0.4515945902236655]), ([0, 210, 270, 330, 390, 450, 570, 1000], [0.0, 0.3449520563614682, 0.43446422809718066, 0.4358814316398247, 0.4358092733419727, 0.4358092733419707, 0.4358092733419715, 0.4358092733419715]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 1000], [0.0, 0.3416529462548695, 0.4238446810198577, 0.42760325724202575, 0.422642255643728, 0.4138355581825656, 0.405597932140372, 0.39734789428687806, 0.38805661899243143, 0.3849864200956684, 0.38207665933732543, 0.379193612365044, 0.3763706013683074, 0.37363033071300195, 0.37363033071300195]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 1000], [0.0, 0.3587150820419896, 0.4704740156447356, 0.4833676128108941, 0.48845488502265577, 0.48908808260183995, 0.4885697875356152, 0.4880046870332288, 0.487281900018147, 0.48640707219628504, 0.4855538679668568, 0.4847048393795735, 0.4847048393795735]), ([0, 210, 270, 330, 390, 450, 510, 1000], [0.0, 0.3606693443119018, 0.4699280113111894, 0.48090817401928193, 0.4845344006875726, 0.4873165311587282, 0.48731653115872237, 0.48731653115872237]), ([0, 210, 270, 330, 390, 450, 1000], [0.0, 0.3448072131536465, 0.4272931675195326, 0.4442526194982122, 0.44651356717969803, 0.4481201266565315, 0.4481201266565315]), ([0, 210, 270, 330, 390, 1000], [0.0, 0.3654083910405005, 0.476438493940118, 0.4789691787223637, 0.4786423622854193, 0.4786423622854193]), ([0, 210, 270, 330, 390, 450, 510, 570, 870, 1000], [0.0, 0.3508491166462495, 0.4413304974901081, 0.45585900459316264, 0.4599086723048256, 0.4614593572440588, 0.4627706459858097, 0.46172849046180864, 0.4617284904618153, 0.4617284904618153]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 1000], [0.0, 0.3527590023200048, 0.4514140745112743, 0.461985542184172, 0.46726482914182454, 0.4692636305414976, 0.46975561513489594, 0.46983875370285877, 0.46983875370285877, 0.4698146882298035, 0.4698146882298035, 0.4698146882298035])]"
        self.expected_progress_curves = "[([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.93, 1.0], [1.0, 0.301615499751084, 0.14197290324818346, 0.1186630872531895, 0.11359042336504574, 0.11290233831672934, 0.11282713560955163, 0.11321928883243766, 0.11393572962216643, 0.11393572962217005, 0.11393572962217005]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.57, 0.69, 1.0], [1.0, 0.2768972389059966, 0.04600209929184828, -0.0, 0.01483837862771302, 0.014838378627698628, 0.014838378627686874, 0.014838378627686874]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 1.0], [1.0, 0.30982213170513, 0.13375052982626204, 0.11781919278769798, 0.1401734019880599, 0.15173663809765425, 0.16366206930592242, 0.16969067216083028, 0.17535290124477468, 0.17535290124477468]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 1.0], [1.0, 0.278766124868734, 0.08692259034548008, 0.07555716788422658, 0.06659380621549348, 0.05921165799375297, 0.05286620082178831, 0.047374154292351034, 0.047374154292351034]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 1.0], [1.0, 0.3345404428695749, 0.19664841830918203, 0.18664029424208353, 0.19477216527244015, 0.19062799362114338, 0.19062799362114338]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.57, 0.69, 0.81, 0.87, 0.99, 1.0], [1.0, 0.2891394669288342, 0.14057819026268425, 0.08519402554224836, 0.10186260380823149, 0.11277975798341068, 0.11186321382212427, 0.11122024270002244, 0.106576853842993, 0.10657685384297574, 0.10657685384297574]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.81, 1.0], [1.0, 0.29139419955035084, 0.1019127840936609, 0.07714007820710432, 0.06810942015610752, 0.06395135569787665, 0.06074985567815026, 0.058911856893828086, 0.05862601742601005, 0.05862601742600983, 0.05862601742600983]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.3006725336400658, 0.11720069939727731, 0.09432637940672457, 0.09678427431643342, 0.10218759597624269, 0.10814328402307247, 0.11403260597823416, 0.12064435894411933, 0.12846644335226648, 0.13604269885004378, 0.13975450104144838, 0.14330076605023154, 0.14672169231723356, 0.1500502276777093, 0.1500502276777093]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.81, 0.87, 1.0], [1.0, 0.32650457750035883, 0.1462029246973485, 0.12031108759976314, 0.13671419572493165, 0.1559537412350974, 0.18130540471581646, 0.20879532582156415, 0.21585135990886287, 0.2226616716490134, 0.22238083860611085, 0.21970736827464193, 0.21970736827464193]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.63, 1.0], [1.0, 0.3442464923403718, 0.19838812940327924, 0.17782742425939652, 0.1649002422442529, 0.1649002422442473, 0.16490024224423983, 0.16490024224423983]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.81, 0.93, 1.0], [1.0, 0.29572859516787137, 0.08339186542632643, 0.07223811332446711, 0.08097163288896632, 0.07325675800643817, 0.08016155657065174, 0.07385784248685726, 0.07965263379628804, 0.07426519544748152, 0.07455843583758491, 0.07478112535300693, 0.07478112535300693]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.57, 1.0], [1.0, 0.324503973836125, 0.1476359959507025, 0.1449343714755653, 0.14816948102133906, 0.1514160396769622, 0.15141603967696277, 0.15141603967696277]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 1.0], [1.0, 0.31381744450070487, 0.07773458806151128, 0.06137286194572486, 0.059528554050268565, 0.061476173036685636, 0.06528097574055697, 0.06732000646773674, 0.06949420850961296, 0.07177464088352696, 0.07437580748734872, 0.07697385755193156, 0.07697385755193156]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.57, 0.99, 1.0], [1.0, 0.3109835628991971, 0.11485266138719351, 0.08895478643118611, 0.07787650779940879, 0.07787650779940374, 0.07787650779939725, 0.07787650779937924, 0.07787650779937924]), ([0.0, 0.21, 0.27, 0.33, 1.0], [1.0, 0.32322444730335587, 0.1606607969091829, 0.16066079690917356, 0.16066079690917356]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 1.0], [1.0, 0.3212860422959693, 0.1452911029365939, 0.1058958195448164, 0.10469144937651503, 0.1048875892228092, 0.10733397534416969, 0.1062903490983679, 0.1062903490983679]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.57, 1.0], [1.0, 0.3173368580081536, 0.1401914858420494, 0.13738682761369103, 0.1375296295173874, 0.13752962951739137, 0.1375296295173898, 0.1375296295173898]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 1.0], [1.0, 0.3238658258157485, 0.1612076625560068, 0.1537694072798812, 0.163587272910958, 0.18101580435043682, 0.19731813846560148, 0.21364503566408108, 0.23203255088147595, 0.23810850139909767, 0.2438669434350353, 0.24957251865429222, 0.25515928215191375, 0.2605823017888764, 0.2605823017888764]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 1.0], [1.0, 0.2900997095954656, 0.06892780076949782, 0.043411259004622886, 0.03334350272312423, 0.03209039916587353, 0.03311610964320751, 0.034234448488812255, 0.03566485032468253, 0.0373961422493445, 0.03908464089511539, 0.04076487590849466, 0.04076487590849466]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 1.0], [1.0, 0.28623220744016203, 0.07000834812964822, 0.048278509922701836, 0.04110217557333965, 0.03559631499403598, 0.03559631499404752, 0.03559631499404752]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 1.0], [1.0, 0.3176235039855416, 0.1543830775576856, 0.12082017349401675, 0.11634573822204687, 0.11316634294080043, 0.11316634294080043]), ([0.0, 0.21, 0.27, 0.33, 0.39, 1.0], [1.0, 0.27685359244097707, 0.05712404596247842, 0.052115798604681865, 0.05276257119694401, 0.05276257119694401]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.87, 1.0], [1.0, 0.30566652403482686, 0.12660307855154027, 0.09785103569654965, 0.0898367078121846, 0.08676788873041903, 0.08417283682104824, 0.08623527173436041, 0.08623527173434722, 0.08623527173434722]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 1.0], [1.0, 0.30188684355214335, 0.10664759127485963, 0.08572656412352914, 0.07527880897748895, 0.071323163494139, 0.07034952167305955, 0.07018498971860518, 0.07018498971860518, 0.07023261550064204, 0.07023261550064204, 0.07023261550064204])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
