import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_IRONORECONT1_ASTRODF(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "IRONORECONT-1"
        self.expected_solver_name = "ASTRODF"
        self.expected_all_recommended_xs = "[[(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (90.7325355527469, 84.39557758449507, 100.0), (90.7325355527469, 93.48459893306708, 100.0), (103.81640422318958, 89.65242252364862, 100.0), (88.70653721981503, 103.43308320561509, 100.0), (93.99872666755927, 89.03730278910193, 100.0), (101.30280199440337, 97.92415967328105, 100.0), (100.85454352514225, 97.82511829685517, 82.75116891248267), (100.85454352514225, 97.82511829685517, 82.75116891248267)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (101.51656070762795, 105.9877273428278, 63.76484712432305), (100.3433755509445, 103.15781782271317, 64.7649178229156), (100.3433755509445, 103.15781782271317, 64.7649178229156)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (93.76220933560424, 96.51427271592442, 100.0), (80.67834066516156, 92.68209630650597, 100.0), (90.60019761418162, 90.2101684948632, 100.0), (104.68571053045387, 95.09673799160517, 103.60076761126263), (104.68571053045387, 95.09673799160517, 103.60076761126263)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (98.3398259887333, 96.30674773485862, 82.39189398727507), (102.94634355437549, 96.81347750522232, 89.89282543426249), (102.94634355437549, 96.81347750522232, 89.89282543426249)], [(80, 40, 100), (101.54434690031883, 40.0, 100.0), (101.54434690031883, 40.0, 100.0)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (100.75923529322884, 106.7836957730319, 63.75129390893861), (98.66723990228144, 104.93442369871002, 27.502587817877213), (98.66723990228144, 104.93442369871002, 27.502587817877213)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (98.30672000989024, 96.51427271592442, 100.0), (98.30672000989024, 96.51427271592442, 100.0)], [(80, 40, 100), (80, 40, 100)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (100.08371729481047, 104.88446598685137, 63.943730799786636), (99.64599126304472, 99.41172343027145, 59.9032130501551), (105.91906455769842, 100.82371640585382, 67.85359038079794), (101.34368894274294, 92.29798642692896, 79.75416302499504), (99.41269642548383, 102.42008913471471, 84.8668967684458), (99.41269642548383, 102.42008913471471, 84.8668967684458)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (100.6006573610449, 105.37895790218238, 63.85983834858097), (100.22918626129629, 99.78082109302638, 59.987994815766406)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (102.85123068417624, 96.51427271592442, 81.82195730285599), (98.65414004816618, 101.88562356852563, 81.85827625039967), (98.65414004816618, 101.88562356852563, 81.85827625039967)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (99.03062361174254, 98.98022231921546, 92.13028823736879), (99.03062361174254, 98.98022231921546, 92.13028823736879)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (100.67533435179139, 104.86911339889119, 63.90479505476848), (100.05107817644739, 101.78344777549125, 65.29525806307467), (100.05107817644739, 101.78344777549125, 65.29525806307467)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 84.39557758449507, 51.52521947428262), (103.36768749258206, 93.45431291171593, 50.99334006012027)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (102.85123068417624, 96.51427271592442, 81.82195730285599), (102.85123068417624, 102.61137359123057, 69.62775555224371), (96.34632623431912, 100.19329599167405, 67.93455257853401), (96.34632623431912, 100.19329599167405, 67.93455257853401)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (89.9974134243271, 83.66045545607528, 100.0), (89.21897068950481, 97.27174570817472, 100.0), (98.64084819614328, 107.54575673062844, 85.03712556185934), (97.68397097131168, 101.16739055233354, 85.84200787926792), (107.13665875685251, 98.80373623592241, 97.68707414556114), (102.92062816853982, 98.94297847781478, 96.03683086323021), (102.92062816853982, 98.94297847781478, 96.03683086323021)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (101.16477685139692, 105.6305553714945, 63.80737177281164), (95.94636000729815, 100.73402075088345, 56.42656867933897), (95.94636000729815, 100.73402075088345, 56.42656867933897)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 96.51427271592442, 100.0), (101.42004956810865, 97.08553731880883, 81.88739075489967), (101.42004956810865, 97.08553731880883, 81.88739075489967)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (101.26593620623439, 106.72085083476384, 63.72886002418542), (100.79994812639363, 96.23148306025463, 55.03235416155134), (100.79994812639363, 96.23148306025463, 55.03235416155134)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (90.7325355527469, 84.39557758449507, 100.0), (90.7325355527469, 84.39557758449507, 100.0)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (103.11615231411224, 87.75581424358276, 67.85974309860312), (103.11615231411224, 87.75581424358276, 67.85974309860312)], [(80, 40, 100), (80, 40, 100)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 108.63296784735377, 100.0), (101.80881462761306, 106.01686055454124, 63.75314776985075), (101.80881462761306, 106.01686055454124, 63.75314776985075)], [(80, 40, 100), (80.0, 61.54434690031883, 100.0), (102.85123068417624, 84.39557758449507, 100.0), (102.85123068417624, 84.39557758449507, 100.0)]]"
        self.expected_all_intermediate_budgets = "[[4, 50, 74, 180, 395, 441, 465, 544, 662, 700, 1000], [4, 116, 144, 231, 261, 333, 1000], [4, 33, 57, 144, 275, 304, 433, 499, 1000], [4, 34, 58, 170, 197, 221, 1000], [4, 52, 1000], [7, 169, 222, 347, 378, 402, 1000], [4, 32, 56, 138, 494, 1000], [12, 1000], [4, 58, 86, 144, 170, 733, 804, 834, 930, 1000], [4, 66, 90, 145, 170, 1000], [4, 38, 66, 221, 250, 729, 1000], [5, 107, 151, 493, 957, 1000], [4, 78, 110, 183, 211, 235, 1000], [14, 149, 194, 221, 1000], [4, 86, 114, 321, 348, 396, 467, 1000], [4, 64, 99, 322, 350, 499, 524, 722, 766, 808, 1000], [4, 86, 122, 210, 239, 263, 1000], [8, 90, 124, 359, 411, 1000], [4, 225, 288, 449, 502, 588, 1000], [7, 264, 288, 825, 1000], [40, 460, 556, 649, 1000], [7, 1000], [7, 184, 240, 377, 429, 1000], [37, 439, 524, 1000]]"
        self.expected_all_est_objectives = "[[149895.8055235529, 168672.8854247067, 234246.2104416266, 226579.34140707366, 246287.55924321295, 244971.2836550668, 240244.5629438077, 241624.1881675321, 255301.35525856088, 253641.1034161115, 253641.1034161115], [122793.09736468189, 149208.78165929313, 225923.64699964703, 234812.961762674, 243226.71537637338, 248954.8476191005, 248954.8476191005], [99852.80349485856, 128851.6769256802, 222643.254239316, 242235.31187345437, 239957.03647690467, 207672.48537593015, 224247.45667839752, 235849.50264935606, 235849.50264935606], [126011.12695446546, 149497.58590082, 224796.7933466262, 244299.21507732666, 241764.20246457632, 242055.05987657208, 242055.05987657208], [136147.71179130895, 138760.07226255184, 138760.07226255184], [132850.26196652921, 155746.52281976608, 230967.4195246391, 235391.84738181814, 242216.9947892452, 245931.82229351025, 245931.82229351025], [134982.68434045353, 156666.3695691511, 228131.5277213762, 246350.84901681027, 248510.77482358748, 248510.77482358748], [161256.2908821113, 161256.2908821113], [146337.47315675917, 172018.86646661864, 243106.80654491155, 245561.12025966725, 257146.2154042707, 262492.0966056358, 253994.89799126453, 249447.24155473537, 261047.8595872894, 261047.8595872894], [134867.2205665852, 158491.93299492102, 233135.8221024051, 235313.86318976388, 245548.44919351285, 252059.317496046], [149243.01256369415, 172475.23844782865, 246760.68578936288, 264243.0468499343, 261671.2809537599, 264381.91952894436, 264381.91952894436], [112822.77485929335, 137764.00286360417, 220416.80649117372, 239001.0253923829, 239715.71362410183, 239715.71362410183], [132809.38556277155, 158066.989293823, 229778.49473257692, 233538.58991250725, 244919.91915498965, 249658.54297393933, 249658.54297393933], [118379.15455996453, 143344.6299127113, 217914.29386601102, 194854.05612740948, 230546.95111546098], [127606.7164810152, 155142.49961455324, 231035.84843035202, 251674.43486780595, 249392.61983676386, 249812.63854360738, 250099.59224804342, 250099.59224804342], [145498.2552215891, 167705.9892465146, 237913.43164462, 257264.8164972932, 226568.81304015257, 250067.36998288467, 244185.77918668353, 256649.09292744205, 246691.85326939568, 256190.4982886288, 256190.4982886288], [161264.15011124164, 183148.9604933022, 242585.5612635742, 246645.28208182362, 255854.64437238884, 258984.69283009038, 258984.69283009038], [132500.94479520118, 152352.01508621004, 232782.81352154494, 253373.53317587994, 253335.13154988832, 253335.13154988832], [112031.98326897933, 137520.85699887888, 227605.47630944874, 232103.0524955371, 239026.43204645175, 245518.59169980793, 245518.59169980793], [130863.18264271188, 149814.81415674638, 222466.49222044818, 213164.29697128688, 213164.29697128688], [147610.26102665017, 169103.3242706321, 244947.52786746173, 236311.14325912268, 236311.14325912268], [132677.02997009846, 132677.02997009846], [132803.08586581453, 153893.73237390444, 234728.42969074438, 237504.97738314464, 245823.71723200625, 245823.71723200625], [137521.1409071744, 158702.13175801552, 228235.82947173432, 228235.82947173432]]"
        self.expected_objective_curves = "[([4, 50, 74, 180, 395, 441, 465, 544, 662, 700, 1000], [121270.73497283501, 168672.8854247067, 234246.2104416266, 226579.34140707366, 246287.55924321295, 244971.2836550668, 240244.5629438077, 241624.1881675321, 255301.35525856088, 253641.1034161115, 253641.1034161115]), ([4, 116, 144, 231, 261, 333, 1000], [121270.73497283501, 149208.78165929313, 225923.64699964703, 234812.961762674, 243226.71537637338, 248954.8476191005, 248954.8476191005]), ([4, 33, 57, 144, 275, 304, 433, 499, 1000], [121270.73497283501, 128851.6769256802, 222643.254239316, 242235.31187345437, 239957.03647690467, 207672.48537593015, 224247.45667839752, 235849.50264935606, 235849.50264935606]), ([4, 34, 58, 170, 197, 221, 1000], [121270.73497283501, 149497.58590082, 224796.7933466262, 244299.21507732666, 241764.20246457632, 242055.05987657208, 242055.05987657208]), ([4, 52, 1000], [121270.73497283501, 138760.07226255184, 138760.07226255184]), ([7, 169, 222, 347, 378, 402, 1000], [121270.73497283501, 155746.52281976608, 230967.4195246391, 235391.84738181814, 242216.9947892452, 245931.82229351025, 245931.82229351025]), ([4, 32, 56, 138, 494, 1000], [121270.73497283501, 156666.3695691511, 228131.5277213762, 246350.84901681027, 248510.77482358748, 248510.77482358748]), ([12, 1000], [121270.73497283501, 121270.73497283501]), ([4, 58, 86, 144, 170, 733, 804, 834, 930, 1000], [121270.73497283501, 172018.86646661864, 243106.80654491155, 245561.12025966725, 257146.2154042707, 262492.0966056358, 253994.89799126453, 249447.24155473537, 261047.8595872894, 261047.8595872894]), ([4, 66, 90, 145, 170, 1000], [121270.73497283501, 158491.93299492102, 233135.8221024051, 235313.86318976388, 245548.44919351285, 252059.317496046]), ([4, 38, 66, 221, 250, 729, 1000], [121270.73497283501, 172475.23844782865, 246760.68578936288, 264243.0468499343, 261671.2809537599, 241112.5559622896, 241112.5559622896]), ([5, 107, 151, 493, 957, 1000], [121270.73497283501, 137764.00286360417, 220416.80649117372, 239001.0253923829, 239715.71362410183, 239715.71362410183]), ([4, 78, 110, 183, 211, 235, 1000], [121270.73497283501, 158066.989293823, 229778.49473257692, 233538.58991250725, 244919.91915498965, 249658.54297393933, 249658.54297393933]), ([14, 149, 194, 221, 1000], [121270.73497283501, 143344.6299127113, 217914.29386601102, 194854.05612740948, 230546.95111546098]), ([4, 86, 114, 321, 348, 396, 467, 1000], [121270.73497283501, 155142.49961455324, 231035.84843035202, 251674.43486780595, 249392.61983676386, 249812.63854360738, 250099.59224804342, 250099.59224804342]), ([4, 64, 99, 322, 350, 499, 524, 722, 766, 808, 1000], [121270.73497283501, 167705.9892465146, 237913.43164462, 257264.8164972932, 226568.81304015257, 250067.36998288467, 244185.77918668353, 256649.09292744205, 246691.85326939568, 256190.4982886288, 256190.4982886288]), ([4, 86, 122, 210, 239, 263, 1000], [121270.73497283501, 183148.9604933022, 242585.5612635742, 246645.28208182362, 255854.64437238884, 258984.69283009038, 258984.69283009038]), ([8, 90, 124, 359, 411, 1000], [121270.73497283501, 152352.01508621004, 232782.81352154494, 253373.53317587994, 253335.13154988832, 253335.13154988832]), ([4, 225, 288, 449, 502, 588, 1000], [121270.73497283501, 137520.85699887888, 227605.47630944874, 232103.0524955371, 239026.43204645175, 245518.59169980793, 245518.59169980793]), ([7, 264, 288, 825, 1000], [121270.73497283501, 149814.81415674638, 222466.49222044818, 213164.29697128688, 213164.29697128688]), ([40, 460, 556, 649, 1000], [121270.73497283501, 169103.3242706321, 244947.52786746173, 236311.14325912268, 236311.14325912268]), ([7, 1000], [121270.73497283501, 121270.73497283501]), ([7, 184, 240, 377, 429, 1000], [121270.73497283501, 153893.73237390444, 234728.42969074438, 237504.97738314464, 245823.71723200625, 245823.71723200625]), ([37, 439, 524, 1000], [121270.73497283501, 158702.13175801552, 228235.82947173432, 228235.82947173432])]"
        self.expected_progress_curves = "[([0.004, 0.05, 0.074, 0.18, 0.395, 0.441, 0.465, 0.544, 0.662, 0.7, 1.0], [1.0, 0.6044606961033843, 0.05729506998451891, 0.12126997433137116, -0.043181947989414514, -0.03219850683941752, 0.0072428223412784095, -0.004269229230816808, -0.11839605889766831, -0.10454236551465904, -0.10454236551465904]), ([0.004, 0.116, 0.144, 0.231, 0.261, 0.333, 1.0], [1.0, 0.7668756494536534, 0.1267413064758012, 0.05256590852512094, -0.017641249078398254, -0.0654386890324454, -0.0654386890324454]), ([0.004, 0.033, 0.057, 0.144, 0.275, 0.304, 0.433, 0.499, 1.0], [1.0, 0.9367420997924232, 0.1541139943509268, -0.009368648622783925, 0.009642038779489204, 0.27903506731011696, 0.14072799582523127, 0.04391666673186364, 0.04391666673186364]), ([0.004, 0.034, 0.058, 0.17, 0.197, 0.221, 1.0], [1.0, 0.7644657708391397, 0.13614414801907176, -0.026590543173717913, -0.0054375550780729615, -0.007864566029628485, -0.007864566029628485]), ([0.004, 0.052, 1.0], [1.0, 0.8540631547041012, 0.8540631547041012]), ([0.007, 0.169, 0.222, 0.347, 0.378, 0.402, 1.0], [1.0, 0.7123225635067348, 0.08465439154619675, 0.04773549444792607, -0.009215804781978216, -0.040213560603728854, -0.040213560603728854]), ([0.004, 0.032, 0.056, 0.138, 0.494, 1.0], [1.0, 0.7046470563941888, 0.10831801564543705, -0.0437100589032406, -0.06173319797893326, -0.06173319797893326]), ([0.012, 1.0], [1.0, 1.0]), ([0.004, 0.058, 0.086, 0.144, 0.17, 0.733, 0.804, 0.834, 0.93, 1.0], [1.0, 0.576540717799597, -0.016640689920736765, -0.03712029958030348, -0.13379018534266088, -0.17839799551466642, -0.10749454508129101, -0.06954738774521112, -0.16634680164576265, -0.16634680164576265]), ([0.004, 0.066, 0.09, 0.145, 0.17, 1.0], [1.0, 0.6894139481962539, 0.06656051947497028, 0.04838622047503738, -0.03701456799136575, -0.09134341787679982]), ([0.004, 0.038, 0.066, 0.221, 0.25, 0.729, 1.0], [1.0, 0.5727325982513287, -0.04712987319819084, -0.19300850651860577, -0.1715488368061377, -0.0, -0.0]), ([0.005, 0.107, 0.151, 0.493, 0.957, 1.0], [1.0, 0.8623746889475213, 0.17269221462294862, 0.01761931312853214, 0.011655716899617872, 0.011655716899617872]), ([0.004, 0.078, 0.11, 0.183, 0.211, 0.235, 1.0], [1.0, 0.6929598197258213, 0.09457517531137993, 0.06319969095303397, -0.031769904372823905, -0.07131055704170026, -0.07131055704170026]), ([0.014, 0.149, 0.194, 0.221, 1.0], [1.0, 0.8158080813723727, 0.1935740120163886, 0.38599630290122683, 0.08816291975201487]), ([0.004, 0.086, 0.114, 0.321, 0.348, 0.396, 0.467, 1.0], [1.0, 0.7173627339599692, 0.08408339800531124, -0.08813182925888398, -0.06909160596952929, -0.07259638170954812, -0.07499081882729933, -0.07499081882729933]), ([0.004, 0.064, 0.099, 0.322, 0.35, 0.499, 0.524, 0.722, 0.766, 0.808, 1.0], [1.0, 0.612528799293148, 0.02669455696898252, -0.1347798322959806, 0.12135782652548975, -0.0747219455333798, -0.0256439963864064, -0.12964203011000291, -0.04655551176577191, -0.1258153639676918, -0.1258153639676918]), ([0.004, 0.086, 0.122, 0.21, 0.239, 0.263, 1.0], [1.0, 0.48366751264642305, -0.012291245986776353, -0.046166906292427534, -0.12301288722403894, -0.14913105225072834, -0.14913105225072834]), ([0.008, 0.09, 0.124, 0.359, 0.411, 1.0], [1.0, 0.7406474646600204, 0.06950614044389081, -0.1023096704669503, -0.10198923453169359, -0.10198923453169359]), ([0.004, 0.225, 0.288, 0.449, 0.502, 0.588, 1.0], [1.0, 0.8644035788852559, 0.11270756353100977, 0.07517829245556348, 0.01740731155963837, -0.03676542713670918, -0.03676542713670918]), ([0.007, 0.264, 0.288, 0.825, 1.0], [1.0, 0.7618187127979048, 0.15558895540716258, 0.2332095654109095, 0.2332095654109095]), ([0.04, 0.46, 0.556, 0.649, 1.0], [1.0, 0.6008689712583216, -0.03200028064918664, 0.04006458399517659, 0.04006458399517659]), ([0.007, 1.0], [1.0, 1.0]), ([0.007, 0.184, 0.24, 0.377, 0.429, 1.0], [1.0, 0.7277828630129037, 0.0532712722389873, 0.03010283513183938, -0.03931149602717746, -0.03931149602717746]), ([0.037, 0.439, 0.524, 1.0], [1.0, 0.6876599798289592, 0.10744768716163244, 0.10744768716163244])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
