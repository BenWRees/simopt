import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_FIXEDSAN1_STRONG(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "FIXEDSAN-1"
        self.expected_solver_name = "STRONG"
        self.expected_all_recommended_xs = "[[(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.129869370902943, 9.989151324742801, 9.707249126536784, 9.179224637317798, 9.470247241168282, 9.989879969754536, 9.120020209387507, 9.697773430398156, 9.532454601525965, 9.86643706241192, 9.068301491862506, 9.837843557171094, 9.545974215552574), (8.302979805879037, 9.958980160185854, 9.470078789208188, 8.248660086495676, 9.030991150423482, 9.981853875552439, 8.135536977619484, 9.402100920906634, 9.113989595432168, 9.690194331180194, 8.209141682581958, 9.67771729380292, 9.12940136689078), (7.3325402928505845, 9.917586081469262, 9.271705338088148, 7.3910231755982405, 8.633911982112416, 9.975426277384594, 7.244555738383715, 8.823738359002276, 8.737011412843083, 9.510998364986568, 7.4643755745370095, 9.384764473722843, 8.704130949137188), (6.393465008412442, 9.868009231939894, 8.687756767672028, 6.586906707110223, 8.200393790215356, 9.856983265810118, 6.408130886830501, 8.28290689818447, 8.380020176987255, 9.326230761851415, 6.734987450427594, 9.10524967756446, 8.301277153261648), (5.189526672905115, 9.798949306763479, 8.2390335447822, 5.836380594609335, 7.811949844690329, 9.747450625243566, 5.616134844915709, 7.816440527852184, 7.980843753737192, 9.169457031487624, 6.082151234395569, 8.871415606483781, 7.971742307869132), (3.956105918189759, 9.69588579021893, 7.822276216929191, 5.136735629571246, 7.229890471892915, 9.619881298412368, 4.9287159803208045, 7.3367014048382195, 7.6472491900306405, 9.031085585816998, 5.421217917716204, 8.640231024500391, 7.61623015919241), (2.7017291138130375, 9.547030352879403, 7.289442246293643, 4.48324233363797, 6.715923030892382, 9.36924532213544, 4.302088505865553, 6.831144556131231, 7.347521108533955, 8.874647205607914, 4.766903255383229, 8.408841489773144, 7.266650357819161), (1.6388527026840303, 9.285129715872023, 6.760847568860992, 3.7921885901910346, 6.260531178053009, 9.06363047055595, 3.6914776259158564, 6.190660007318429, 7.056042709539601, 8.677871127166357, 4.132973797556146, 8.096905134318808, 6.685242952416578), (1.6388527026840303, 9.285129715872023, 6.760847568860992, 3.7921885901910346, 6.260531178053009, 9.06363047055595, 3.6914776259158564, 6.190660007318429, 7.056042709539601, 8.677871127166357, 4.132973797556146, 8.096905134318808, 6.685242952416578)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (8.854134582395982, 10.008373274569925, 9.839478537192567, 9.239216935277433, 10.008373274569925, 9.63620435733627, 9.32051228088834, 9.265703226440031, 9.97473557573251, 9.491987565255556, 9.856885179090124, 9.62325256951389, 9.273421563312768), (7.632898879226846, 10.017457243763577, 9.641089367900314, 8.504065189162475, 9.752888546561984, 9.23740521724832, 8.692403697045727, 8.586500575544079, 9.950650362500015, 9.016786795477545, 9.6141758649076, 9.258601372820861, 8.617471506902517), (6.402487699363135, 10.027148815623145, 9.417669822562214, 7.789361041444522, 9.215470226695777, 8.81819075473592, 8.103888763638679, 8.003047623802914, 9.927915189302805, 8.569390530311816, 9.293002543918345, 8.917721988131714, 8.022561146558099), (5.198053791225709, 9.794694117834062, 9.196127053605096, 7.120937762885375, 8.652034357991852, 8.270234834866905, 7.539144187082212, 7.469146335846455, 9.903431448993379, 8.140838243710943, 8.875799404905335, 8.593072672201775, 7.462188009364647), (3.9644158956153674, 9.58379940774077, 8.995375395631477, 6.48439039848862, 8.121856493198491, 7.762927910368398, 6.788881737666234, 7.009097883168977, 9.837980202596514, 7.754366696634923, 8.437240522892353, 8.304005080163106, 6.96656527524139), (2.78314824619648, 9.381183948195464, 8.546257526982712, 5.88628657141394, 7.598563890252841, 7.242376404143776, 6.0893512665582685, 6.576422460624155, 9.72766357427094, 7.39581621029302, 7.810919112029718, 8.034030688209633, 6.546011050296905), (1.8140115478365464, 9.121193406814958, 8.094946147707182, 5.172271252504942, 7.071963257744622, 6.714509476464952, 5.4604587678331225, 6.074897908593384, 9.588351029931301, 7.048990495303102, 7.185504464870658, 7.428051372276589, 6.123347712593721), (1.8140115478365464, 9.121193406814958, 8.094946147707182, 5.172271252504942, 7.071963257744622, 6.714509476464952, 5.4604587678331225, 6.074897908593384, 9.588351029931301, 7.048990495303102, 7.185504464870658, 7.428051372276589, 6.123347712593721)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (8.97965749305307, 10.00795883409547, 10.00795883409547, 8.861113620681493, 9.859620172843904, 10.00795883409547, 9.347865463086592, 9.526677378260825, 9.75397345936988, 9.773196762805487, 9.200545991726736, 9.755177561371628, 9.573860122559033), (7.992259085609096, 9.864157371903826, 10.01644186586777, 7.7716888938592925, 9.66135277629752, 9.91419541943907, 8.779259313515624, 9.07415301157343, 9.51641201302143, 9.549063558653849, 8.247737154507744, 9.519546870275725, 9.160076488145439), (6.958890827518638, 9.730006316565294, 9.806155832116795, 6.799353826058658, 9.43115995372524, 9.775550910259247, 8.292060245361636, 8.656075084558282, 9.306977078584987, 9.274696560358137, 7.181068204648058, 9.300366388682676, 8.792419388012936), (5.899146625797108, 9.600692299771392, 9.616023176868913, 5.872632919034716, 8.99958604573205, 9.630508559898646, 7.864458371560079, 8.254262776295986, 9.104801199203417, 8.991397738127757, 6.118288449238211, 9.088847967838204, 8.448480336556676), (4.847393467811668, 9.293651271426615, 9.44053055671928, 4.963542714969563, 8.577921430354674, 9.392462822483543, 7.451145654884816, 7.855681021014635, 8.903417073314463, 8.692901064953633, 5.075814008236999, 8.87822007967754, 8.105896176258735), (3.7356337892909464, 9.003435377979983, 9.288022201926369, 4.131227503252682, 8.099039856728604, 9.158797759004589, 7.051934782915523, 7.480940381437664, 8.713490025046198, 8.390879302909779, 4.026935975467423, 8.679445883000986, 7.7696147249886485), (2.6307404727240264, 8.72241303767162, 9.147989697879833, 3.343352623101315, 7.651147462636753, 8.929033819623736, 6.4707052451417, 7.119039755704435, 8.529985937407348, 7.851473108351229, 3.142106590438746, 8.48687383041644, 7.330248656290665), (1.7418381376178007, 8.22570995010791, 8.902813386008718, 2.6372611482420885, 7.155777191945624, 8.42553807698387, 5.896545901500146, 6.702087854086776, 8.355412837254429, 7.2878742728463255, 2.297161178635565, 8.241573709372659, 6.80125880233277), (1.7418381376178007, 8.22570995010791, 8.902813386008718, 2.6372611482420885, 7.155777191945624, 8.42553807698387, 5.896545901500146, 6.702087854086776, 8.355412837254429, 7.2878742728463255, 2.297161178635565, 8.241573709372659, 6.80125880233277)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.330761066658459, 9.732625809123942, 10.008415757367503, 9.245129640937055, 10.008415757367503, 9.808805722374737, 9.598534003115995, 9.259193704679834, 9.580058092800302, 9.759853030428138, 9.778438632999672, 9.139641587014253, 8.931914138741124), (8.395887912399687, 9.475974491523605, 10.016739256986193, 8.462450901806497, 10.016739256986193, 9.609021286579924, 9.187865435629721, 8.594161447057777, 9.232030436574442, 9.419721229912284, 9.580034673637996, 8.36719934658585, 7.970798493905485), (7.520462304046138, 9.176042122899126, 10.024775887542132, 7.658986624321524, 10.013710018909586, 9.412053272668338, 8.323827265783516, 8.00693793151021, 8.872732710962744, 9.119517925748738, 9.23390628731032, 7.68515146028956, 7.220038148368592), (6.703588252966526, 8.861914952365005, 10.03286756934414, 6.762168736639286, 9.996962519819713, 9.207245688575094, 7.522444730140032, 7.416709951808474, 8.53361540650991, 8.854537344219507, 8.884576756913829, 7.0103085834879035, 6.4236562294409625), (5.849364647347922, 8.509714314283581, 9.990367635299561, 5.83448093515064, 9.965647173808149, 8.966693200767674, 6.718597480725134, 6.879946118576171, 8.112424411680893, 8.61934856371783, 8.458111451210188, 6.399825555924477, 5.714123934996775), (4.986596821916375, 8.142536260953921, 9.906604386139467, 4.996848953743587, 9.919337401666862, 8.666566598807094, 5.948403607942926, 6.3635983350682395, 7.669951660500651, 8.391993958118722, 7.748195771069769, 5.831134328139617, 5.0934211935258), (4.155792475901701, 7.769602610786627, 9.742834311043135, 4.225252155565427, 9.857677391121003, 7.9687769562568, 5.240157065424011, 5.866112408945537, 7.307358981218797, 8.160047113612519, 7.0208484558015725, 5.302019425473031, 4.532693867696091), (3.3590948020933613, 7.391518215957598, 9.444287870962855, 3.4783515896885957, 9.770656581426309, 7.215166299112722, 4.538577164912787, 5.383333280746419, 6.954929060491077, 7.917773660199868, 6.283104186338199, 4.797140912072051, 3.991888272529354), (2.544778812762403, 7.029191553925356, 9.146637651997638, 2.698399461245829, 9.659864215320107, 6.51916088817399, 3.825850934184766, 4.9311458213048835, 6.544333195465547, 7.651837305523216, 5.536412682918784, 4.327721440546188, 3.4605472573050724), (1.986220566876545, 6.658736510555444, 8.834444032041686, 2.0080151337121674, 9.519029710514681, 5.80354077968167, 2.9987477721944993, 4.465017705468226, 5.9268459583741775, 7.3594453553838, 4.763760447896708, 3.8615411103923236, 2.948434285984013), (1.986220566876545, 6.658736510555444, 8.834444032041686, 2.0080151337121674, 9.519029710514681, 5.80354077968167, 2.9987477721944993, 4.465017705468226, 5.9268459583741775, 7.3594453553838, 4.763760447896708, 3.8615411103923236, 2.948434285984013)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.24808806415782, 10.008904710496981, 9.908680791611037, 8.852506395174453, 10.008904710496981, 10.006252250627515, 9.40036912485343, 9.709002742528597, 9.909839521889161, 9.59603531516064, 9.384382905517995, 9.507961661063744, 9.065810036058673), (8.325887039856488, 10.017015694836223, 9.847088053059313, 7.634815516437669, 10.017015694836223, 10.012754037606332, 9.043645240155437, 9.167060773897495, 9.786247713679964, 9.354169124221626, 8.969240450946174, 8.87720806083131, 8.292579086496351), (7.411562522209291, 10.0146885830647, 9.737708425352402, 6.422077597161097, 10.021037117908907, 10.019641726580051, 8.572380657769962, 8.698373153121727, 9.598177897880635, 8.97725541565689, 8.4866966502723, 8.33031532881115, 7.564491376556784), (6.544143606131138, 9.987776376746853, 9.555196078589166, 5.255046333984861, 9.984546170714838, 9.992837251791526, 8.160004873256092, 8.234111088086289, 9.391101184435303, 8.626338889599854, 7.993075169302431, 7.48253936878922, 6.985237640210003), (5.636220025793043, 9.869854395986156, 9.170911033244373, 4.159664640678913, 9.910004724896677, 9.792903236983467, 7.7691975670121405, 7.82949080698304, 9.153800051035764, 8.264971632529404, 7.329612972471377, 6.699656090727191, 6.524511330336067), (4.740817229230834, 9.620053171956698, 8.740306533683466, 3.111453497192691, 9.799945024910889, 9.512104833291215, 7.395374988346603, 7.488201820198149, 8.904150137545331, 7.892361194269002, 6.546869278289613, 5.971730553716733, 6.123541164496251), (3.82811202856484, 9.269000598416838, 8.274428355733894, 2.2504911217793384, 9.658780877904944, 9.052018376439115, 7.029927390415103, 7.136324673456346, 8.667772926342998, 7.550629981876741, 5.63815464556714, 5.270535969249896, 5.7974035481421335), (2.8996200106798513, 8.754743793882414, 7.751823584581241, 2.3469036023553196, 9.47591132849486, 8.468286792571963, 6.603836831834104, 6.739163253681457, 8.420377845949591, 7.063026569148985, 4.641781080698864, 4.563636669090042, 5.503926306000299), (2.165599373278855, 8.24236244410471, 7.054245933975594, 2.09188216655214, 9.28068473390942, 7.793814265698268, 6.179269279315339, 6.304241589995051, 8.186157779406644, 6.561830205295677, 3.7108737802505534, 3.8659471121334263, 5.150130436374855), (2.165599373278855, 8.24236244410471, 7.054245933975594, 2.09188216655214, 9.28068473390942, 7.793814265698268, 6.179269279315339, 6.304241589995051, 8.186157779406644, 6.561830205295677, 3.7108737802505534, 3.8659471121334263, 5.150130436374855)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (8.964153275380381, 9.76435809400573, 9.612149191880114, 9.48843293414886, 10.01040687020203, 9.212141686068133, 9.285370344680214, 9.787538373425388, 9.238308190325023, 9.797601653636843, 9.330613686682343, 9.858367258936694, 9.560200662951114), (8.067786756816862, 9.554456043371948, 9.27469149390307, 9.033776034458183, 10.019996076443508, 8.54849914035637, 8.677967094825123, 9.610494621926655, 8.384040275703516, 9.59976908852845, 8.302499910121243, 9.740632943836745, 9.171240099824955), (7.182026557350772, 9.341463941487422, 8.926086752124556, 8.538824088444645, 10.030134087344983, 7.898441384164027, 8.03003953442249, 9.439874864556929, 7.550786249301022, 9.28122104008933, 7.326549172092055, 9.62744566940414, 8.757857572249172), (6.282992121852919, 9.126558288512195, 8.588323540856358, 8.041091168202328, 10.040975740459814, 7.279221531350036, 7.392851670593452, 9.02589526996411, 6.8022705024722745, 8.907087007307107, 6.388064390300646, 9.501436513829074, 8.282559496786616), (5.368809251341, 8.904054063570022, 8.278408724040972, 7.489617553985528, 10.052272580643132, 6.7333441915191115, 6.77210695478537, 8.626630032174635, 6.015626328596971, 8.511693264278577, 5.468204335199931, 9.333184479531793, 7.811233440957398), (4.219861477359421, 8.670486907483648, 8.020018052029462, 6.949610703676454, 10.053341715474547, 6.284992158226033, 6.2355842001949116, 8.223933333779739, 5.355774240311584, 8.030102273613428, 4.669280793630842, 9.143659757335824, 7.287385021758465), (3.1391764177662314, 8.330667347004658, 7.802375425677362, 6.331772471974347, 10.0309584950803, 5.856544238219368, 5.737778338339355, 7.765543101924469, 4.726489402797096, 7.555057070409483, 3.9079498582542844, 8.82616441381508, 6.70133576842991), (2.0576967282800394, 7.889256010635319, 7.494779692800527, 5.704620258399466, 9.994944740357653, 5.213179538589744, 5.320582839060098, 7.278129090148838, 4.203194981699536, 7.151964567830288, 3.2812794888149415, 8.416908888753897, 6.131900438290472), (2.0576967282800394, 7.889256010635319, 7.494779692800527, 5.704620258399466, 9.994944740357653, 5.213179538589744, 5.320582839060098, 7.278129090148838, 4.203194981699536, 7.151964567830288, 3.2812794888149415, 8.416908888753897, 6.131900438290472)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.235500081300435, 9.954444483738365, 9.465118740320538, 9.239560768235128, 10.010946147303308, 9.46357051799604, 9.205694384879152, 9.666683581105918, 8.93345181508396, 9.96832715132833, 9.762896059535624, 9.760223744376638, 9.483316346274457), (8.482342451866451, 9.87187703629618, 8.825367353932695, 8.572320372723963, 10.022184349478133, 8.634380109438691, 8.534020484158821, 9.35672354953287, 7.9633862003649005, 9.945528793267275, 9.416350124136587, 9.530421070007273, 9.012051959047396), (7.778896015707966, 9.795998942364667, 8.33649268868153, 7.6735712792242206, 10.033392516978937, 7.965568947146053, 7.767460847913294, 9.041706292780912, 7.1264435315540915, 9.882794442490857, 8.978074914941852, 9.176591521754398, 8.46736436484975), (7.079905763192053, 9.69153850496133, 7.760013012882055, 6.82868022462163, 10.045050512976411, 7.150571162365265, 7.172324363416738, 8.658638267433624, 6.436906976966332, 9.811580576079688, 8.51495992111535, 8.723695508803667, 7.843727678211076), (6.35370184628089, 9.589066082130955, 7.316188920922096, 5.894874895504393, 10.055887784652757, 6.5029800337527215, 6.396702677645892, 8.276882022633924, 5.900211512061083, 9.691223920117535, 8.145299145803461, 8.277567573353835, 7.0768316358060295), (5.517411990010514, 9.452855542306464, 6.810062424578341, 5.066279601842508, 10.066783686274556, 5.680024845080096, 5.740566894048152, 7.886996422019272, 5.442766728145905, 9.575353913597608, 7.729616467000748, 7.841830123654096, 6.373914813151183), (4.746236265083411, 9.298897467999051, 6.374943096760726, 4.166678972533603, 10.077537935550417, 4.937604636898632, 5.116267344441109, 7.511743304773611, 5.040477378218476, 9.156504847649469, 7.342001791087933, 7.429762138192589, 5.571549485402359), (3.916888270031611, 9.116014933798862, 5.940342156591342, 3.3481865069301717, 10.061947928335027, 4.156020193340483, 4.460263472074497, 7.147965739379046, 4.647008939018647, 8.69460561346373, 6.938749305229538, 7.042435259679608, 4.8196635189130195), (3.139752391278947, 8.87678964562294, 5.5175518722781645, 2.602843925412732, 10.01734720140411, 3.3383670251078033, 3.8787847383162717, 6.722637121170607, 4.2803986916191255, 8.231440707406486, 6.5003559209137025, 6.583703742123736, 4.005152714096079), (2.402405106967009, 8.5532786052957, 5.13032776959132, 2.1534058148934685, 9.853522819721334, 2.5115424183521693, 3.2968772964711945, 6.2080237748607825, 3.9107121393380413, 7.729418130980414, 5.859550650770605, 6.106461082817286, 3.1935400118259603), (2.402405106967009, 8.5532786052957, 5.13032776959132, 2.1534058148934685, 9.853522819721334, 2.5115424183521693, 3.2968772964711945, 6.2080237748607825, 3.9107121393380413, 7.729418130980414, 5.859550650770605, 6.106461082817286, 3.1935400118259603)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (8.938195147788543, 10.007968590723857, 9.820302919133441, 9.154409262530123, 9.850487511609364, 9.366376506521558, 9.820080029058152, 9.07902193041305, 9.425050951671903, 10.007968590723857, 9.352246162831316, 9.844707516837344, 9.784461118510423), (7.79458435796721, 10.016004853324002, 9.65632294443105, 8.316669707522825, 9.694318464842345, 8.786410117109327, 9.655591360451668, 8.235791849045553, 8.898847334514542, 9.686166621516275, 8.759332648661363, 9.703095932254783, 9.44904722605401), (6.72959932964221, 10.024038476194027, 9.506803035362646, 7.303298054280963, 9.550107676551447, 8.256158838395173, 9.505605531172746, 7.39327434583953, 8.41777539971081, 9.392023269114922, 8.217239426030842, 9.516137008348425, 9.081079621709748), (5.665506417171811, 10.032491725061002, 9.362338821287885, 6.318236837610293, 9.410788369131701, 7.742695055155073, 9.248902905292665, 6.580854249718924, 7.95191866555087, 9.04996481926877, 7.692315528640328, 9.335313135752925, 8.606555777400507), (4.568259490149553, 10.04125055873605, 9.137608944224297, 5.370094097668287, 9.277504894418088, 7.248133839846714, 8.99496002480955, 5.837156912773565, 7.43770554297457, 8.721810726851334, 7.09467213599078, 9.16212921114419, 8.151258341809335), (3.5251282489699993, 10.04938688864008, 8.914556602317528, 4.499934729797241, 9.147039754925464, 6.818045909282599, 8.784226464808754, 4.774624223063483, 7.022802260434908, 8.438276122753889, 6.579248213525651, 8.954115384324542, 7.741341236953018), (2.518370578505337, 10.006251460125647, 8.666072110597101, 3.663682428093587, 8.953915765618907, 6.231547931833188, 8.542165443047754, 3.7678413535392883, 6.607186871938024, 8.124836749201847, 6.027835667257606, 8.756211796729485, 7.346585847625617), (1.6599437053309687, 9.919869944204049, 8.386092700846298, 2.863576066002586, 8.733261858577617, 5.615518418842008, 8.255280346453208, 2.8212654986439123, 6.196107440358701, 7.5754423735615815, 5.451579767351059, 8.56031503470157, 6.808694986311087), (1.6599437053309687, 9.919869944204049, 8.386092700846298, 2.863576066002586, 8.733261858577617, 5.615518418842008, 8.255280346453208, 2.8212654986439123, 6.196107440358701, 7.5754423735615815, 5.451579767351059, 8.56031503470157, 6.808694986311087)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (8.956159205357928, 10.008348988256525, 9.341241662669956, 9.719107533945602, 9.906083560756674, 8.872087031407212, 9.637594416055077, 9.728828157593282, 9.610199474588535, 10.008348988256525, 9.410288017627629, 9.445490065462225, 9.677001574603102), (7.777079327144898, 10.016765572922527, 8.746876032032578, 9.436759569235285, 9.776899039591775, 7.88367847936583, 9.097791864342998, 9.481144007501761, 9.25384057923378, 9.879509024283566, 8.870813177675577, 8.938257761408185, 9.304945833206963), (6.5503558187546735, 10.02556224126231, 8.178796069323486, 9.100471963375652, 9.618943502254874, 6.969672849351662, 8.569954056610262, 9.244728155142022, 8.816421047743942, 9.756831537178586, 8.326147722711898, 8.453496457901325, 8.9494647322595), (5.3981902189192015, 10.03448238656818, 7.648809298107406, 8.784980178092024, 9.468502767538766, 6.118214315140889, 7.874461338780625, 9.024345586452931, 8.408174006550919, 9.621078155643364, 7.81792861435682, 8.001203234550674, 8.345999140189498), (4.28949747074739, 10.043650813358125, 7.145219198711632, 8.464441039603022, 9.322604252005835, 5.312110430904583, 7.141293457487044, 8.805987412615677, 7.793672055582626, 9.492255670192199, 7.318764125922201, 7.5712945875627815, 7.7716575975859055), (3.1769415566618813, 10.053156112947942, 6.660805570738816, 8.1455220053766, 9.182232406176801, 4.5487238856643, 6.402984360313175, 8.567595869977826, 7.211277541654508, 9.108688548050088, 6.838371989383306, 7.1574605721105735, 7.1945729880238245), (2.1107018326114373, 10.053447917434854, 6.180228996869324, 7.769609735044619, 9.038966659652544, 3.835677866306317, 5.609516263567844, 8.29631715640639, 6.656215841686858, 8.702221604587884, 6.328617506495469, 6.735317181378072, 6.60519884160427), (3.24791366318352, 10.005705571240036, 5.779600873624416, 7.367039905612037, 8.89838112304404, 3.27342078903919, 4.907647226795561, 7.8669914855513134, 6.22661703669572, 8.239569259215665, 5.858204445288604, 6.153224305304914, 5.964618105748173), (2.175685253096672, 10.000459954348948, 5.448950756935215, 6.869525211636661, 8.761001670700487, 2.896805872927074, 4.263217118631484, 7.401272303174656, 5.815804509832807, 7.74031582831645, 5.422998579509757, 5.3674452633676575, 5.274923861344543), (2.5435381041421707, 9.925709551453442, 5.0941367463306815, 6.283734038431724, 8.607222793374607, 2.560771998227215, 3.499025344799653, 6.849990068193276, 5.270831303523547, 7.1547750631696925, 4.818080716213149, 4.489593865343973, 4.507341932771614), (1.7196190935456668, 9.613280085748249, 4.76200208440501, 5.73238177178289, 8.462481806175044, 2.403489363111443, 2.8869360568076825, 6.28926693007071, 4.7721547027585975, 6.604868834869457, 4.212739105959722, 3.675562227535765, 3.8042559934798685), (1.7196190935456668, 9.613280085748249, 4.76200208440501, 5.73238177178289, 8.462481806175044, 2.403489363111443, 2.8869360568076825, 6.28926693007071, 4.7721547027585975, 6.604868834869457, 4.212739105959722, 3.675562227535765, 3.8042559934798685)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (8.84918083120441, 10.010460146021153, 9.475663221531578, 9.451077595563373, 10.010460146021153, 9.339890993866556, 9.349841748736164, 9.487151006023284, 9.609306038610807, 9.947643403697668, 9.470882038194597, 9.286813388178148, 9.816413888437378), (7.75634559019994, 10.021252672490009, 8.985045259039095, 8.792172036127306, 10.021252672490009, 8.722015474601621, 8.550903016009668, 9.007301170832456, 9.251686745090952, 9.78251234066151, 8.97578244658187, 8.63932969209809, 9.569902290909722), (7.75634559019994, 10.021252672490009, 8.985045259039095, 8.792172036127306, 10.021252672490009, 8.722015474601621, 8.550903016009668, 9.007301170832456, 9.251686745090952, 9.78251234066151, 8.97578244658187, 8.63932969209809, 9.569902290909722)]]"
        self.expected_all_intermediate_budgets = "[[10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 3925, 10000], [10, 280, 2035, 2467, 2926, 3412, 3925, 4465, 5032, 5626, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 3925, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 3925, 4465, 10000], [10, 280, 577, 10000]]"
        self.expected_all_est_objectives = "[[66.17277984615737, 62.68742597471863, 59.21643842535675, 55.6831575670245, 52.23322073381447, 48.86500025003257, 45.681317179947406, 42.5775354253734, 39.50806415160627, 39.50806415160627], [67.96045089275079, 64.22331859216929, 60.48624776774872, 56.8161477174366, 53.18075444528591, 49.59670401867286, 46.08050614477938, 42.65134731975637, 42.65134731975637], [66.60284779945974, 62.82215066834387, 59.11354484018882, 55.49682797483647, 52.0137174463908, 48.57255785265457, 45.284475837636066, 41.99215347531729, 38.844179246856676, 38.844179246856676], [65.1382202229765, 61.74261947258158, 58.25896200409392, 54.700133781176575, 51.27455211738915, 47.84209437494009, 44.40107289363416, 41.05468967593619, 37.822673503204705, 34.752746331930545, 32.07476796238966, 32.07476796238966], [65.25402450480675, 61.76560102195685, 58.467725765652155, 55.23608400701426, 52.14668142600867, 48.94998541052048, 45.76244217723727, 42.56033734862561, 39.49129651074847, 36.41786119432558, 36.41786119432558], [66.81144941227032, 63.36368817708519, 60.08567142201489, 56.789951536215675, 53.38710601136263, 50.01653813835506, 46.57449031676745, 43.085054384726064, 39.723433714873465, 39.723433714873465], [67.72045847556574, 64.22491135811099, 60.82249655876704, 57.18397396403603, 53.545852923382874, 49.84672137773473, 46.27307840900223, 42.74670205751632, 39.320860112304395, 36.12411830920758, 33.09755932557421, 33.09755932557421], [65.79911425085075, 62.294525546914244, 58.7162968932978, 55.16616005448256, 51.63125422579986, 48.15177624592774, 44.93232611979187, 41.872828253094625, 39.047816413631075, 39.047816413631075], [68.49701125770689, 65.40553973883215, 62.135939860808136, 58.824751471209744, 55.48228243389504, 52.148677058801184, 48.7927964645547, 45.51818921072684, 43.67804242384418, 40.37141070824448, 37.60804395227071, 34.4601379466192, 34.4601379466192], [64.96969877193652, 61.440443296353, 57.844312100081545, 57.844312100081545]]"
        self.expected_objective_curves = "[([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [68.89839091026717, 62.68742597471863, 59.21643842535675, 55.6831575670245, 52.23322073381447, 48.86500025003257, 45.681317179947406, 42.5775354253734, 39.50806415160627, 39.50806415160627]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 10000], [68.89839091026717, 64.22331859216929, 60.48624776774872, 56.8161477174366, 53.18075444528591, 49.59670401867286, 46.08050614477938, 42.65134731975637, 42.65134731975637]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [68.89839091026717, 62.82215066834387, 59.11354484018882, 55.49682797483647, 52.0137174463908, 48.57255785265457, 45.284475837636066, 41.99215347531729, 38.844179246856676, 38.844179246856676]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 3925, 10000], [68.89839091026717, 61.74261947258158, 58.25896200409392, 54.700133781176575, 51.27455211738915, 47.84209437494009, 44.40107289363416, 41.05468967593619, 37.822673503204705, 34.752746331930545, 33.604609366925416, 33.604609366925416]), ([10, 280, 2035, 2467, 2926, 3412, 3925, 4465, 5032, 5626, 10000], [68.89839091026717, 61.76560102195685, 58.467725765652155, 55.23608400701426, 52.14668142600867, 48.94998541052048, 45.76244217723727, 42.56033734862561, 39.49129651074847, 36.41786119432558, 36.41786119432558]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [68.89839091026717, 63.36368817708519, 60.08567142201489, 56.789951536215675, 53.38710601136263, 50.01653813835506, 46.57449031676745, 43.085054384726064, 39.723433714873465, 39.723433714873465]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 3925, 10000], [68.89839091026717, 64.22491135811099, 60.82249655876704, 57.18397396403603, 53.545852923382874, 49.84672137773473, 46.27307840900223, 42.74670205751632, 39.320860112304395, 36.12411830920758, 33.09755932557421, 33.09755932557421]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [68.89839091026717, 62.294525546914244, 58.7162968932978, 55.16616005448256, 51.63125422579986, 48.15177624592774, 44.93232611979187, 41.872828253094625, 39.047816413631075, 39.047816413631075]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 3925, 4465, 10000], [68.89839091026717, 65.40553973883215, 62.135939860808136, 58.824751471209744, 55.48228243389504, 52.148677058801184, 48.7927964645547, 45.51818921072684, 43.67804242384418, 40.37141070824448, 37.60804395227071, 34.4601379466192, 34.4601379466192]), ([10, 280, 577, 10000], [68.89839091026717, 61.440443296353, 57.844312100081545, 57.844312100081545])]"
        self.expected_progress_curves = "[([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.824020984322088, 0.7256754005512073, 0.6255648228849042, 0.5278156817515459, 0.4323818592339551, 0.34217664656283586, 0.2542353260567723, 0.16726614509786225, 0.16726614509786225]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 1.0], [1.0, 0.8675383562297864, 0.7616536745378758, 0.6576665161823696, 0.5546627259059912, 0.45311366343979614, 0.3534871082752414, 0.25632668298015343, 0.25632668298015343]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.8278382203261075, 0.7227600545421216, 0.6202854341642818, 0.521596362715015, 0.42409591240168165, 0.33093270145528175, 0.2376493461912471, 0.14845589366775339, 0.14845589366775339]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 0.3412, 0.3925, 1.0], [1.0, 0.7972512118346372, 0.6985466436032723, 0.597712217047223, 0.5006531456189967, 0.4033992501067261, 0.3059027130161834, 0.21108761892975014, 0.11951295530912118, 0.0325308571311687, 0.0, 0.0]), ([0.001, 0.028, 0.2035, 0.2467, 0.2926, 0.3412, 0.3925, 0.4465, 0.5032, 0.5626, 1.0], [1.0, 0.7979023619344656, 0.7044616731758861, 0.6128976180555997, 0.5253637113470845, 0.4347897950450709, 0.34447521004179427, 0.2537480425752142, 0.1667910574159937, 0.0797095608455958, 0.0797095608455958]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.8431819291909763, 0.7503039033255756, 0.6569242839795449, 0.5605094092891054, 0.4650090767767499, 0.36748345976796676, 0.26861516684343945, 0.17336834083460173, 0.17336834083460173]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 0.3412, 0.3925, 1.0], [1.0, 0.8675834850278932, 0.771180814343096, 0.6680883590825906, 0.5650072812959714, 0.4601975560726908, 0.3589433743879097, 0.25902842627855455, 0.16196198013973828, 0.0713867665097926, -0.014366554650102734, -0.014366554650102734]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.812888699522232, 0.7115045888617668, 0.6109164205337123, 0.5107598016023649, 0.4121736533428133, 0.32095503109962015, 0.23426843269870654, 0.15422566833823823, 0.15422566833823823]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 0.3412, 0.3925, 0.4465, 1.0], [1.0, 0.9010349410378227, 0.8083953956264349, 0.7145774978323954, 0.6198733065796088, 0.5254202548146657, 0.4303360658301169, 0.3375546434198674, 0.2854166546179901, 0.1917278638167249, 0.1134317267881586, 0.024240207262663804, 0.024240207262663804]), ([0.001, 0.028, 0.0577, 1.0], [1.0, 0.7886894719752374, 0.6867981177757644, 0.6867981177757644])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 10
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
