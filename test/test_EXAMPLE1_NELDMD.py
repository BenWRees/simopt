import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_EXAMPLE1_NELDMD(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "EXAMPLE-1"
        self.expected_solver_name = "NELDMD"
        self.expected_all_recommended_xs = "[[(2.0, 2.0), (0.0014398540752765588, 0.0005734645090497872), (-0.00021385740037241883, -0.00016352846523951176), (-0.00021385740037241883, -0.00016352846523951176)], [(2.0, 2.0), (2.0, 2.0)], [(2.0, 2.0), (0.39716772151346813, 0.20467360046640937), (0.08716502555664843, -0.11946174822433622), (0.12726996114380834, -0.07309676690981598), (0.06745384401303463, -0.12782602561979162), (0.11775565662196757, -0.06246069234573895), (0.05793953949119385, -0.11718995105571459), (0.12863510614367288, -0.01382391386259707), (0.04435065520836494, -0.07159941268598959), (0.07969843853460445, -0.019916394089430828), (0.07969843853460445, -0.019916394089430828)], [(2.0, 2.0), (0.4932156251752103, -0.09115699609092676), (-0.32304954230884053, -0.28196743697500054), (0.047869876567697416, 0.1708294596286205), (0.01774782665620792, 0.08370579105183301), (-0.03614761318123169, 0.005325261832183507), (-0.01911115323496152, -0.013215443677410676), (-0.01911115323496152, -0.013215443677410676)], [(2.0, 2.0), (-0.3155053294698361, 0.3495098184288207), (-0.002107063551796063, 0.012737973639889748), (-0.002107063551796063, 0.012737973639889748)], [(2.0, 2.0), (0.007988206696347255, 0.08078197950820071), (-0.003408463630263689, -0.026835299918143277), (-0.003408463630263689, -0.026835299918143277)], [(2.0, 2.0), (0.14253442599595245, -0.3582480888806312), (0.18524773522605542, 0.026430324798442123), (-0.08393384426712736, 0.10132952658846828), (-0.06096447413800525, -0.004202477055053333), (0.020283598187474123, -0.014416977158996293), (-0.012747101152268084, 0.01026449860608806), (-0.0006927579058337947, 0.013881242521373408), (0.0067818343292115925, -0.0011720532976327788), (0.0067818343292115925, -0.0011720532976327788)], [(2.0, 2.0), (2.0, 2.0)], [(2.0, 2.0), (0.5417562561029352, -0.357146561384323), (-0.30012615593996594, -0.26387956575141014), (0.22228773229234422, 0.3079195129134994), (0.2514185221395622, -0.16756329390163918), (-0.031636514362006374, -0.09685072812274001), (-0.015895199914400252, 0.0016367166665950533), (-0.003960263110404868, 0.0023129955340262503), (-0.003960263110404868, 0.0023129955340262503)], [(2.0, 2.0), (0.24882147837578839, 0.12877784771062784), (-0.02496856670110592, -0.20126953428536853), (0.12548123723269694, -0.049878610748196106), (0.07126211165127411, 0.0046524590951069755), (-0.017517571710983032, -0.05741023521265347), (-0.0002372928205658792, 0.0008866468628783014), (-0.0002372928205658792, 0.0008866468628783014)], [(2.0, 2.0), (-0.09591203446780683, 0.5503534664825118), (0.2891578855720556, -0.2659398937438355), (0.041618279076701944, -0.028459418767366927), (0.01905035258873862, 0.004649666109024994), (-0.006117444437644195, 0.0022975557625151254), (-0.006117444437644195, 0.0022975557625151254)], [(2.0, 2.0), (-0.22929681710716082, 0.3498409478387752), (-0.31707265993933, 0.22891833317689564), (-0.18104630240320976, 0.23868896587149413), (-0.11579249300724365, 0.12875831299103788), (0.08732725350623868, 0.10514227229035045), (-0.08684474747205258, -0.07929497241953097), (-0.08684474747205258, -0.07929497241953097)], [(2.0, 2.0), (0.013353120156976817, 0.09356067730903733), (0.0028782733083557305, 0.045383858161252094), (-0.02746387872231801, 0.013379860295132946), (-0.010177375290826726, 0.02064343502265018), (-0.008134335902070904, 0.0004370319940143544), (-0.008134335902070904, 0.0004370319940143544)], [(2.0, 2.0), (0.49998371102569006, -0.24561632055192995), (0.43540063500230775, -0.34695511576774746), (0.4864353767396591, -0.23424321590152775), (0.38278659556157013, -0.380564856400053), (0.43303168844722834, -0.2283018769168762), (0.3780487024514113, -0.14325837869831048), (0.24374983286864116, -0.08885395161972454), (0.06663442608562195, 0.10843525835669987), (0.06663442608562195, 0.10843525835669987)], [(2.0, 2.0), (0.14138241634811155, 0.011595086557759343), (0.03046397789349982, 0.013464173129294502), (-0.032695322879392384, -0.003292627846411409), (0.0011639503621236683, -0.00126428027557323), (0.0011639503621236683, -0.00126428027557323)], [(2.0, 2.0), (0.006738363180983073, 0.06267000511356413), (0.030041543149189866, 0.013601672467869065), (0.014224386591491703, 0.015608895966767431), (0.0006937929910349333, -0.00284766431737661), (0.0006937929910349333, -0.00284766431737661)], [(2.0, 2.0), (0.33107063817217913, 0.31928128971128156), (0.33678309299687575, -0.08496981291917927), (0.040712023052894425, -0.27158715298978364), (0.16026666564642222, 0.07567080712660873), (-0.10591574364917714, -0.024132042914897553), (0.0787767329983314, 0.007312849601683116), (0.04345991951211773, -0.05318388479409734), (-0.022398708696976286, -0.023533780255552333), (-0.022398708696976286, -0.023533780255552333)], [(2.0, 2.0), (-0.031292477277539754, 0.13155296501879304), (-0.12325498264573721, 0.014926808880657338), (0.030501952473911548, 0.06476680555879899), (0.00569417821134488, 0.0038214909873700645), (0.0018775975555653922, -0.00555471125438823), (0.0018775975555653922, -0.00555471125438823)], [(2.0, 2.0), (-0.09219164805577829, -0.42152559132524603), (-0.3125863551365714, 0.0052486918887176826), (0.12800830037354533, -0.03881471430697209), (-0.09228902738151304, -0.016783011209127202), (-0.023440026250198878, -0.048964329684461155), (0.005803757848606058, 0.00818856148384271), (0.005803757848606058, 0.00818856148384271)], [(2.0, 2.0), (-0.03449755924887925, 0.00741766032281505), (0.0001846385147905097, 0.03198247441633596), (-0.005875438227054429, 0.029408548941088797), (-0.010758439704318782, 0.024876048839738048), (-0.01884045151294593, 0.017755558003306034), (-0.01884045151294593, 0.017755558003306034)], [(2.0, 2.0), (-0.5517885233680773, -0.2283071313392968), (0.24280311317101533, 0.28654085948038244), (-0.06785387179762417, -0.29801324414471014), (0.005323080915162232, 0.08475959882232603), (-0.0027022147915927025, -0.02224558581374425), (-0.0027022147915927025, -0.02224558581374425)], [(2.0, 2.0), (-0.17550332500061316, -0.30969582583402167), (0.031010872278400103, 0.11042204132663622), (0.031010872278400103, 0.11042204132663622)], [(2.0, 2.0), (0.15469212476268657, 0.4131321793590408), (-0.2566095295048527, 0.17481514139701881), (0.20026194536273134, 0.025410963305753764), (-0.1309992056379455, 0.040533792860880796), (-0.08820416952120752, -0.08996684828647547), (0.04533012889157742, 0.0003472177964782136), (0.04533012889157742, 0.0003472177964782136)], [(2.0, 2.0), (0.44178378547471286, -0.12964473671401022), (0.39436674813637684, 0.05752303346106069), (0.2266570247684606, -0.0005114476016584019), (0.05894730140054438, -0.05854592866437747), (-0.0006156773863323362, 0.05656017127521663), (0.0021291258618461456, -0.044278023945158715), (0.029852012819150644, -0.026202427499674254), (0.00768744597708303, 0.010659972776400066), (0.00768744597708303, 0.010659972776400066)]]"
        self.expected_all_intermediate_budgets = "[[0, 750, 870, 1000], [0, 1000], [0, 150, 480, 540, 600, 660, 720, 780, 840, 960, 1000], [0, 360, 420, 480, 660, 720, 900, 1000], [0, 300, 750, 1000], [0, 390, 450, 1000], [0, 360, 420, 510, 630, 810, 870, 930, 990, 1000], [0, 1000], [0, 210, 270, 330, 390, 450, 750, 990, 1000], [0, 270, 390, 450, 510, 630, 750, 1000], [0, 210, 330, 630, 750, 930, 1000], [0, 390, 450, 570, 690, 780, 840, 1000], [0, 270, 510, 750, 810, 870, 1000], [0, 390, 450, 510, 570, 630, 720, 840, 960, 1000], [0, 330, 630, 690, 990, 1000], [0, 450, 510, 630, 990, 1000], [0, 390, 450, 570, 630, 750, 810, 870, 930, 1000], [0, 390, 510, 570, 900, 960, 1000], [0, 210, 390, 510, 630, 690, 930, 1000], [0, 540, 600, 660, 870, 930, 1000], [0, 150, 270, 330, 600, 660, 1000], [0, 270, 450, 1000], [0, 360, 420, 480, 570, 630, 690, 1000], [0, 240, 420, 540, 660, 780, 840, 900, 960, 1000]]"
        self.expected_all_est_objectives = "[[7.984539704940337, -0.015457893018363457, -0.015460222583118077, -0.015460222583118077], [8.081590387702734, 8.081590387702734], [7.9253347189439385, 0.12496820068401976, -0.05279643008695753, -0.05312450071384893, -0.05377576715817695, -0.05689754830128356, -0.05757480619117103, -0.05792718992898891, -0.06757182454167351, -0.06791677719768373, -0.06791677719768373], [8.073099810658121, 0.32467106151141484, 0.2569664529583223, 0.1045740400177332, 0.08042145546475206, 0.07443481901040137, 0.0736396947876811, 0.0736396947876811], [7.880122723414122, 0.10182344951613623, -0.11971058089661887, -0.11971058089661887], [8.025785950362149, 0.03237549002163351, 0.026517701308162164, 0.026517701308162164], [8.015084462897443, 0.16374221867806235, 0.05009974837277587, 0.03239702606954348, 0.01881879081776376, 0.01570373648327594, 0.015352311416862535, 0.015277631704895272, 0.015131829883243393, 0.015131829883243393], [7.994852045957048, 7.994852045957048], [7.910902809206077, 0.33195631654139063, 0.07061094390652903, 0.05512907156663513, 0.002191539944084133, -0.07871625821504216, -0.08884185457215904, -0.08907615716168044, -0.08907615716168044], [7.943417039435916, 0.02191290159800928, -0.015450105809528596, -0.038349543856466876, -0.051483026631454994, -0.05298016013826365, -0.05658211811354312, -0.05658211811354312], [8.091417684005862, 0.4035057404309302, 0.24575399387884367, 0.09395970367574186, 0.09180221933453993, 0.09146038589478878, 0.09146038589478878], [7.909472416682599, 0.08443813580280388, 0.06241109162808675, -0.000777397274725713, -0.06054097871627282, -0.07184663669008237, -0.07669788050290467, -0.07669788050290467], [7.977013328578315, -0.014054765265233806, -0.020918692382848044, -0.022053386125694817, -0.022456941044341622, -0.02292031300415476, -0.02292031300415476], [8.026689092895502, 0.3370001811079891, 0.33664065821332384, 0.31817835283524387, 0.3180442805639101, 0.266327283098726, 0.19013287738796436, 0.0939980986374309, 0.04288744489014453, 0.04288744489014453], [7.9661065902554125, -0.013769976059876461, -0.0327840718374379, -0.03281358420826645, -0.033890456559528465, -0.033890456559528465], [7.989698471543214, -0.006328593377493712, -0.009214028648078893, -0.00985555764958114, -0.010292937916007813, -0.010292937916007813], [7.920874622531411, 0.13242293195084212, 0.04151734336747147, -0.0037083269784355987, -0.04771390229997659, -0.06732487722058648, -0.07286612603740387, -0.07440808726279954, -0.07806983650418249, -0.07806983650418249], [7.936832268065668, -0.04488233019493132, -0.04775313156397178, -0.05804262372732041, -0.06312070447546332, -0.06313335174463214, -0.06313335174463214], [8.053894643913893, 0.2400777680272293, 0.15163242209799993, 0.07178735092514614, 0.06269357795416187, 0.05684158432594908, 0.053995380058230416, 0.053995380058230416], [8.098435148416002, 0.09968025169479415, 0.09945806117717229, 0.09933453194117987, 0.0991697102467481, 0.09910537086922004, 0.09910537086922004], [7.934581643563343, 0.2911763643044424, 0.07564065948063349, 0.027997685166923393, -0.05820583165370861, -0.06491618838368307, -0.06491618838368307], [8.017557178997036, 0.1442701006223208, 0.030711880407241866, 0.030711880407241866], [7.988890794564379, 0.18349864564992174, 0.0852995788587381, 0.029641358380968468, 0.00769457480583809, 0.004764803875904154, -0.009054264290098236, -0.009054264290098236], [7.9800797052490156, 0.19206037611502605, 0.1389137366632367, 0.03145337370455377, -0.013017884645405067, -0.016720862717660198, -0.01795521816956245, -0.018342584874755666, -0.019747562905741898, -0.019747562905741898]]"
        self.expected_objective_curves = "[([0, 750, 870, 1000], [8.090508544469758, -0.015457893018363457, -0.015460222583118077, -0.015460222583118077]), ([0, 1000], [8.090508544469758, 8.090508544469758]), ([0, 150, 480, 540, 600, 660, 720, 780, 840, 960, 1000], [8.090508544469758, 0.12496820068401976, -0.05279643008695753, -0.05312450071384893, -0.05377576715817695, -0.05689754830128356, -0.05757480619117103, -0.05792718992898891, -0.06757182454167351, -0.06791677719768373, -0.06791677719768373]), ([0, 360, 420, 480, 660, 720, 900, 1000], [8.090508544469758, 0.32467106151141484, 0.2569664529583223, 0.1045740400177332, 0.08042145546475206, 0.07443481901040137, 0.0736396947876811, 0.0736396947876811]), ([0, 300, 750, 1000], [8.090508544469758, 0.10182344951613623, -0.11971058089661887, -0.11971058089661887]), ([0, 390, 450, 1000], [8.090508544469758, 0.03237549002163351, 0.026517701308162164, 0.026517701308162164]), ([0, 360, 420, 510, 630, 810, 870, 930, 990, 1000], [8.090508544469758, 0.16374221867806235, 0.05009974837277587, 0.03239702606954348, 0.01881879081776376, 0.01570373648327594, 0.015352311416862535, 0.015277631704895272, 0.015131829883243393, 0.015131829883243393]), ([0, 1000], [8.090508544469758, 8.090508544469758]), ([0, 210, 270, 330, 390, 450, 750, 990, 1000], [8.090508544469758, 0.33195631654139063, 0.07061094390652903, 0.05512907156663513, 0.002191539944084133, -0.07871625821504216, -0.08884185457215904, -0.08907615716168044, -0.08907615716168044]), ([0, 270, 390, 450, 510, 630, 750, 1000], [8.090508544469758, 0.02191290159800928, -0.015450105809528596, -0.038349543856466876, -0.051483026631454994, -0.05298016013826365, -0.05658211811354312, -0.05658211811354312]), ([0, 210, 330, 630, 750, 930, 1000], [8.090508544469758, 0.4035057404309302, 0.24575399387884367, 0.09395970367574186, 0.09180221933453993, 0.09146038589478878, 0.09146038589478878]), ([0, 390, 450, 570, 690, 780, 840, 1000], [8.090508544469758, 0.08443813580280388, 0.06241109162808675, -0.000777397274725713, -0.06054097871627282, -0.07184663669008237, -0.07669788050290467, -0.07669788050290467]), ([0, 270, 510, 750, 810, 870, 1000], [8.090508544469758, -0.014054765265233806, -0.020918692382848044, -0.022053386125694817, -0.022456941044341622, -0.02292031300415476, -0.02292031300415476]), ([0, 390, 450, 510, 570, 630, 720, 840, 960, 1000], [8.090508544469758, 0.3370001811079891, 0.33664065821332384, 0.31817835283524387, 0.3180442805639101, 0.266327283098726, 0.19013287738796436, 0.0939980986374309, 0.04288744489014453, 0.04288744489014453]), ([0, 330, 630, 690, 990, 1000], [8.090508544469758, -0.013769976059876461, -0.0327840718374379, -0.03281358420826645, -0.033890456559528465, -0.033890456559528465]), ([0, 450, 510, 630, 990, 1000], [8.090508544469758, -0.006328593377493712, -0.009214028648078893, -0.00985555764958114, -0.010292937916007813, -0.010292937916007813]), ([0, 390, 450, 570, 630, 750, 810, 870, 930, 1000], [8.090508544469758, 0.13242293195084212, 0.04151734336747147, -0.0037083269784355987, -0.04771390229997659, -0.06732487722058648, -0.07286612603740387, -0.07440808726279954, -0.07806983650418249, -0.07806983650418249]), ([0, 390, 510, 570, 900, 960, 1000], [8.090508544469758, -0.04488233019493132, -0.04775313156397178, -0.05804262372732041, -0.06312070447546332, -0.06313335174463214, -0.06313335174463214]), ([0, 210, 390, 510, 630, 690, 930, 1000], [8.090508544469758, 0.2400777680272293, 0.15163242209799993, 0.07178735092514614, 0.06269357795416187, 0.05684158432594908, 0.053995380058230416, 0.053995380058230416]), ([0, 540, 600, 660, 870, 930, 1000], [8.090508544469758, 0.09968025169479415, 0.09945806117717229, 0.09933453194117987, 0.0991697102467481, 0.09910537086922004, 0.09910537086922004]), ([0, 150, 270, 330, 600, 660, 1000], [8.090508544469758, 0.2911763643044424, 0.07564065948063349, 0.027997685166923393, -0.05820583165370861, -0.06491618838368307, -0.06491618838368307]), ([0, 270, 450, 1000], [8.090508544469758, 0.1442701006223208, 0.030711880407241866, 0.030711880407241866]), ([0, 360, 420, 480, 570, 630, 690, 1000], [8.090508544469758, 0.18349864564992174, 0.0852995788587381, 0.029641358380968468, 0.00769457480583809, 0.004764803875904154, -0.009054264290098236, -0.009054264290098236]), ([0, 240, 420, 540, 660, 780, 840, 900, 960, 1000], [8.090508544469758, 0.19206037611502605, 0.1389137366632367, 0.03145337370455377, -0.013017884645405067, -0.016720862717660198, -0.01795521816956245, -0.018342584874755666, -0.019747562905741898, -0.019747562905741898])]"
        self.expected_progress_curves = "[([0.0, 0.75, 0.87, 1.0], [1.0, -0.0019106206900837712, -0.0019109086280720716, -0.0019109086280720716]), ([0.0, 1.0], [1.0, 1.0]), ([0.0, 0.15, 0.48, 0.54, 0.6, 0.66, 0.72, 0.78, 0.84, 0.96, 1.0], [1.0, 0.015446272628862296, -0.006525724532241718, -0.006566274594711604, -0.006646772185283113, -0.007032629406241182, -0.007116339581709744, -0.007159894784189415, -0.00835198729106615, -0.008394623999761798, -0.008394623999761798]), ([0.0, 0.36, 0.42, 0.48, 0.66, 0.72, 0.9, 1.0], [1.0, 0.040129870665959896, 0.03176147105536041, 0.012925521237996153, 0.009940222548769681, 0.00920026455707547, 0.009101985911382207, 0.009101985911382207]), ([0.0, 0.3, 0.75, 1.0], [1.0, 0.012585543783367898, -0.014796422281569268, -0.014796422281569268]), ([0.0, 0.39, 0.45, 1.0], [1.0, 0.004001663164148522, 0.0032776309625540483, 0.0032776309625540483]), ([0.0, 0.36, 0.42, 0.51, 0.63, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.02023880424549923, 0.006192410291318634, 0.004004325054657826, 0.002326033118230533, 0.0019410073417461724, 0.0018975706326095606, 0.001888340098885162, 0.0018703187568582086, 0.0018703187568582086]), ([0.0, 1.0], [1.0, 1.0]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.75, 0.99, 1.0], [1.0, 0.041030340023347274, 0.00872762738193941, 0.006814042808757484, 0.0002708778974817539, -0.009729457398428733, -0.010980997558291513, -0.01100995773900618, -0.01100995773900618]), ([0.0, 0.27, 0.39, 0.45, 0.51, 0.63, 0.75, 1.0], [1.0, 0.0027084702373854825, -0.0019096581784206219, -0.004740065923628569, -0.006363385731376065, -0.006548433865072434, -0.00699364172258611, -0.00699364172258611]), ([0.0, 0.21, 0.33, 0.63, 0.75, 0.93, 1.0], [1.0, 0.04987396505584872, 0.030375592897288025, 0.01161357202199208, 0.011346903452353566, 0.011304652283855042, 0.011304652283855042]), ([0.0, 0.39, 0.45, 0.57, 0.69, 0.78, 0.84, 1.0], [1.0, 0.010436690764083217, 0.007714112318779721, -9.608756612179842e-05, -0.007482963324679438, -0.008880361017502777, -0.009479982634136302, -0.009479982634136302]), ([0.0, 0.27, 0.51, 0.75, 0.81, 0.87, 1.0], [1.0, -0.0017371918202646107, -0.002585584363191477, -0.0027258343532396787, -0.0027757143968029046, -0.0028329879238335235, -0.0028329879238335235]), ([0.0, 0.39, 0.45, 0.51, 0.57, 0.63, 0.72, 0.84, 0.96, 1.0], [1.0, 0.041653769878080726, 0.041609332264216384, 0.03932736132547981, 0.039310789774928086, 0.03291848486839226, 0.023500732536513927, 0.011618317701633603, 0.005300957863700683, 0.005300957863700683]), ([0.0, 0.33, 0.63, 0.69, 0.99, 1.0], [1.0, -0.0017019914118116698, -0.004052164540367163, -0.0040558123173476, -0.00418891548945884, -0.00418891548945884]), ([0.0, 0.45, 0.51, 0.63, 0.99, 1.0], [1.0, -0.0007822244229405829, -0.0011388689100856478, -0.001218162936904365, -0.0012722238484061078, -0.0012722238484061078]), ([0.0, 0.39, 0.45, 0.57, 0.63, 0.75, 0.81, 0.87, 0.93, 1.0], [1.0, 0.016367689524456334, 0.00513161108962063, -0.00045835523911168897, -0.005897515840656429, -0.008321464200987241, -0.009006371557102093, -0.009196960469643278, -0.009649558624784704, -0.009649558624784704]), ([0.0, 0.39, 0.51, 0.57, 0.9, 0.96, 1.0], [1.0, -0.005547528928278618, -0.005902364641418405, -0.00717416258919784, -0.007801821619558054, -0.007803384842574172, -0.007803384842574172]), ([0.0, 0.21, 0.39, 0.51, 0.63, 0.69, 0.93, 1.0], [1.0, 0.02967400216038752, 0.01874201371453316, 0.008873033200640541, 0.007749028087612104, 0.007025712167970328, 0.006673916696514558, 0.006673916696514558]), ([0.0, 0.54, 0.6, 0.66, 0.87, 0.93, 1.0], [1.0, 0.012320641050794053, 0.012293177941843538, 0.01227790952758831, 0.012257537298385928, 0.012249584846797203, 0.012249584846797203]), ([0.0, 0.15, 0.27, 0.33, 0.6, 0.66, 1.0], [1.0, 0.035989871675430725, 0.009349308398214032, 0.0034605593718903026, -0.007194335354048297, -0.008023746347571232, -0.008023746347571232]), ([0.0, 0.27, 0.45, 1.0], [1.0, 0.017832018819254097, 0.003796038313096508, 0.003796038313096508]), ([0.0, 0.36, 0.42, 0.48, 0.57, 0.63, 0.69, 1.0], [1.0, 0.022680730715667025, 0.010543166525303821, 0.003663720051470649, 0.0009510619466680735, 0.0005889374999994432, -0.0011191217758848115, -0.0011191217758848115]), ([0.0, 0.24, 0.42, 0.54, 0.66, 0.78, 0.84, 0.9, 0.96, 1.0], [1.0, 0.023738974510608277, 0.01716996353192047, 0.003887688089280077, -0.0016090316911294038, -0.0020667257967473124, -0.002219294135945964, -0.002267173290026828, -0.0024408308571950378, -0.0024408308571950378])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
