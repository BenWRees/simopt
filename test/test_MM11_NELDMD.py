import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_MM11_NELDMD(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "MM1-1"
        self.expected_solver_name = "NELDMD"
        self.expected_all_recommended_xs = "[[(5,), (3.402793206539716,), (2.604189809809574,), (3.003491508174645,), (2.8038406589921094,), (2.8287970151399264,), (2.816318837066018,), (2.8225579261029723,), (2.8221679830381623,), (2.8223629545705675,), (2.8223629545705675,)], [(5,), (2.970106601179852,), (2.8432382637535927,), (2.8749553481101575,), (2.859096805931875,), (2.85711448815959,), (2.8581056470457327,), (2.8576100676026615,), (2.8576720150330455,), (2.8576720150330455,)], [(5,), (2.5398676148660257,), (2.8473841630077725,), (2.808944594490054,), (2.8281643787489132,), (2.8185544866194836,), (2.8209569596518413,), (2.8197557231356623,), (2.820356341393752,), (2.820356341393752,)], [(5,), (2.6455592511292894,), (2.9398643447381283,), (2.8662880713359185,), (2.9030762080370236,), (2.8938791738617473,), (2.8984776909493855,), (2.897328061677476,), (2.897328061677476,)], [(5,), (2.691382899199186,), (2.979960036799288,), (2.835671467999237,), (2.8717436101992497,), (2.867234592424248,), (2.866670965202373,), (2.8669527788133107,), (2.8669527788133107,)], [(5,), (2.6451804034362896,), (2.8414153698165987,), (2.8168859990190604,), (2.8199521703687527,), (2.8203354417874644,), (2.8201438060781086,), (2.8201438060781086,)], [(5,), (2.5766612978753325,), (2.818995168087799,), (2.697828232981566,), (2.7584117005346824,), (2.7432658336464035,), (2.739479366924334,), (2.7413726002853687,), (2.7408992919451096,), (2.7411359461152394,), (2.7410176190301745,), (2.7410767825727067,), (2.7410767825727067,)], [(5,), (2.587000339321399,), (2.8886252969062243,), (2.7378128181138117,), (2.7755159378119147,), (2.7566643779628635,), (2.7590208229439948,), (2.7590208229439948,)], [(5,), (2.768364681234213,), (2.838103284945644,), (2.829385959481715,), (2.831565290847697,), (2.8310204580062015,), (2.8310204580062015,)], [(5,), (3.126465518801295,), (2.6580818985016186,), (2.892273708651457,), (2.775177803576538,), (2.8337257561139975,), (2.8044517798452677,), (2.8190887679796326,), (2.81177027391245,), (2.8154295209460414,), (2.8154295209460414,)], [(5,), (3.0412488276549468,), (2.796404931111815,), (2.857615905247598,), (2.842313161713652,), (2.844226004655395,), (2.844226004655395,)], [(5,), (2.8607144593208993,), (3.128125151905787,), (2.994419805613343,), (3.0111329738998984,), (3.0106106873909435,), (3.0108718306454207,), (3.0108718306454207,)], [(5,), (2.9074703163251163,), (2.645904105865756,), (2.776687211095436,), (2.760339322941726,), (2.7644262949801535,), (2.7623828089609397,), (2.7628936804657434,), (2.7628936804657434,)], [(5,), (2.7352774961224378,), (2.9617497465101943,), (2.8485136213163162,), (2.876822652614786,), (2.862668136965551,), (2.8697453947901685,), (2.86620676587786,), (2.867976080334014,), (2.8670914231059372,), (2.8669808409524276,), (2.8669808409524276,)], [(5,), (2.643483035654584,), (2.7907653459261725,), (2.7171241907903783,), (2.7539447683582754,), (2.744739623966301,), (2.749342196162288,), (2.7470409100642943,), (2.747616231588793,), (2.747328570826544,), (2.747328570826544,)], [(5,), (2.517832696001662,), (3.1383745220012464,), (2.828103609001454,), (2.866887473126428,), (2.8571915070951848,), (2.8571915070951848,)], [(5,), (2.547505823109584,), (3.160629367332188,), (2.854067595220886,), (2.815747373706973,), (2.8349074844639297,), (2.8373024983085493,), (2.8361049913862395,), (2.8367037448473944,), (2.8367037448473944,)], [(5,), (2.4278597475405554,), (3.0708948106554166,), (2.749377279097986,), (2.910136044876701,), (2.8297566619873438,), (2.819709239126174,), (2.8247329505567587,), (2.8234770226991124,), (2.823634013681318,), (2.823634013681318,)], [(5,), (2.7610097270819614,), (3.040883511196716,), (2.9009466191393387,), (2.8965735912625457,), (2.8987601052009424,), (2.897666848231744,), (2.897666848231744,)], [(5,), (3.456832057169682,), (2.685248085754523,), (2.8781440786083126,), (2.8299200803948654,), (2.854032079501589,), (2.8419760799482274,), (2.848004079724908,), (2.8449900798365677,), (2.84536682982261,), (2.84536682982261,)], [(5,), (2.991407189775579,), (2.8240244555902105,), (2.818793745146918,), (2.820101422757741,), (2.8194475839523294,), (2.8194475839523294,)], [(5,), (2.562876589493034,), (3.172157442119776,), (2.867517015806405,), (2.9436771223847478,), (2.9055970690955766,), (2.924637095740162,), (2.922257092409589,), (2.9228520932422324,), (2.922554592825911,), (2.922554592825911,)], [(5,), (3.3869901110454093,), (2.5804851665681134,), (2.9837376388067613,), (2.7821114026874376,), (2.8829245207470997,), (2.857721241232184,), (2.857721241232184,)], [(5,), (3.3698375818186643,), (2.5547563727279963,), (2.96229697727333,), (2.758526675000663,), (2.8604118261369966,), (2.8094692505688297,), (2.8158370725148503,), (2.81265316154184,), (2.814245117028345,), (2.813449139285092,), (2.813449139285092,)]]"
        self.expected_all_intermediate_budgets = "[[0, 120, 240, 300, 360, 540, 600, 660, 900, 960, 1000], [0, 120, 300, 420, 480, 660, 720, 780, 960, 1000], [0, 180, 360, 540, 600, 660, 780, 840, 900, 1000], [0, 180, 360, 480, 540, 660, 720, 840, 1000], [0, 180, 360, 420, 540, 720, 900, 960, 1000], [0, 180, 300, 480, 660, 840, 900, 1000], [0, 180, 240, 300, 360, 480, 600, 660, 780, 840, 900, 960, 1000], [0, 180, 360, 420, 540, 600, 780, 1000], [0, 180, 480, 660, 780, 900, 1000], [0, 180, 300, 360, 420, 480, 540, 600, 660, 720, 1000], [0, 180, 360, 480, 600, 780, 1000], [0, 180, 360, 420, 600, 900, 960, 1000], [0, 180, 360, 420, 600, 720, 780, 900, 1000], [0, 180, 240, 300, 420, 480, 540, 600, 660, 720, 900, 1000], [0, 180, 420, 480, 540, 660, 720, 780, 900, 960, 1000], [0, 180, 300, 360, 540, 660, 1000], [0, 180, 300, 360, 540, 600, 780, 840, 900, 1000], [0, 180, 270, 330, 390, 450, 630, 690, 810, 990, 1000], [0, 180, 360, 420, 720, 780, 840, 1000], [0, 120, 240, 360, 480, 540, 600, 660, 720, 900, 1000], [0, 150, 270, 570, 690, 750, 1000], [0, 180, 300, 360, 480, 540, 600, 780, 900, 960, 1000], [0, 120, 240, 300, 360, 420, 540, 1000], [0, 120, 240, 300, 360, 420, 480, 660, 720, 780, 840, 1000]]"
        self.expected_all_est_objectives = "[[2.7852321578182706, 1.6800692645834387, 1.5757661165678583, 1.5615362172844625, 1.5454764118579556, 1.5453483143002529, 1.5453244748299075, 1.5453146671557314, 1.5453137976580544, 1.5453141942819526, 1.5453141942819526], [2.7857037031168543, 1.558199008139838, 1.547898177089963, 1.5489801650906794, 1.5483091610640054, 1.5482441689967117, 1.5482763003715518, 1.5482601486900052, 1.5482621592889183, 1.5482621592889183], [2.7866293625352507, 1.6250013469401086, 1.5649415445159398, 1.565526366780859, 1.5650445111663702, 1.5652346282335277, 1.565177275911252, 1.5652053592677373, 1.5651911945247576, 1.5651911945247576], [2.7889080044387127, 1.5869879498482913, 1.569817266348574, 1.5653392821646883, 1.5669010604490508, 1.5663740644136999, 1.5666225057145808, 1.5665575229065742, 1.5665575229065742], [2.7833651638972787, 1.551712605861189, 1.5542996751332294, 1.5420425169752634, 1.5433391073874367, 1.5431070611953772, 1.5430793461978096, 1.5430931689897809, 1.5430931689897809], [2.787955763524055, 1.594766378682147, 1.5669538565371, 1.5677179196727766, 1.5675912439125466, 1.5675760047398029, 1.5675836111858568, 1.5675836111858568], [2.7843462630059106, 1.5810161393809539, 1.5455010577616408, 1.5532450921768188, 1.5471489552661633, 1.5482376001017806, 1.548551123546784, 1.5483924493049583, 1.5484317063677622, 1.5484120498770297, 1.5484218734327277, 1.5484169604451825, 1.5484169604451825], [2.7907221687784363, 1.622216250540972, 1.5789706856220218, 1.5861986783351893, 1.581939861017691, 1.5838439245459641, 1.5835789545436671, 1.5835789545436671], [2.789502875694011, 1.5650816035822153, 1.5625358258254465, 1.5625667845295426, 1.5625522798550078, 1.5625555361591261, 1.5625555361591261], [2.7891645344327056, 1.605837430504597, 1.59483924111534, 1.5728275684243656, 1.5753762053144607, 1.5722747908242116, 1.573339079876476, 1.5726948202938191, 1.5729861911372063, 1.5728340439885082, 1.5728340439885082], [2.7863020842335002, 1.5732335653245175, 1.5492701652980259, 1.5503569793668035, 1.5497349809348955, 1.549799576230115, 1.549799576230115], [2.781108319206661, 1.5392448859633903, 1.5815929397008608, 1.5533784229668373, 1.556197058986206, 1.5561057103173863, 1.5561513534223803, 1.5561513534223803], [2.781564747274972, 1.5421179088124455, 1.5516418318681524, 1.5375386083515254, 1.538207295930974, 1.5380118257602942, 1.5381075870885708, 1.5380833542334609, 1.5380833542334609], [2.7819442310007103, 1.5332348843060704, 1.5425827750653536, 1.5316913796530927, 1.5333010035748236, 1.5323955042963269, 1.5328251649435254, 1.532604401105516, 1.5327131034091703, 1.5326583205909179, 1.5326515309576825, 1.5326515309576825], [2.784695397913865, 1.5692100930850716, 1.5489315736873142, 1.5553530763754941, 1.5512570358132678, 1.5520994350326485, 1.5516640430343716, 1.5518786679280658, 1.5518242791774401, 1.551851410193447, 1.551851410193447], [2.782112928233372, 1.5935271754836777, 1.583400905451718, 1.5370873460442624, 1.538375378028532, 1.5379122079710883, 1.5379122079710883], [2.784512429482461, 1.6074850404868033, 1.5990228503282176, 1.5507558770353163, 1.5509415992008644, 1.550634954144213, 1.5506278429461844, 1.5506305467655264, 1.550628999913064, 1.550628999913064], [2.783456075233837, 1.652359439146516, 1.5700314546969611, 1.5445822879624655, 1.5454488040930732, 1.5418155633172288, 1.5417978092512268, 1.5417932357894262, 1.541791684969536, 1.5417917675833257, 1.5417917675833257], [2.7872953386099404, 1.5582446268850736, 1.5757893822902889, 1.5575826368106485, 1.5572951904018424, 1.5574369499813074, 1.5573656098711626, 1.5573656098711626], [2.7844968268172887, 1.70083344954099, 1.5513936044375072, 1.5448663173922697, 1.5427792594670444, 1.5435417759715506, 1.543092575287668, 1.5433004220323232, 1.5431926048252926, 1.5432056976241324, 1.5432056976241324], [2.781707203439503, 1.5481337413327765, 1.5323085617902779, 1.5322274360152546, 1.5322450213930392, 1.5322360429189223, 1.5322360429189223], [2.7902297278963424, 1.6151343825659488, 1.6149218602152646, 1.56645154542626, 1.5713853640108224, 1.5681539057912663, 1.5695853528446064, 1.5693843494700521, 1.56943425556602, 1.569409277811651, 1.569409277811651], [2.7850791792196157, 1.6778225304454026, 1.6058869904425577, 1.5686137104300701, 1.5618602409371092, 1.5600286232659248, 1.5594514389466076, 1.5594514389466076], [2.7868278653888137, 1.6707881462626784, 1.6046557418646774, 1.5615502687798495, 1.557301736594245, 1.5539820818806824, 1.5541985235163915, 1.554014304576239, 1.5541004803836538, 1.554056137510414, 1.5540779550055561, 1.5540779550055561]]"
        self.expected_objective_curves = "[([0, 120, 240, 300, 360, 540, 600, 660, 900, 960, 1000], [2.7854035060729516, 1.6800692645834387, 1.5757661165678583, 1.5615362172844625, 1.5454764118579556, 1.5453483143002529, 1.5453244748299075, 1.5453146671557314, 1.5453137976580544, 1.5453141942819526, 1.5453141942819526]), ([0, 120, 300, 420, 480, 660, 720, 780, 960, 1000], [2.7854035060729516, 1.558199008139838, 1.547898177089963, 1.5489801650906794, 1.5483091610640054, 1.5482441689967117, 1.5482763003715518, 1.5482601486900052, 1.5482621592889183, 1.5482621592889183]), ([0, 180, 360, 540, 600, 660, 780, 840, 900, 1000], [2.7854035060729516, 1.6250013469401086, 1.5649415445159398, 1.565526366780859, 1.5650445111663702, 1.5652346282335277, 1.565177275911252, 1.5652053592677373, 1.5651911945247576, 1.5651911945247576]), ([0, 180, 360, 480, 540, 660, 720, 840, 1000], [2.7854035060729516, 1.5869879498482913, 1.569817266348574, 1.5653392821646883, 1.5669010604490508, 1.5663740644136999, 1.5666225057145808, 1.5665575229065742, 1.5665575229065742]), ([0, 180, 360, 420, 540, 720, 900, 960, 1000], [2.7854035060729516, 1.551712605861189, 1.5542996751332294, 1.5420425169752634, 1.5433391073874367, 1.5431070611953772, 1.5430793461978096, 1.5430931689897809, 1.5430931689897809]), ([0, 180, 300, 480, 660, 840, 900, 1000], [2.7854035060729516, 1.594766378682147, 1.5669538565371, 1.5677179196727766, 1.5675912439125466, 1.5675760047398029, 1.5675836111858568, 1.5675836111858568]), ([0, 180, 240, 300, 360, 480, 600, 660, 780, 840, 900, 960, 1000], [2.7854035060729516, 1.5810161393809539, 1.5455010577616408, 1.5532450921768188, 1.5471489552661633, 1.5482376001017806, 1.548551123546784, 1.5483924493049583, 1.5484317063677622, 1.5484120498770297, 1.5484218734327277, 1.5484169604451825, 1.5484169604451825]), ([0, 180, 360, 420, 540, 600, 780, 1000], [2.7854035060729516, 1.622216250540972, 1.5789706856220218, 1.5861986783351893, 1.581939861017691, 1.5838439245459641, 1.5835789545436671, 1.5835789545436671]), ([0, 180, 480, 660, 780, 900, 1000], [2.7854035060729516, 1.5650816035822153, 1.5625358258254465, 1.5625667845295426, 1.5625522798550078, 1.5625555361591261, 1.5625555361591261]), ([0, 180, 300, 360, 420, 480, 540, 600, 660, 720, 1000], [2.7854035060729516, 1.605837430504597, 1.59483924111534, 1.5728275684243656, 1.5753762053144607, 1.5722747908242116, 1.573339079876476, 1.5726948202938191, 1.5729861911372063, 1.5728340439885082, 1.5728340439885082]), ([0, 180, 360, 480, 600, 780, 1000], [2.7854035060729516, 1.5732335653245175, 1.5492701652980259, 1.5503569793668035, 1.5497349809348955, 1.549799576230115, 1.549799576230115]), ([0, 180, 360, 420, 600, 900, 960, 1000], [2.7854035060729516, 1.5392448859633903, 1.5815929397008608, 1.5533784229668373, 1.556197058986206, 1.5561057103173863, 1.5561513534223803, 1.5561513534223803]), ([0, 180, 360, 420, 600, 720, 780, 900, 1000], [2.7854035060729516, 1.5421179088124455, 1.5516418318681524, 1.5375386083515254, 1.538207295930974, 1.5380118257602942, 1.5381075870885708, 1.5380833542334609, 1.5380833542334609]), ([0, 180, 240, 300, 420, 480, 540, 600, 660, 720, 900, 1000], [2.7854035060729516, 1.5332348843060704, 1.5425827750653536, 1.5526522771511428, 1.5333010035748236, 1.5323955042963269, 1.5328251649435254, 1.532604401105516, 1.5327131034091703, 1.5326583205909179, 1.5326515309576825, 1.5326515309576825]), ([0, 180, 420, 480, 540, 660, 720, 780, 900, 960, 1000], [2.7854035060729516, 1.5692100930850716, 1.5489315736873142, 1.5553530763754941, 1.5512570358132678, 1.5520994350326485, 1.5516640430343716, 1.5518786679280658, 1.5518242791774401, 1.551851410193447, 1.551851410193447]), ([0, 180, 300, 360, 540, 660, 1000], [2.7854035060729516, 1.5935271754836777, 1.583400905451718, 1.5370873460442624, 1.538375378028532, 1.5379122079710883, 1.5379122079710883]), ([0, 180, 300, 360, 540, 600, 780, 840, 900, 1000], [2.7854035060729516, 1.6074850404868033, 1.5990228503282176, 1.5507558770353163, 1.5509415992008644, 1.550634954144213, 1.5506278429461844, 1.5506305467655264, 1.550628999913064, 1.550628999913064]), ([0, 180, 270, 330, 390, 450, 630, 690, 810, 990, 1000], [2.7854035060729516, 1.652359439146516, 1.5700314546969611, 1.5445822879624655, 1.5454488040930732, 1.5418155633172288, 1.5417978092512268, 1.5417932357894262, 1.541791684969536, 1.5417917675833257, 1.5417917675833257]), ([0, 180, 360, 420, 720, 780, 840, 1000], [2.7854035060729516, 1.5582446268850736, 1.5757893822902889, 1.5575826368106485, 1.5572951904018424, 1.5574369499813074, 1.5573656098711626, 1.5573656098711626]), ([0, 120, 240, 360, 480, 540, 600, 660, 720, 900, 1000], [2.7854035060729516, 1.70083344954099, 1.5513936044375072, 1.5448663173922697, 1.5427792594670444, 1.5435417759715506, 1.543092575287668, 1.5433004220323232, 1.5431926048252926, 1.5432056976241324, 1.5432056976241324]), ([0, 150, 270, 570, 690, 750, 1000], [2.7854035060729516, 1.5481337413327765, 1.5323085617902779, 1.5322274360152546, 1.5322450213930392, 1.5322360429189223, 1.5322360429189223]), ([0, 180, 300, 360, 480, 540, 600, 780, 900, 960, 1000], [2.7854035060729516, 1.6151343825659488, 1.6149218602152646, 1.56645154542626, 1.5713853640108224, 1.5681539057912663, 1.5695853528446064, 1.5693843494700521, 1.56943425556602, 1.569409277811651, 1.569409277811651]), ([0, 120, 240, 300, 360, 420, 540, 1000], [2.7854035060729516, 1.6778225304454026, 1.6058869904425577, 1.5686137104300701, 1.5618602409371092, 1.5600286232659248, 1.5594514389466076, 1.5594514389466076]), ([0, 120, 240, 300, 360, 420, 480, 660, 720, 780, 840, 1000], [2.7854035060729516, 1.6707881462626784, 1.6046557418646774, 1.5615502687798495, 1.557301736594245, 1.5539820818806824, 1.5541985235163915, 1.554014304576239, 1.5541004803836538, 1.554056137510414, 1.5540779550055561, 1.5540779550055561])]"
        self.expected_progress_curves = "[([0.0, 0.12, 0.24, 0.3, 0.36, 0.54, 0.6, 0.66, 0.9, 0.96, 1.0], [1.0, 0.10335985431848857, 0.018749800344495523, 0.007206596047030268, -0.005821016539941659, -0.00592492846855904, -0.00594426689612337, -0.0059522228193834995, -0.005952928150399661, -0.005952606411602032, -0.005952606411602032]), ([0.0, 0.12, 0.3, 0.42, 0.48, 0.66, 0.72, 0.78, 0.96, 1.0], [1.0, 0.004499473096081578, -0.003856495900910984, -0.002978794078084337, -0.003523108300557955, -0.003575829454484977, -0.003549764686439073, -0.0035628668283536253, -0.0035612358432319177, -0.0035612358432319177]), ([0.0, 0.18, 0.36, 0.54, 0.6, 0.66, 0.78, 0.84, 0.9, 1.0], [1.0, 0.05868910781962375, 0.00996897595920097, 0.010443380081621259, 0.010052501854786951, 0.010206723617213193, 0.010160199776125067, 0.01018298081728432, 0.010171490467368344, 0.010171490467368344]), ([0.0, 0.18, 0.36, 0.48, 0.54, 0.66, 0.72, 0.84, 1.0], [1.0, 0.027852880525764446, 0.013924130671882707, 0.010291618224255842, 0.011558522890599918, 0.011131027039866261, 0.011332561051800093, 0.011279847408948216, 0.011279847408948216]), ([0.0, 0.18, 0.36, 0.42, 0.54, 0.72, 0.9, 0.96, 1.0], [1.0, -0.0007622554071803494, 0.0013363588236106842, -0.008606570350093242, -0.007554784408409482, -0.007743018811763087, -0.007765501042498186, -0.007754288081077451, -0.007754288081077451]), ([0.0, 0.18, 0.3, 0.48, 0.66, 0.84, 0.9, 1.0], [1.0, 0.03416269279880432, 0.011601350743300888, 0.012221153926417516, 0.012118395350917365, 0.012106033430372344, 0.012112203731302047, 0.012112203731302047]), ([0.0, 0.18, 0.24, 0.3, 0.36, 0.48, 0.6, 0.66, 0.78, 0.84, 0.9, 0.96, 1.0], [1.0, 0.023008585645149734, -0.0058010239387525425, 0.00048088779939361705, -0.004464259905701267, -0.003581158100506169, -0.0033268298648916205, -0.003455545406278154, -0.003423700325224641, -0.0034396455461834763, -0.003431676739933249, -0.0034356621243562947, -0.0034356621243562947]), ([0.0, 0.18, 0.36, 0.42, 0.54, 0.6, 0.78, 1.0], [1.0, 0.0564298552358138, 0.021349326492984006, 0.02721262846631832, 0.02375790279451891, 0.0253024670858387, 0.025087525095856895, 0.025087525095856895]), ([0.0, 0.18, 0.48, 0.66, 0.78, 0.9, 1.0], [1.0, 0.010082590987918446, 0.008017472173155326, 0.008042585678110548, 0.008030819577867053, 0.008033461071172393, 0.008033461071172393]), ([0.0, 0.18, 0.3, 0.36, 0.42, 0.48, 0.54, 0.6, 0.66, 0.72, 1.0], [1.0, 0.04314346001501949, 0.03422179834377032, 0.016366068676214957, 0.018433506801848944, 0.015917658983176236, 0.01678100353096075, 0.016258384232320684, 0.016494742417614883, 0.01637132161289087, 0.01637132161289087]), ([0.0, 0.18, 0.36, 0.48, 0.6, 0.78, 1.0], [1.0, 0.016695410793770227, -0.0027435477440773317, -0.001861931045363356, -0.0023664922393132784, -0.002314092944383251, -0.002314092944383251]), ([0.0, 0.18, 0.36, 0.42, 0.6, 0.9, 0.96, 1.0], [1.0, -0.010875990932476279, 0.02347648241651325, 0.0005890448929663735, 0.002875504604577414, 0.0028014031421927012, 0.002838428540280455, 0.002838428540280455]), ([0.0, 0.18, 0.36, 0.42, 0.6, 0.72, 0.78, 0.9, 1.0], [1.0, -0.008545412968609209, -0.0008196668227004672, -0.012260112539361363, -0.011717677404225905, -0.011876241570372268, -0.01179856058654526, -0.011818218125342507, -0.011818218125342507]), ([0.0, 0.18, 0.24, 0.3, 0.42, 0.48, 0.54, 0.6, 0.66, 0.72, 0.9, 1.0], [1.0, -0.015751266264853264, -0.008168316404434883, 0.0, -0.015697630732231613, -0.016432166019848943, -0.016083628020357916, -0.01626271024946466, -0.016174531628260273, -0.016218971103936445, -0.01622447881147396, -0.01622447881147396]), ([0.0, 0.18, 0.42, 0.48, 0.54, 0.66, 0.72, 0.78, 0.9, 0.96, 1.0], [1.0, 0.013431595560777195, -0.0030182111171634346, 0.0021908712487867235, -0.0011318109486659052, -0.00044846202990842416, -0.0008016492651446171, -0.0006275469088387163, -0.0006716667193484642, -0.000649658210761812, -0.000649658210761812]), ([0.0, 0.18, 0.3, 0.36, 0.54, 0.66, 1.0], [1.0, 0.03315745900191473, 0.024943092798592092, -0.012626173668870585, -0.01158133026977199, -0.011957050890913763, -0.011957050890913763]), ([0.0, 0.18, 0.3, 0.36, 0.54, 0.6, 0.78, 0.84, 0.9, 1.0], [1.0, 0.044479990811786406, 0.03761551567677725, -0.0015383477796126182, -0.0013876911335749852, -0.0016364396640627973, -0.0016422082229267563, -0.001640014901777654, -0.0016412696987115778, -0.0016412696987115778]), ([0.0, 0.18, 0.27, 0.33, 0.39, 0.45, 0.63, 0.69, 0.81, 0.99, 1.0], [1.0, 0.08088181918307977, 0.014097878905396438, -0.006546324188810977, -0.005843411784200768, -0.008790673722055076, -0.00880507570810505, -0.008808785671391482, -0.008810043686677859, -0.008809976670894082, -0.008809976670894082]), ([0.0, 0.18, 0.36, 0.42, 0.72, 0.78, 0.84, 1.0], [1.0, 0.004536478733687362, 0.01876867335138026, 0.003999476572266581, 0.0037663018634833054, 0.0038812963377447803, 0.003823425691606983, 0.003823425691606983]), ([0.0, 0.12, 0.24, 0.36, 0.48, 0.54, 0.6, 0.66, 0.72, 0.9, 1.0], [1.0, 0.1202036298267978, -0.0010210273444517508, -0.0063159213117824, -0.00800892950050724, -0.007390380934813966, -0.007754769688476313, -0.007586165723800558, -0.0076736263602218, -0.0076630055646122784, -0.0076630055646122784]), ([0.0, 0.15, 0.27, 0.57, 0.69, 0.75, 1.0], [1.0, -0.003665407677036652, -0.016502693230862196, -0.01656850194645702, -0.01655423679922208, -0.01656152008063864, -0.01656152008063864]), ([0.0, 0.18, 0.3, 0.36, 0.48, 0.54, 0.6, 0.78, 0.9, 0.96, 1.0], [1.0, 0.05068508872585278, 0.05051269193913854, 0.01119387914720334, 0.015196161577599017, 0.012574823108212646, 0.013736003904269982, 0.013572951238137083, 0.013613434747540214, 0.01359317295117545, 0.01359317295117545]), ([0.0, 0.12, 0.24, 0.3, 0.36, 0.42, 0.54, 1.0], [1.0, 0.10153731779585118, 0.0431836627232366, 0.012947813723039249, 0.007469441984673437, 0.0059836453144187975, 0.0055154370451623875, 0.0055154370451623875]), ([0.0, 0.12, 0.24, 0.3, 0.36, 0.42, 0.48, 0.66, 0.72, 0.78, 0.84, 1.0], [1.0, 0.09583106983787777, 0.042184881664257545, 0.007217994531215365, 0.0037716120933569477, 0.0010787291858574432, 0.0012543052717952465, 0.0011048680326908426, 0.0011747733026212972, 0.0011388026443089007, 0.0011565008583769214, 0.0011565008583769214])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
