import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_SSCONT1_ALOE(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "SSCONT-1"
        self.expected_solver_name = "ALOE"
        self.expected_all_recommended_xs = "[[(600, 600), (599.5478845471159, 597.6234948266642), (598.9854931466446, 597.7286013820234), (598.2840709663377, 597.5139554739116), (597.411952419828, 597.4969254527642), (596.3275423764765, 597.1705808410154), (594.9803976786561, 596.752406551361), (594.9803976786561, 596.752406551361)], [(600, 600), (599.531122964027, 599.8394100357302), (598.9408094549597, 599.6802392753373), (598.2055754970447, 599.3567076404452), (597.2884980466814, 598.5707240416492), (596.1486891857113, 598.2679161287234), (594.7305408946756, 597.0258174722401), (594.7305408946756, 597.0258174722401)], [(600, 600), (599.530473384621, 600.0406952841537), (598.945001440669, 600.0247097817362), (598.2157850030947, 600.0462266858261), (597.3077727087264, 600.4056016764685), (596.1757185511776, 600.6281605255718), (594.7675020013168, 600.620059042839), (594.7675020013168, 600.620059042839)], [(600, 600), (599.5364840109689, 597.7313724173246), (598.9616412231529, 597.9097128292206), (598.2440936270514, 597.8325866327859), (596.2327582189782, 596.260043317129), (594.8477444327689, 595.5850078833494), (594.8477444327689, 595.5850078833494)], [(600, 600), (599.5384149694582, 600.6518052743465), (598.9667974757788, 601.0970571205572), (598.2518848163102, 601.7187171569632), (597.3591929524073, 601.8150508842651), (596.2450595209932, 601.8458886552901), (594.855234429275, 602.8368380047193), (594.855234429275, 602.8368380047193)], [(600, 600), (599.5459986101321, 599.6019366179091), (598.9778900877561, 599.0092963953332), (598.268462476813, 598.1128362511927), (597.3874136647937, 597.0994084320916), (596.293950047366, 595.9809368384783), (594.9238067718225, 592.6876740708262), (594.9238067718225, 592.6876740708262)], [(600, 600), (599.557802471425, 599.6644445718039), (599.0058115189174, 598.8271434616643), (598.3113834033122, 597.9532148655614), (597.4563611622083, 598.0828747862189), (596.393545576457, 598.0216610726663), (595.073453208189, 597.3116744487444), (595.073453208189, 597.3116744487444)], [(600, 600), (599.5388270369399, 599.5305308550694), (598.9644526495208, 598.2649849386937), (597.3277323381794, 595.472665863474), (596.1950491111667, 593.7773553323472), (594.7997571144944, 589.8942858072046), (594.7997571144944, 589.8942858072046)], [(600, 600), (599.5701319575628, 598.5320268617802), (599.0163418710342, 597.6799022987589), (598.3274916047529, 596.3512375416697), (597.4705971433023, 595.6055070851947), (596.4088439531092, 594.7677070335094), (595.0797881503252, 593.4464465618212), (595.0797881503252, 593.4464465618212)], [(600, 600), (599.5403430208623, 599.5359596729973), (598.9684497424306, 599.227521342894), (598.2552552267211, 598.8684196619994), (597.3658999962784, 598.594840156999), (596.2594228747997, 598.4662060388578), (594.8843077799439, 598.2793029697884), (594.8843077799439, 598.2793029697884)], [(600, 600), (599.5313039436164, 600.4644572564911), (598.9454426334997, 600.7911270005771), (598.2176801209907, 600.1574336086251), (594.7589274624236, 597.9773587372117), (594.7589274624236, 597.9773587372117)], [(600, 600), (598.1843619247173, 598.3954174397402), (597.2607751649035, 598.0807325965473), (596.109300099399, 596.9133966331972), (594.6710285025988, 595.9111409511139), (594.6710285025988, 595.9111409511139)], [(600, 600), (599.5566847743778, 599.421927395176), (599.0041062996191, 597.7100618103207), (598.316819095766, 596.4737793799354), (597.4591555173578, 595.1944973933022), (596.3912741710353, 593.7395387704883), (595.0615963344898, 593.2172115624937), (595.0615963344898, 593.2172115624937)], [(600, 600), (598.9176277812622, 600.2758557839948), (598.1695047466986, 600.687525914454), (597.2372014577879, 600.9805119427766), (596.0833085745028, 601.7794465216487), (594.6439753468263, 602.2315311923029), (594.6439753468263, 602.2315311923029)], [(600, 600), (598.9884348168424, 599.2500790050985), (598.2873352022286, 599.0229957746727), (597.4147126253852, 598.2606225820438), (596.3282702540498, 595.6057587053583), (594.9844563238023, 592.5883483581069), (594.9844563238023, 592.5883483581069)], [(600, 600), (599.5859126245316, 599.4104586746557), (599.0728892263812, 599.0233693675923), (598.4361190933895, 598.5283026281388), (597.643178836361, 597.531712731501), (596.6597560987522, 595.9572724814536), (595.4424093194896, 594.9374846276567), (595.4424093194896, 594.9374846276567)], [(600, 600), (599.5607784581935, 599.4509392324051), (599.0152773912864, 598.8557200263867), (598.3380344028685, 598.8323428318176), (597.4951539020642, 598.8336300357807), (596.4447415582106, 598.3441066441283), (595.1361718383039, 597.8124253973372), (595.1361718383039, 597.8124253973372)], [(600, 600), (599.5714602077207, 600.4108740513839), (599.0337355655184, 600.7551463459945), (598.3602813378816, 601.6928695673552), (597.518493085782, 602.2281497187461), (596.4672434602246, 602.6598223674714), (595.1754921991526, 603.7968950291131), (595.1754921991526, 603.7968950291131)], [(600, 600), (599.5751709274327, 599.3908566366113), (599.0464371048561, 599.4432994507268), (598.387719649955, 599.2708335199801), (595.3067826553089, 597.6123876246061), (595.3067826553089, 597.6123876246061)], [(600, 600), (599.6035740374843, 599.816524518599), (599.1093894952453, 598.877885816366), (598.494600039938, 597.7520910605372), (597.7266623556021, 596.5998896764413), (596.7687264547926, 595.5396772682448), (595.5747030147888, 594.5170972942318), (595.5747030147888, 594.5170972942318)], [(600, 600), (599.5124303589558, 599.8684638223922), (598.9038532161985, 599.9763390045268), (598.143439456949, 600.0817363160647), (597.1930427886343, 600.4644305417653), (596.0074066999159, 600.6644770120636), (594.5295243696389, 601.4340729618871), (594.5295243696389, 601.4340729618871)], [(600, 600), (599.549769049933, 599.0541997189189), (598.9889231525755, 598.2270053528785), (598.2934314269723, 597.953616571564), (597.4291705673022, 597.6890481054024), (596.3439556160746, 597.6378103162347), (596.3439556160746, 597.6378103162347)], [(600, 600), (599.5641880444703, 599.4291157612165), (599.02028097013, 598.3655198768088), (598.3439600046588, 597.5355839979825), (597.4993669799582, 597.4990729565912), (596.4463884453235, 596.797603687153), (595.1355157815449, 596.5088921149511), (595.1355157815449, 596.5088921149511)], [(600, 600), (599.5636861878897, 600.6555445555547), (599.0174685373154, 600.9141068625416), (598.3371890037433, 600.8557229034283), (597.4921609813931, 600.7586601750982), (596.443363845982, 600.6449431380697), (595.1419804185462, 600.3856563989439), (595.1419804185462, 600.3856563989439)]]"
        self.expected_all_intermediate_budgets = "[[0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 930, 1000], [0, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 330, 480, 630, 780, 930, 1000], [0, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000]]"
        self.expected_all_est_objectives = "[[618.5809976153716, 617.8328760145909, 617.5866951493366, 617.4002141660097, 616.9986616131891, 616.9688874875611, 616.2988253152213, 616.2988253152213], [619.371245290233, 619.0263408513159, 618.3871009232229, 617.9436221163096, 617.3218034677584, 616.7210969426787, 615.7254182564449, 615.7254182564449], [620.2040298994102, 620.0135885617987, 619.7469350147244, 619.433539461188, 619.3182757282156, 618.8150547917851, 618.194022546352, 618.194022546352], [620.3929887875448, 619.1415054491042, 618.9489461024248, 618.5957964430839, 616.9476853937638, 615.8688364205649, 615.8688364205649], [617.140803174291, 616.9450216642482, 616.9850553850752, 616.3853211582018, 615.9554916001213, 615.4508141460359, 615.0332682800488, 615.0332682800488], [617.6250759903628, 617.2738072504757, 617.2724589361178, 617.187161568923, 616.4979939660135, 615.5423792680523, 614.0177838269694, 614.0177838269694], [622.8299886318688, 622.4761536080149, 622.4453805276625, 622.0787286210466, 621.7553948360692, 621.1851357587685, 620.6611130349339, 620.6611130349339], [617.1638109984892, 616.9212623515181, 616.374105502157, 616.634560563609, 615.8495487283104, 614.6233786732573, 614.6233786732573], [625.4509909440814, 624.5267028976504, 623.8127784315343, 623.6566958639733, 623.0271075822885, 622.0380157690374, 621.1287228778968, 621.1287228778968], [616.3517529689802, 615.817983100305, 615.3058035688673, 615.034236712977, 614.5005086219048, 614.1052419941436, 613.2840165089626, 613.2840165089626], [620.885724515664, 620.5006492347777, 620.1475488627948, 619.8507432172933, 617.8620172887743, 617.8620172887743], [618.8018614763591, 616.7160866897309, 616.2408525960097, 615.0363326097018, 613.1848307035373, 613.1848307035373], [619.9876951863847, 619.6094138616737, 619.4878552800402, 618.4771142783352, 617.4758313856837, 616.2611379577479, 615.3133875108082, 615.3133875108082], [620.5752955225382, 620.149325491265, 619.4544412368282, 618.8402355253263, 618.7730964891033, 618.4410348582412, 618.4410348582412], [624.383736629565, 623.472563921164, 622.9965169694428, 621.8558015300337, 619.3572450851422, 617.3158358634806, 617.3158358634806], [621.6851306868389, 621.4837772487232, 621.1616970164964, 621.1669111702532, 620.165445336147, 619.1429779368505, 618.4393862566042, 618.4393862566042], [619.7087176057688, 619.2197416596796, 619.2398963797187, 618.8835096056536, 618.5083737700432, 617.609072858082, 616.6810998865947, 616.6810998865947], [623.808754566687, 623.3643484196559, 623.2502372055395, 623.8116913973115, 623.8535588002636, 623.5229439339157, 623.0864961153561, 623.0864961153561], [618.1205002744614, 617.7392035625272, 617.5252462354525, 617.2366656589448, 615.6762479954018, 615.6762479954018], [621.6456203016469, 621.2056949053243, 620.8455066606796, 620.3819499255183, 619.6810081705016, 619.2639667715099, 618.1139675135533, 618.1139675135533], [617.7541201292993, 617.4726811392115, 617.2503552970444, 617.0791318142641, 617.360451080476, 616.9172881721641, 616.3800827548392, 616.3800827548392], [626.0524700155847, 625.191700520736, 624.8240067088611, 624.4300597782823, 624.1016159084944, 623.5160294390294, 623.5160294390294], [616.5518744333754, 615.9785148741815, 615.9515513135681, 615.3841286502508, 615.0178078081748, 614.1025551988163, 613.4135658583332, 613.4135658583332], [619.165760431194, 619.1473121755864, 619.0687819145369, 618.740787370795, 618.3869588846713, 617.7592991341471, 617.1902472310728, 617.1902472310728]]"
        self.expected_objective_curves = "[([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 617.8328760145909, 617.5866951493366, 617.4002141660097, 616.9986616131891, 616.9688874875611, 616.2988253152213, 616.2988253152213]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 619.0263408513159, 618.3871009232229, 617.9436221163096, 617.3218034677584, 616.7210969426787, 615.7254182564449, 615.7254182564449]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 620.0135885617987, 619.7469350147244, 619.433539461188, 619.3182757282156, 618.8150547917851, 618.194022546352, 618.194022546352]), ([0, 180, 330, 480, 780, 930, 1000], [624.4131899421741, 619.1415054491042, 618.9489461024248, 618.5957964430839, 616.9476853937638, 615.8688364205649, 615.8688364205649]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 616.9450216642482, 616.9850553850752, 616.3853211582018, 615.9554916001213, 615.4508141460359, 615.0332682800488, 615.0332682800488]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 617.2738072504757, 617.2724589361178, 617.187161568923, 616.4979939660135, 615.5423792680523, 614.0177838269694, 614.0177838269694]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 622.4761536080149, 622.4453805276625, 622.0787286210466, 621.7553948360692, 621.1851357587685, 620.6611130349339, 620.6611130349339]), ([0, 180, 330, 630, 780, 930, 1000], [624.4131899421741, 616.9212623515181, 616.374105502157, 616.634560563609, 615.8495487283104, 614.6233786732573, 614.6233786732573]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 624.5267028976504, 623.8127784315343, 623.6566958639733, 623.0271075822885, 622.0380157690374, 621.1287228778968, 621.1287228778968]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 615.817983100305, 615.3058035688673, 615.034236712977, 614.5005086219048, 614.1052419941436, 613.2840165089626, 613.2840165089626]), ([0, 180, 330, 480, 930, 1000], [624.4131899421741, 620.5006492347777, 620.1475488627948, 619.8507432172933, 617.8620172887743, 617.8620172887743]), ([0, 480, 630, 780, 930, 1000], [624.4131899421741, 616.7160866897309, 616.2408525960097, 615.0363326097018, 622.0530402393463, 622.0530402393463]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 619.6094138616737, 619.4878552800402, 618.4771142783352, 617.4758313856837, 616.2611379577479, 615.3133875108082, 615.3133875108082]), ([0, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 620.149325491265, 619.4544412368282, 618.8402355253263, 618.7730964891033, 618.4410348582412, 618.4410348582412]), ([0, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 623.472563921164, 622.9965169694428, 621.8558015300337, 619.3572450851422, 617.3158358634806, 617.3158358634806]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 621.4837772487232, 621.1616970164964, 621.1669111702532, 620.165445336147, 619.1429779368505, 618.4393862566042, 618.4393862566042]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 619.2197416596796, 619.2398963797187, 618.8835096056536, 618.5083737700432, 617.609072858082, 616.6810998865947, 616.6810998865947]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 623.3643484196559, 623.2502372055395, 623.8116913973115, 623.8535588002636, 623.5229439339157, 623.0864961153561, 623.0864961153561]), ([0, 180, 330, 480, 930, 1000], [624.4131899421741, 617.7392035625272, 617.5252462354525, 617.2366656589448, 615.6762479954018, 615.6762479954018]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 621.2056949053243, 620.8455066606796, 620.3819499255183, 619.6810081705016, 619.2639667715099, 618.1139675135533, 618.1139675135533]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 617.4726811392115, 617.2503552970444, 617.0791318142641, 617.360451080476, 616.9172881721641, 616.3800827548392, 616.3800827548392]), ([0, 180, 330, 480, 630, 780, 1000], [624.4131899421741, 625.191700520736, 624.8240067088611, 624.4300597782823, 624.1016159084944, 623.5160294390294, 623.5160294390294]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 615.9785148741815, 615.9515513135681, 615.3841286502508, 615.0178078081748, 614.1025551988163, 613.4135658583332, 613.4135658583332]), ([0, 180, 330, 480, 630, 780, 930, 1000], [624.4131899421741, 619.1473121755864, 619.0687819145369, 618.740787370795, 618.3869588846713, 617.7592991341471, 617.1902472310728, 617.1902472310728])]"
        self.expected_progress_curves = "[([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -1.7880917552386761, -1.8923990646264173, -1.9714114184205185, -2.1415500127391205, -2.1541653674313883, -2.438072007564006, -2.438072007564006]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -1.2824183925298949, -1.5532655880815767, -1.7411684174580024, -2.004634183127937, -2.259154701195042, -2.6810256888874333, -2.6810256888874333]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -0.8641196255915674, -0.9771012499159818, -1.109887552903815, -1.158725019796017, -1.3719407051517098, -1.6350732702974637, -1.6350732702974637]), ([0.0, 0.18, 0.33, 0.48, 0.78, 0.93, 1.0], [1.0, -1.233622929407234, -1.3152106975258115, -1.4648408921349516, -2.1631487356355064, -2.620259134991219, -2.620259134991219]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -2.1642773629901115, -2.147314997942255, -2.4014235513762943, -2.5835431675877327, -2.7973759822946507, -2.9742909743762236, -2.9742909743762236]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -2.0249702733451054, -2.025541556749821, -2.0616822164260324, -2.35368386449258, -2.758579662761749, -3.4045537038389564, -3.4045537038389564]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.17927395375033647, 0.16623534000665077, 0.010884217077222447, -0.1261129338196124, -0.3677328092950503, -0.5897622522607858, -0.5897622522607858]), ([0.0, 0.18, 0.33, 0.63, 0.78, 0.93, 1.0], [1.0, -2.174344229808631, -2.406175646563877, -2.295820332602237, -2.6284313675539908, -3.147961994608693, -3.147961994608693]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 1.0480956590763126, 0.7456044801224241, 0.679471993961045, 0.4127142196849507, -0.006365897167812332, -0.3916350561754431, -0.3916350561754431]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -2.641805785273167, -2.8588172446835776, -2.973880647468987, -3.2000222733296897, -3.3674975090266517, -3.715452337568694, -3.715452337568694]), ([0.0, 0.18, 0.33, 0.48, 0.93, 1.0], [1.0, -0.6577510751578878, -0.8073603866180259, -0.9331175134417686, -1.7757445409291344, -1.7757445409291344]), ([0.0, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -2.2612775550724202, -2.462635160969942, -2.972992611967523, 0.0, 0.0]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -1.0353692288013463, -1.0868738352624798, -1.5151267551912435, -1.9393722559964688, -2.454040213914738, -2.855603913795375, -2.855603913795375]), ([0.0, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -0.8066076256943879, -1.1010314300845305, -1.3612715795826624, -1.3897185192588062, -1.530413675360229, -1.530413675360229]), ([0.0, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.60145493318366, 0.39975291777726524, -0.08357042312879265, -1.1422136277940993, -2.0071626686179127, -2.0071626686179127]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -0.2411978316210305, -0.37766384978965223, -0.3754546027446181, -0.7997776161985437, -1.2329990334973784, -1.5311121910666983, -1.5311121910666983]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -1.200474095466052, -1.1919345015517295, -1.342936267938913, -1.5018820480141513, -1.8829175860920087, -2.2761015313203314, -2.2761015313203314]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5556038156132677, 0.5072546731924782, 0.7451439016169634, 0.7628832013325466, 0.6228010421577388, 0.4378772561637105, 0.4378772561637105]), ([0.0, 0.18, 0.33, 0.48, 0.93, 1.0], [1.0, -1.8277809545938677, -1.9184350884474712, -2.040707237608993, -2.701859223719629, -2.701859223719629]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -0.3590218590823734, -0.5116343159164407, -0.7080442023765703, -1.005034581493961, -1.1817358299325875, -1.6689927427371782, -1.6689927427371782]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -1.9407070215278186, -2.0349069114334344, -2.107454632696689, -1.988259114770509, -2.1760280972976958, -2.4036430730262524, -2.4036430730262524]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 1.0], [1.0, 1.3298564398814159, 1.1740638596758624, 1.0071477822309205, 0.8679854785031798, 0.619871357283057, 0.619871357283057]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -2.5737881617791207, -2.585212674631488, -2.8256307560088874, -2.980841606251601, -3.3686359094103775, -3.660562027341616, -3.660562027341616]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, -1.2311626081508118, -1.2644360318473873, -1.4034079552592225, -1.5533257700909466, -1.819266421979342, -2.0603748153971355, -2.0603748153971355])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
