import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_MM11_SPSA(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "MM1-1"
        self.expected_solver_name = "SPSA"
        self.expected_all_recommended_xs = "[[(5,), (4.9,), (4.828220242877966,), (4.7711583208381505,), (4.723356247271821,), (4.68199124553989,), (4.645378954588569,), (4.612444103015851,), (4.582458610463401,), (4.554898657638183,), (4.529364764236633,), (4.505556753022127,), (4.483237995267522,), (4.462218240075169,), (4.4423416198344805,), (4.4423416198344805,)], [(5,), (4.9,), (4.828268158857998,), (4.77125483623946,), (4.723516406221871,), (4.682219351774141,), (4.645691726023226,), (4.612860645066556,), (4.582980956756656,), (4.555521245546239,), (4.530091984205564,), (4.506399094048835,), (4.484204055878755,), (4.463313252399071,), (4.44356775526693,), (4.44356775526693,)], [(5,), (4.9,), (4.82823275038073,), (4.77117250564012,), (4.723397826999347,), (4.68205529632045,), (4.645470553365282,), (4.612599470427855,), (4.582700704662216,), (4.555214194443706,), (4.529748789482907,), (4.506008016885367,), (4.483762945089936,), (4.462827836579088,), (4.443047831595067,), (4.443047831595067,)], [(5,), (4.9,), (4.82829756612476,), (4.771339855695114,), (4.723662803100289,), (4.682430559303078,), (4.645982100052345,), (4.613221916775132,), (4.5834046662460315,), (4.5560079333949774,), (4.530632771098154,), (4.506973585550738,), (4.484800768623456,), (4.4639247852540995,), (4.444193643993295,), (4.444193643993295,)], [(5,), (4.9,), (4.828242201209379,), (4.77124633252754,), (4.72354459954432,), (4.682284832130805,), (4.645777394471522,), (4.6129551554667785,), (4.583085669022961,), (4.555644025130443,), (4.530235421844773,), (4.506549316233128,), (4.484344301558645,), (4.463436572342113,), (4.443680365996481,), (4.443680365996481,)], [(5,), (4.9,), (4.828231076513505,), (4.7711855092155036,), (4.723394504996676,), (4.682031945761324,), (4.645431670927897,), (4.612525516390906,), (4.582584649842427,), (4.5550807905705515,), (4.529610075601041,), (4.505863936314328,), (4.48360278121546,), (4.462634686662727,), (4.442809303376692,), (4.442809303376692,)], [(5,), (4.9,), (4.828219519984448,), (4.771140758673957,), (4.723326734506081,), (4.681939665803399,), (4.645321340494433,), (4.61239575863478,), (4.582426092470732,), (4.554874501548695,), (4.529352338311446,), (4.505558750506955,), (4.483254550686463,), (4.462247367333755,), (4.442377777121177,), (4.442377777121177,)], [(5,), (4.9,), (4.828155661607367,), (4.771043245392106,), (4.723177248151974,), (4.681738456913554,), (4.645066791335422,), (4.612087630607207,), (4.58207093833194,), (4.554481682758663,), (4.528920891992599,), (4.505093949146714,), (4.482765194735492,), (4.461742626586988,), (4.441866368917596,), (4.441866368917596,)], [(5,), (4.9,), (4.828281141238866,), (4.771301910273989,), (4.7235850644093755,), (4.682297832549166,), (4.645788402306378,), (4.612970315545531,), (4.583087744250104,), (4.555636424495865,), (4.530221829011507,), (4.50652503564759,), (4.484315641542501,), (4.463404679389659,), (4.443634821147833,), (4.443634821147833,)], [(5,), (4.9,), (4.828246904978977,), (4.7711933083053015,), (4.72336757968074,), (4.681961154914754,), (4.645321235876414,), (4.612375186030644,), (4.5824035533924885,), (4.5548737532009484,), (4.529374807930149,), (4.505599879463623,), (4.483311991698891,), (4.462319081864509,), (4.4424676346064285,), (4.4424676346064285,)], [(5,), (4.9,), (4.828311547131776,), (4.7713376127506155,), (4.723601555423764,), (4.682286296301101,), (4.645724159829698,), (4.612839120480522,), (4.582895010400274,), (4.555369325293891,), (4.529867377348102,), (4.506087998607819,), (4.483798329936685,), (4.462815384673345,), (4.4429841492813145,), (4.4429841492813145,)], [(5,), (4.9,), (4.828276895912191,), (4.771274779719935,), (4.723555665676462,), (4.682295065746324,), (4.645812050418638,), (4.613017741917761,), (4.583172423042993,), (4.555760161229551,), (4.530388678120109,), (4.5067529209111115,), (4.484603364651565,), (4.46375113431154,), (4.444041286480591,), (4.444041286480591,)], [(5,), (4.9,), (4.828255419623819,), (4.771229959083762,), (4.723432008548091,), (4.682065578864027,), (4.645474128988062,), (4.612555286292583,), (4.582575415301815,), (4.555021501994734,), (4.529501329560208,), (4.505713818390017,), (4.483419931658483,), (4.462416983638283,), (4.442551386809219,), (4.442551386809219,)], [(5,), (4.9,), (4.828255589877797,), (4.771274554146995,), (4.723565437549014,), (4.682297307552591,), (4.645807968597602,), (4.613012233687152,), (4.583177818350147,), (4.555777003983815,), (4.53040738826002,), (4.506760901582198,), (4.484597109082118,), (4.463725436098652,), (4.443994002393678,), (4.443994002393678,)], [(5,), (4.9,), (4.828163540169265,), (4.771033258907645,), (4.723194133217384,), (4.681790632915431,), (4.6451456589516535,), (4.612184347023451,), (4.582174919382025,), (4.554587307548243,), (4.529030269059863,), (4.505200072104171,), (4.482858041724183,), (4.461815532146914,), (4.441920281786071,), (4.441920281786071,)], [(5,), (4.9,), (4.828280110289256,), (4.771329632474163,), (4.723628453850246,), (4.682363070586896,), (4.645863920934447,), (4.613059862474444,), (4.583215903989477,), (4.555793768087839,), (4.530396614470028,), (4.506725525446952,), (4.4845480643912365,), (4.4636746061046795,), (4.44395403161846,), (4.44395403161846,)], [(5,), (4.9,), (4.828205504905848,), (4.771123959502676,), (4.72329653506126,), (4.681901832721469,), (4.645283264138661,), (4.612358435232454,), (4.582382518703429,), (4.554826740649638,), (4.529303629382474,), (4.505511702932691,), (4.483208643252983,), (4.462204210077866,), (4.4423440147637825,), (4.4423440147637825,)], [(5,), (4.9,), (4.828254157463511,), (4.771231798872084,), (4.723463126482671,), (4.682121689124852,), (4.6455553734852515,), (4.612675395068497,), (4.582758594629142,), (4.555280548872287,), (4.529833671899893,), (4.506122001200091,), (4.483906040318793,), (4.462986116199054,), (4.443203579913667,), (4.443203579913667,)], [(5,), (4.9,), (4.828310483084614,), (4.7713806689246665,), (4.7237389299994055,), (4.682536734830155,), (4.646119398504414,), (4.613412194446083,), (4.583669677963205,), (4.556355914808901,), (4.531065207709116,), (4.507494478019329,), (4.485413444645929,), (4.464631882472151,), (4.444992694442772,), (4.444992694442772,)], [(5,), (4.9,), (4.828299564649134,), (4.771340737717012,), (4.72363253199955,), (4.68234869070315,), (4.645830321367124,), (4.6130210003565555,), (4.583172541256965,), (4.555734038266642,), (4.530322222338702,), (4.506638169643039,), (4.48444624223147,), (4.463550202881752,), (4.443796219704588,), (4.443796219704588,)], [(5,), (4.9,), (4.828319956280656,), (4.771341828599495,), (4.723637139477689,), (4.682381176057018,), (4.64588517371498,), (4.613068346687288,), (4.583201519841254,), (4.555754277728587,), (4.530331703160957,), (4.506631702842233,), (4.4844186528645915,), (4.463500933324736,), (4.443722278694918,), (4.443722278694918,)], [(5,), (4.9,), (4.828260789835906,), (4.771267995805776,), (4.723590269309351,), (4.68236739145696,), (4.645914881549353,), (4.613162102844549,), (4.583366088134043,), (4.55599010160934,), (4.530635894681708,), (4.50700669811416,), (4.4848744570120695,), (4.464050790267286,), (4.444378907326544,), (4.444378907326544,)], [(5,), (4.9,), (4.828278678479007,), (4.771349030306805,), (4.723690921794499,), (4.68247804247707,), (4.646025634705291,), (4.613253295860641,), (4.583421457007576,), (4.555999261102104,), (4.530593356797572,), (4.50690123459666,), (4.484686929730878,), (4.463760709640521,), (4.44396990087918,), (4.44396990087918,)], [(5,), (4.9,), (4.8282880789992655,), (4.771304303104954,), (4.723573825937778,), (4.682304223539688,), (4.645809330432925,), (4.6130020065233275,), (4.583150067733115,), (4.555722681171536,), (4.53032239148079,), (4.50664153595881,), (4.48444446930218,), (4.463544764203705,), (4.443787639986068,), (4.443787639986068,)]]"
        self.expected_all_intermediate_budgets = "[[0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000]]"
        self.expected_all_est_objectives = "[[2.7852321578182706, 2.6946279475220236, 2.6311375353093958, 2.5815909136385455, 2.5407237828666345, 2.505841251941293, 2.4753383640165523, 2.4482028810050203, 2.423744531241904, 2.401474586372536, 2.381022748133891, 2.3621138063084017, 2.344526730196806, 2.3280879148376177, 2.3126552972698806, 2.3126552972698806], [2.7857037031168543, 2.695126537700335, 2.63168194454411, 2.5821814252519157, 2.541376437373668, 2.5065523009671264, 2.476119059122977, 2.4490652673952376, 2.4246952701571605, 2.402510211644764, 2.3821422375656103, 2.36332187487213, 2.3458294060330154, 2.329489039760201, 2.3141547052234297, 2.3141547052234297], [2.7866293625352507, 2.6961046932671304, 2.6326820691530157, 2.5831889418536957, 2.542409040822468, 2.5076066276640705, 2.477184488773275, 2.4501553002503287, 2.425825610132746, 2.4036715010325467, 2.3833349425035237, 2.364534830402029, 2.347062013649749, 2.330742520884411, 2.3154374476605555, 2.3154374476605555], [2.7889080044387127, 2.6984477573213246, 2.635135828933808, 2.585775437901453, 2.54509781446391, 2.510395608353966, 2.4800918861536076, 2.4531499186231587, 2.4288814940969723, 2.406794740252417, 2.3865245574018488, 2.3677937136480938, 2.3503799896464534, 2.3341097150698054, 2.3188431071073454, 2.3188431071073454], [2.7833651638972787, 2.692599781727439, 2.629004094601332, 2.5794164287265913, 2.5385477333860207, 2.50367268131143, 2.473184727194505, 2.4460715118093446, 2.421644803109403, 2.3994126371985356, 2.379007083755229, 2.3601407946557873, 2.342591322237028, 2.326194656663775, 2.3108117589360293, 2.3108117589360293], [2.787955763524055, 2.6974232257205517, 2.6339966545686377, 2.584531643600397, 2.543736526240428, 2.508904663287842, 2.478455710249972, 2.4513849491432467, 2.4270097098749273, 2.404832813497743, 2.384479226847435, 2.3656653877957323, 2.3481693007493503, 2.3318143314711266, 2.3164656772875185, 2.3164656772875185], [2.7843462630059106, 2.6937443851097407, 2.6302528723982768, 2.580691384896225, 2.5398194950870128, 2.5049162090353296, 2.4744062850681607, 2.447278501046964, 2.4228353312890767, 2.4005765335493097, 2.3801373142152853, 2.3612437490432767, 2.3436757325094892, 2.3272531489548056, 2.311830552690829, 2.311830552690829], [2.7907221687784363, 2.7003710275094375, 2.6370425306039538, 2.5876457442612764, 2.5468936452724757, 2.512101923612372, 2.481692348994331, 2.454648510641304, 2.4302871385411304, 2.4081143503971427, 2.3877595588028, 2.368949226681737, 2.351469574584122, 2.335143543542223, 2.319825244786257, 2.319825244786257], [2.789502875694011, 2.698992211223711, 2.6356220111466024, 2.586200489101941, 2.5454473160694437, 2.510661975842597, 2.480277916983691, 2.4532669215479244, 2.428928192223854, 2.406779509623768, 2.3864578005189134, 2.3676673221475277, 2.3501918404481987, 2.333862225664954, 2.3185349953784105, 2.3185349953784105], [2.7891645344327056, 2.6987272929089374, 2.63539935834784, 2.5859999527459054, 2.5452368917962325, 2.510424903770189, 2.480002860981241, 2.452967966027958, 2.4286297089055737, 2.4064889712633875, 2.3861632089218143, 2.3673768084373803, 2.3499094991169045, 2.3335810179783176, 2.3182545152861813, 2.3182545152861813], [2.7863020842335002, 2.6957365465549477, 2.632359608991268, 2.582924542253411, 2.542149010765322, 2.5073364741393958, 2.476909556785205, 2.4498432317920544, 2.425443644803373, 2.4032239896902095, 2.3828214359654583, 2.3639575290575428, 2.346415427338058, 2.330024327256924, 2.314643666672037, 2.314643666672037], [2.781108319206661, 2.6903567662358445, 2.626814150826054, 2.5772362598389402, 2.536366635758417, 2.5015020179383525, 2.471044873252649, 2.443966942776274, 2.41957400525573, 2.3973758743575866, 2.3770089753457886, 2.3581929919474565, 2.340697972628271, 2.3243478080082327, 2.309001475475896, 2.309001475475896], [2.781564747274972, 2.6908194537679755, 2.6272472886782183, 2.577651749222704, 2.5367259740050447, 2.501782182510058, 2.471248939611748, 2.4440812696641565, 2.419592680196822, 2.397297277753615, 2.3768254350104034, 2.357898300391566, 2.3402973878942364, 2.323840070091848, 2.3083850560827495, 2.3083850560827495], [2.7819442310007103, 2.6911520220524467, 2.627542170374361, 2.5779420520119936, 2.5370560952495174, 2.5021642526634604, 2.471688773838016, 2.444597226000344, 2.4201973923231024, 2.3979942907768703, 2.377613445167134, 2.358770125968657, 2.341245187124964, 2.324862359404146, 2.309481357833911, 2.309481357833911], [2.784695397913865, 2.6941506397079666, 2.630651138520293, 2.5810796999217187, 2.540207412996507, 2.5053073519229345, 2.4747946817980204, 2.447653019180018, 2.4231911968942397, 2.4009147101238777, 2.380461861453486, 2.3615507563388936, 2.3439589834334096, 2.3275148967439416, 2.312078558646982, 2.312078558646982], [2.782112928233372, 2.691385107044398, 2.627845848070547, 2.578309053775125, 2.537445817379649, 2.502563145371149, 2.47207758849888, 2.444975238690294, 2.420562527420086, 2.398339425639676, 2.3779367288856927, 2.359078526203106, 2.3415521583218855, 2.3251781702084435, 2.3098168977590436, 2.3098168977590436], [2.784512429482461, 2.6939121553758025, 2.630412812909591, 2.5808671467890543, 2.540013551880384, 2.5051416839732457, 2.4746721838707315, 2.4475769746870606, 2.4231593933877065, 2.4009312495842017, 2.3805284143765424, 2.3616691356427215, 2.344128335112401, 2.3277303050264715, 2.3123354550025574, 2.3123354550025574], [2.783456075233837, 2.6926859638137235, 2.6290922900931992, 2.5794798302087445, 2.538559923566091, 2.503618547563523, 2.473091472929897, 2.4459481138670003, 2.4215012872568953, 2.399255554764161, 2.378832381977748, 2.3599586313945666, 2.3424157047380487, 2.3260190553456037, 2.310629335044963, 2.310629335044963], [2.7872953386099404, 2.6967682367804104, 2.6334015862692053, 2.584014507733759, 2.543338542708797, 2.508636376650595, 2.4783365765941374, 2.451417383112237, 2.4271870429887956, 2.405148738232768, 2.38492369167822, 2.366231787339432, 2.3488574771992656, 2.3326263220606673, 2.3173962802049766, 2.3173962802049766], [2.7844968268172887, 2.6937505295808273, 2.630216016515218, 2.5806682838550072, 2.539806357623821, 2.504924316429398, 2.474435312795564, 2.4473368142517744, 2.4229338458847547, 2.400719643253291, 2.3803266369046066, 2.3614761612436452, 2.343949671543553, 2.3275690397720235, 2.3121939115494126, 2.3121939115494126], [2.781707203439503, 2.690882938823014, 2.627316106755544, 2.5777162493449337, 2.536820566461709, 2.5019249005425825, 2.471434916842728, 2.4443165863067993, 2.41988398230298, 2.3976380281825542, 2.377215259323825, 2.3583334754280076, 2.340774766258477, 2.324362379308864, 2.3089563745011645, 2.3089563745011645], [2.7902297278963424, 2.6998555701080558, 2.636559035194881, 2.587209682130675, 2.5465709902414138, 2.511918124929099, 2.481651573867822, 2.454757269156069, 2.4305384391226825, 2.4084958476118805, 2.38825953320312, 2.3695560273693443, 2.3521778873534167, 2.3359489583146784, 2.320730664499856, 2.320730664499856], [2.7850791792196157, 2.694451154269688, 2.6309949365134444, 2.5815645734445707, 2.540829095451775, 2.5060793415907594, 2.4757130517514274, 2.4487086002621608, 2.424371560984128, 2.402210542598297, 2.381857940452165, 2.3630370811157695, 2.3455280336743742, 2.329165539884076, 2.3138017415038012, 2.3138017415038012], [2.7868278653888137, 2.6962083579518503, 2.6327579746304384, 2.583267093190155, 2.5424487818251245, 2.5076302263225942, 2.4772099281630555, 2.4501751177652444, 2.4258283649340577, 2.403669216479953, 2.383328487793272, 2.364520666494285, 2.3470328511668446, 2.330690911394335, 2.315352627562879, 2.315352627562879]]"
        self.expected_objective_curves = "[([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6946279475220236, 2.6311375353093958, 2.5815909136385455, 2.5407237828666345, 2.505841251941293, 2.4753383640165523, 2.4482028810050203, 2.423744531241904, 2.401474586372536, 2.381022748133891, 2.3621138063084017, 2.344526730196806, 2.3280879148376177, 2.3126552972698806, 2.3126552972698806]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.695126537700335, 2.63168194454411, 2.5821814252519157, 2.541376437373668, 2.5065523009671264, 2.476119059122977, 2.4490652673952376, 2.4246952701571605, 2.402510211644764, 2.3821422375656103, 2.36332187487213, 2.3458294060330154, 2.329489039760201, 2.3141547052234297, 2.3141547052234297]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6961046932671304, 2.6326820691530157, 2.5831889418536957, 2.542409040822468, 2.5076066276640705, 2.477184488773275, 2.4501553002503287, 2.425825610132746, 2.4036715010325467, 2.3833349425035237, 2.364534830402029, 2.347062013649749, 2.330742520884411, 2.3154374476605555, 2.3154374476605555]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6984477573213246, 2.635135828933808, 2.585775437901453, 2.54509781446391, 2.510395608353966, 2.4800918861536076, 2.4531499186231587, 2.4288814940969723, 2.406794740252417, 2.3865245574018488, 2.3677937136480938, 2.3503799896464534, 2.3341097150698054, 2.3188431071073454, 2.3188431071073454]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.692599781727439, 2.629004094601332, 2.5794164287265913, 2.5385477333860207, 2.50367268131143, 2.473184727194505, 2.4460715118093446, 2.421644803109403, 2.3994126371985356, 2.379007083755229, 2.3601407946557873, 2.342591322237028, 2.326194656663775, 2.3108117589360293, 2.3108117589360293]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6974232257205517, 2.6339966545686377, 2.584531643600397, 2.543736526240428, 2.508904663287842, 2.478455710249972, 2.4513849491432467, 2.4270097098749273, 2.404832813497743, 2.384479226847435, 2.3656653877957323, 2.3481693007493503, 2.3318143314711266, 2.3164656772875185, 2.3164656772875185]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6937443851097407, 2.6302528723982768, 2.580691384896225, 2.5398194950870128, 2.5049162090353296, 2.4744062850681607, 2.447278501046964, 2.4228353312890767, 2.4005765335493097, 2.3801373142152853, 2.3612437490432767, 2.3436757325094892, 2.3272531489548056, 2.311830552690829, 2.311830552690829]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.7003710275094375, 2.6370425306039538, 2.5876457442612764, 2.5468936452724757, 2.512101923612372, 2.481692348994331, 2.454648510641304, 2.4302871385411304, 2.4081143503971427, 2.3877595588028, 2.368949226681737, 2.351469574584122, 2.335143543542223, 2.319825244786257, 2.319825244786257]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.698992211223711, 2.6356220111466024, 2.586200489101941, 2.5454473160694437, 2.510661975842597, 2.480277916983691, 2.4532669215479244, 2.428928192223854, 2.406779509623768, 2.3864578005189134, 2.3676673221475277, 2.3501918404481987, 2.333862225664954, 2.3185349953784105, 2.3185349953784105]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6987272929089374, 2.63539935834784, 2.5859999527459054, 2.5452368917962325, 2.510424903770189, 2.480002860981241, 2.452967966027958, 2.4286297089055737, 2.4064889712633875, 2.3861632089218143, 2.3673768084373803, 2.3499094991169045, 2.3335810179783176, 2.3182545152861813, 2.3182545152861813]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6957365465549477, 2.632359608991268, 2.582924542253411, 2.542149010765322, 2.5073364741393958, 2.476909556785205, 2.4498432317920544, 2.425443644803373, 2.4032239896902095, 2.3828214359654583, 2.3639575290575428, 2.346415427338058, 2.330024327256924, 2.314643666672037, 2.314643666672037]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6903567662358445, 2.626814150826054, 2.5772362598389402, 2.536366635758417, 2.5015020179383525, 2.471044873252649, 2.443966942776274, 2.41957400525573, 2.3973758743575866, 2.3770089753457886, 2.3581929919474565, 2.340697972628271, 2.3243478080082327, 2.309001475475896, 2.309001475475896]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6908194537679755, 2.6272472886782183, 2.577651749222704, 2.5367259740050447, 2.501782182510058, 2.471248939611748, 2.4440812696641565, 2.419592680196822, 2.397297277753615, 2.3768254350104034, 2.357898300391566, 2.3402973878942364, 2.323840070091848, 2.3133632278407403, 2.3133632278407403]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6911520220524467, 2.627542170374361, 2.5779420520119936, 2.5370560952495174, 2.5021642526634604, 2.471688773838016, 2.444597226000344, 2.4201973923231024, 2.3979942907768703, 2.377613445167134, 2.358770125968657, 2.341245187124964, 2.324862359404146, 2.309481357833911, 2.309481357833911]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6941506397079666, 2.630651138520293, 2.5810796999217187, 2.540207412996507, 2.5053073519229345, 2.4747946817980204, 2.447653019180018, 2.4231911968942397, 2.4009147101238777, 2.380461861453486, 2.3615507563388936, 2.3439589834334096, 2.3275148967439416, 2.312078558646982, 2.312078558646982]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.691385107044398, 2.627845848070547, 2.578309053775125, 2.537445817379649, 2.502563145371149, 2.47207758849888, 2.444975238690294, 2.420562527420086, 2.398339425639676, 2.3779367288856927, 2.359078526203106, 2.3415521583218855, 2.3251781702084435, 2.3098168977590436, 2.3098168977590436]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6939121553758025, 2.630412812909591, 2.5808671467890543, 2.540013551880384, 2.5051416839732457, 2.4746721838707315, 2.4475769746870606, 2.4231593933877065, 2.4009312495842017, 2.3805284143765424, 2.3616691356427215, 2.344128335112401, 2.3277303050264715, 2.3123354550025574, 2.3123354550025574]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6926859638137235, 2.6290922900931992, 2.5794798302087445, 2.538559923566091, 2.503618547563523, 2.473091472929897, 2.4459481138670003, 2.4215012872568953, 2.399255554764161, 2.378832381977748, 2.3599586313945666, 2.3424157047380487, 2.3260190553456037, 2.310629335044963, 2.310629335044963]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6967682367804104, 2.6334015862692053, 2.584014507733759, 2.543338542708797, 2.508636376650595, 2.4783365765941374, 2.451417383112237, 2.4271870429887956, 2.405148738232768, 2.38492369167822, 2.366231787339432, 2.3488574771992656, 2.3326263220606673, 2.3173962802049766, 2.3173962802049766]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6937505295808273, 2.630216016515218, 2.5806682838550072, 2.539806357623821, 2.504924316429398, 2.474435312795564, 2.4473368142517744, 2.4229338458847547, 2.400719643253291, 2.3803266369046066, 2.3614761612436452, 2.343949671543553, 2.3275690397720235, 2.3121939115494126, 2.3121939115494126]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.690882938823014, 2.627316106755544, 2.5777162493449337, 2.536820566461709, 2.5019249005425825, 2.471434916842728, 2.4443165863067993, 2.41988398230298, 2.3976380281825542, 2.377215259323825, 2.3583334754280076, 2.340774766258477, 2.324362379308864, 2.3089563745011645, 2.3089563745011645]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6998555701080558, 2.636559035194881, 2.587209682130675, 2.5465709902414138, 2.511918124929099, 2.481651573867822, 2.454757269156069, 2.4305384391226825, 2.4084958476118805, 2.38825953320312, 2.3695560273693443, 2.3521778873534167, 2.3359489583146784, 2.320730664499856, 2.320730664499856]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.694451154269688, 2.6309949365134444, 2.5815645734445707, 2.540829095451775, 2.5060793415907594, 2.4757130517514274, 2.4487086002621608, 2.424371560984128, 2.402210542598297, 2.381857940452165, 2.3630370811157695, 2.3455280336743742, 2.329165539884076, 2.3138017415038012, 2.3138017415038012]), ([0, 210, 270, 330, 390, 450, 510, 570, 630, 690, 750, 810, 870, 930, 990, 1000], [2.7854035060729516, 2.6962083579518503, 2.6327579746304384, 2.583267093190155, 2.5424487818251245, 2.5076302263225942, 2.4772099281630555, 2.4501751177652444, 2.4258283649340577, 2.403669216479953, 2.383328487793272, 2.364520666494285, 2.3470328511668446, 2.330690911394335, 2.315352627562879, 2.315352627562879])]"
        self.expected_progress_curves = "[([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8076953117414428, 0.6731932043145106, 0.5682305052490789, 0.4816549890135613, 0.4077576278477377, 0.34313837959423316, 0.28565285502596055, 0.23383873896215185, 0.1866606783255287, 0.1433342098401757, 0.10327631076363249, 0.06601873567394002, 0.0311937088335369, -0.0014997249249807938, -0.0014997249249807938]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8087515567300667, 0.674346515292025, 0.5694814824232761, 0.4830376136266086, 0.40926395910509655, 0.34479225351649323, 0.2874797889339036, 0.2358528444508128, 0.18885461244510443, 0.14570580710283246, 0.10583555966555319, 0.06877840660941209, 0.034161940544251465, 0.0016767157786904208, 0.0016767157786904208]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8108237433884988, 0.6764652425596456, 0.5716158693564276, 0.4852251461241897, 0.4114975115063715, 0.3470493271168396, 0.2897889835203768, 0.23824742819230715, 0.19131476138013143, 0.14823250872749072, 0.10840516142589764, 0.07138964059425301, 0.0368173942883774, 0.004394158539993859, 0.004394158539993859]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8157874385692765, 0.6816634425733847, 0.5770952662787484, 0.4909212143739396, 0.41740586470949226, 0.35320854173136534, 0.296132972605471, 0.24472120618360652, 0.19793122900778098, 0.15498959079317826, 0.11530898594330839, 0.07841865093449382, 0.043950671554471, 0.01160892305022617, 0.01160892305022617]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8033987169631753, 0.6686735884968662, 0.5636239387922976, 0.47704510807551276, 0.4031635905804427, 0.33857597905054915, 0.28113762763126093, 0.22939054199818878, 0.1822925146982158, 0.13906409885259088, 0.09909655801032222, 0.06191864496340559, 0.027182910897113097, -0.005405193205686322, -0.005405193205686322]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8136170059854094, 0.6792501435018812, 0.5744603337138544, 0.4880373752477961, 0.41424735232214344, 0.34974236314642954, 0.2923939495574341, 0.24075590002571917, 0.1937749592038113, 0.1506566331013608, 0.11080020575969352, 0.07373538766428686, 0.03908798566826875, 0.006572425256583689, 0.006572425256583689]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8058235172081629, 0.6713190784148478, 0.5663248866317666, 0.47973928855043924, 0.4057979584114185, 0.34116380456033524, 0.2836945900204448, 0.2319126322404285, 0.18475818638863356, 0.14145845058945736, 0.10143312638880886, 0.06421592831499275, 0.029425287956534082, -0.0032469160378665977, -0.0032469160378665977]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8198618158561375, 0.6857027200631924, 0.5810574416397745, 0.4947256160137558, 0.4210206309425692, 0.3565990635036113, 0.29930768477994396, 0.24769901233485755, 0.20072677465415645, 0.1576058959220039, 0.11775689788415114, 0.08072689662435086, 0.04614079921961332, 0.013689545666985745, 0.013689545666985745]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8169408441736148, 0.6826934017425796, 0.5779957216426, 0.49166162069444, 0.4179701544553355, 0.3536026412153752, 0.29638083900620243, 0.24482013445103473, 0.19789896348013156, 0.15484816878744317, 0.11504123018941516, 0.07802006376528162, 0.043426374336068274, 0.0109561996638049, 0.0109561996638049]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8163796244493876, 0.6822217199623799, 0.5775708927343837, 0.4912158445966899, 0.41746792597327426, 0.353019945171978, 0.29574751271234095, 0.24418780849910912, 0.19728346862984364, 0.1542240873039682, 0.11442578755974084, 0.07742193402018528, 0.042830646175561184, 0.010362012885338584, 0.010362012885338584]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8100438380940578, 0.6757821225450673, 0.5710557485098018, 0.4846742819942899, 0.4109252011821626, 0.3464668937933538, 0.2891278779481088, 0.23743824866465477, 0.19036672503032426, 0.1471446639783338, 0.10718216972135905, 0.07001987123026492, 0.03529592745470685, 0.0027125626569237263, 0.0027125626569237263]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.7986469709893047, 0.664034273005655, 0.5590053310416713, 0.47242453282339286, 0.3985651199134766, 0.33404277703255664, 0.2766791753971589, 0.2250036327678403, 0.17797770739283783, 0.13483117954129104, 0.09497020948001174, 0.05790765332547257, 0.02327042982143299, -0.0092402122572659, -0.0092402122572659]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.7996271575400451, 0.6649518596442074, 0.559885530047823, 0.47318577770692977, 0.39915863827329723, 0.3344750841226707, 0.27692137271199535, 0.22504319494495395, 0.17781120337274414, 0.1344423560788685, 0.0943459162375067, 0.05705902927259583, 0.022194805685530488, 0.0, 0.0]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8003316912415266, 0.6655765556918559, 0.5605005258494037, 0.47388512744400924, 0.39996803986680773, 0.335406856783926, 0.2780144072685376, 0.22632425538442505, 0.17928779987392798, 0.13611172666665325, 0.09619284671631283, 0.05906690714750379, 0.024360488063581875, -0.008223599099142718, -0.008223599099142718]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8066841526601786, 0.672162790573284, 0.5671475177575426, 0.4805610784005488, 0.4066265802592611, 0.34198660877381093, 0.2844879929360948, 0.2326665204605094, 0.1854746010467947, 0.14214599199888103, 0.10208351007379136, 0.06481598499867472, 0.029979791038593644, -0.002721524524494664, -0.002721524524494664]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8008254732400126, 0.6662198857426798, 0.561278005611313, 0.4747107394693028, 0.40081307942398836, 0.3362305463688907, 0.278815213274681, 0.22709778068262884, 0.1800189554102694, 0.1367965913561018, 0.09684618129107428, 0.05971721435872494, 0.02502952165851207, -0.007512770086014019, -0.007512770086014019]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8061789323576712, 0.6716579065163674, 0.5666972317491951, 0.4801503907430278, 0.40627561878980917, 0.3417271014119653, 0.28432689546949286, 0.23259914589948189, 0.18550963928629818, 0.14228698192310066, 0.10233429228303693, 0.06517475031341771, 0.030436125577113456, -0.002177299026328641, -0.002177299026328641]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8035812905490716, 0.6688604274085737, 0.5637582525046584, 0.4770709325244685, 0.4030489102228476, 0.33837842331450696, 0.2808762136205617, 0.22908650893337215, 0.18195974132776765, 0.13869399955060935, 0.0987106518289623, 0.06154660573904791, 0.02681090595120272, -0.00579165152180619, -0.00579165152180619]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8122294359615246, 0.677989513155545, 0.5733648003653551, 0.48719426174671593, 0.4136789969304135, 0.34948998287015154, 0.29246265973003116, 0.2411315737172365, 0.19444423415680515, 0.15159821552828806, 0.11200010239949021, 0.07519326420925583, 0.04080815792259763, 0.00854387337313671, 0.00854387337313671]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8058365340445856, 0.6712410005796325, 0.566275947924027, 0.47971145731696657, 0.4058151336281159, 0.3412252987351794, 0.28381812440405413, 0.232121331794727, 0.18506135904270749, 0.1418595237564131, 0.1019254831030259, 0.06479625810186963, 0.03009449105589849, -0.002477153635505121, -0.002477153635505121]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.7997616482984958, 0.6650976482145883, 0.5600221711888533, 0.47338616835371666, 0.39946098118576834, 0.3348690700589477, 0.27741988238054316, 0.2256603077626326, 0.17853307064690038, 0.1352681845757112, 0.09526781857616194, 0.058070337811833676, 0.023301298586882405, -0.009335757016497503, -0.009335757016497503]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8187698382746649, 0.6846784527890446, 0.5801336600247092, 0.4940420831756888, 0.4206312601796313, 0.3565126828950291, 0.29953808570075535, 0.24823138339118608, 0.20153496249813982, 0.15866507333413582, 0.1190423828641187, 0.08222743122268528, 0.04784704084685642, 0.015607644090684157, 0.015607644090684157]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8073207817267635, 0.6728911140003421, 0.5681747045151384, 0.4818780898589698, 0.4082620120294396, 0.34393214180511555, 0.28672420270636273, 0.23516707845168053, 0.18821977457154632, 0.1451035341050497, 0.10523223454798712, 0.06813996033154407, 0.033476617932933765, 0.0009289750965810479, 0.0009289750965810479]), ([0.0, 0.21, 0.27, 0.33, 0.39, 0.45, 0.51, 0.57, 0.63, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.8110433532173638, 0.6766260455269408, 0.5717814300936422, 0.48530933597935433, 0.4115475043981055, 0.34710321953016454, 0.2898309661981897, 0.23825326413775288, 0.1913099216393315, 0.1482188346607865, 0.10837515570732412, 0.0713278609448262, 0.036708061478326774, 0.004214470276961982, 0.004214470276961982])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
