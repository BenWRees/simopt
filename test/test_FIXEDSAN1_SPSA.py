import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_FIXEDSAN1_SPSA(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "FIXEDSAN-1"
        self.expected_solver_name = "SPSA"
        self.expected_all_recommended_xs = "[[(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.649033340216866, 10.649033340216866, 10.649033340216866, 10.649033340216866, 10.649033340216866, 10.649033340216866, 10.649033340216866, 10.649033340216866, 9.350966659783134, 10.649033340216866, 9.350966659783134, 10.649033340216866, 10.649033340216866), (10.43772622590924, 10.51272645563193, 10.483062436611055, 10.590586356764744, 10.584528089794366, 10.599242550615974, 10.622376834239981, 10.659270837534654, 9.329774553455627, 10.743046080684296, 9.161856542103658, 10.553912765863794, 10.623671787390451), (10.235444829025512, 10.497660506396178, 10.4502696813885, 10.661541629488175, 10.552971554148682, 10.609429962874186, 10.56289711951422, 10.524827343257927, 9.20365071887331, 10.72591485598784, 8.973461920508699, 10.54661650636106, 10.602433433663899), (9.81400202144734, 10.52503013769299, 10.333398993407677, 10.47926002196995, 10.478155642412073, 10.688157407444795, 10.452390830779404, 10.429803185792597, 8.989714896474524, 10.761580519504289, 8.65912756999749, 10.304299609275187, 10.585464138563413), (9.81400202144734, 10.52503013769299, 10.333398993407677, 10.47926002196995, 10.478155642412073, 10.688157407444795, 10.452390830779404, 10.429803185792597, 8.989714896474524, 10.761580519504289, 8.65912756999749, 10.304299609275187, 10.585464138563413)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.222026535957482, 9.777973464042518, 10.222026535957482, 10.222026535957482, 10.222026535957482, 9.777973464042518, 10.222026535957482, 9.777973464042518, 10.222026535957482, 10.222026535957482, 10.222026535957482, 9.777973464042518, 9.777973464042518), (10.166601698294047, 9.722548626379082, 10.166601698294047, 10.277451373620918, 10.277451373620918, 9.833398301705953, 10.277451373620918, 9.722548626379082, 10.166601698294047, 10.277451373620918, 10.277451373620918, 9.833398301705953, 9.833398301705953), (10.02556333100744, 9.791396622678626, 10.204454557353738, 10.246008046615046, 10.241876177866935, 9.744005804723205, 10.208162944706693, 9.590623662747685, 10.169861576948314, 10.207880432075967, 10.322783830872613, 9.826090824035983, 9.774521532594097), (9.878941009268072, 9.670943390266924, 10.189804091670432, 10.234870825465304, 10.269297869480955, 9.657003918089888, 10.280882278637709, 9.389318118155895, 10.209666303394226, 10.357353098480992, 10.322014428821468, 9.769591385421755, 9.7392490360354), (9.872039045097566, 9.67828222437635, 10.182465257561006, 10.227531991355878, 10.261959035371529, 9.663905882260394, 10.273543444528283, 9.396656952265321, 10.20276433922372, 10.364691932590418, 10.328916392991975, 9.776930219531181, 9.732347071864893), (9.892614962906826, 9.69885814218561, 10.161889339751745, 10.186031961741417, 10.241383117562268, 9.705405911874855, 10.252967526719022, 9.35515692265086, 10.161264309609258, 10.344116014781157, 10.287416363377513, 9.73543018991672, 9.690847042250432), (9.937012646512908, 9.701959095675893, 10.178803904515725, 10.09715437927347, 10.25830859268682, 9.712146838150467, 10.219286294759982, 9.285226021475665, 10.183172894639355, 10.318992711470582, 10.268622019658963, 9.717596670636084, 9.650826082075053), (9.907745087896474, 9.683031903697595, 10.218157244524937, 10.101606804468416, 10.285448998027166, 9.700233872734708, 10.217226502950309, 9.224885697678483, 10.195085860055114, 10.308515262303066, 10.245899550369641, 9.713896918582373, 9.619624919314498), (9.87585805749708, 9.687575840002165, 10.175594890730526, 10.048487923356557, 10.308328281567412, 9.70138680161342, 10.179886562040352, 9.163513544349566, 10.226972890454508, 10.345855203213024, 10.224764168060283, 9.74976176352062, 9.572406601034164), (9.753876019698858, 9.701721571820482, 10.135871025907129, 9.922341985723396, 10.181148079957577, 9.795911003344798, 9.989837038357749, 8.917005664211466, 10.197293763427464, 10.331734687245316, 10.101815851143446, 9.745373381772193, 9.521433316658158), (9.753876019698858, 9.701721571820482, 10.135871025907129, 9.922341985723396, 10.181148079957577, 9.795911003344798, 9.989837038357749, 8.917005664211466, 10.197293763427464, 10.331734687245316, 10.101815851143446, 9.745373381772193, 9.521433316658158)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.07317047385077, 9.92682952614923, 9.92682952614923, 10.07317047385077, 10.07317047385077, 9.92682952614923, 10.07317047385077, 10.07317047385077, 9.92682952614923, 10.07317047385077, 10.07317047385077, 9.92682952614923, 9.92682952614923), (10.081015817809147, 9.934674870107608, 9.918984182190853, 10.065325129892392, 10.065325129892392, 9.934674870107608, 10.065325129892392, 10.081015817809147, 9.918984182190853, 10.065325129892392, 10.065325129892392, 9.934674870107608, 9.918984182190853), (9.903354099400328, 10.112336588516428, 10.096645900599672, 9.887663411483572, 10.24298684830121, 9.75701315169879, 9.887663411483572, 9.903354099400328, 9.741322463782033, 9.887663411483572, 10.24298684830121, 10.112336588516428, 10.096645900599672), (9.90062570434509, 10.115064983571665, 10.093917505544434, 9.89039180653881, 10.245715243356448, 9.754284756643552, 9.884935016428335, 9.906082494455566, 9.738594068726796, 9.884935016428335, 10.245715243356448, 10.115064983571665, 10.093917505544434), (9.613000787548728, 10.11202317764252, 10.145011356688602, 9.87243657938188, 10.314249397785414, 9.710778765951876, 9.866875361475746, 10.001031309341762, 9.859072240931397, 9.903191360985925, 10.364951529958319, 10.076307896376402, 9.913698570267378), (9.565120259178297, 10.120581973829594, 10.192891885059034, 9.880995375568954, 10.30569060159834, 9.702219969764801, 9.818994833105315, 9.953150780971331, 9.811191712560966, 9.911750157173, 10.41283205832875, 10.067749100189328, 9.922257366454453), (9.489699984197367, 10.045161698848664, 10.117471610078104, 9.848718241214288, 10.233116438220469, 9.667096723807076, 9.743574558124385, 10.028571055952261, 9.738617549183095, 9.98432432055087, 10.447955304286475, 9.995174936811457, 9.997677641435383), (9.466471913176271, 10.021933627827568, 10.094243539057008, 9.825490170193191, 10.209888367199373, 9.64386865278598, 9.720346487103289, 10.005342984931165, 9.761845620204191, 9.961096249529774, 10.471183375307572, 10.018403007832553, 10.020905712456479), (9.148709626195318, 10.039146740209956, 10.011619112914937, 9.697814600338605, 10.346129211808622, 9.587639291099086, 9.465751729582506, 9.9339985717232, 9.812242373330227, 9.87153629375249, 10.462969253980171, 9.954281958344028, 9.925241467049224), (9.021994382200948, 9.978213455409048, 9.890679770279927, 9.707026913508564, 10.312343063467225, 9.648572575899994, 9.39446703889326, 9.918490976466945, 9.846028521671624, 9.833386756633395, 10.362662413189529, 9.92985188634124, 9.883945354542956), (8.925061118003224, 10.032126289217246, 9.94984863668492, 9.698870644179053, 10.34850352974123, 9.623159711399861, 9.335298172488269, 9.921342544694593, 9.864628812577685, 9.736453492435672, 10.299745386679952, 9.882683582510076, 9.890545082875189), (8.644117659326744, 9.908304531690186, 9.934952008015427, 9.677995479820266, 10.172836243966335, 9.534386842792662, 9.121149145991643, 9.905774427581195, 9.926301206015113, 9.794774547817061, 10.265738145819805, 9.886719457699813, 9.860896807404389), (8.471709607059008, 9.906602301328633, 9.99354697541542, 9.634717178032638, 10.129768568749903, 9.496024849439543, 9.042850813844968, 9.890461890472775, 9.898916558623242, 9.700484340886181, 10.18814614089748, 9.893357531675377, 9.867287346807693), (8.367068673187518, 9.982635121555951, 10.065084478135315, 9.596132165913868, 10.158541884119707, 9.519778137059944, 8.989268033852529, 9.89367794733403, 9.94126940446968, 9.653920445078718, 10.097795305281295, 9.878149472135792, 9.862767266439079), (8.367068673187518, 9.982635121555951, 10.065084478135315, 9.596132165913868, 10.158541884119707, 9.519778137059944, 8.989268033852529, 9.89367794733403, 9.94126940446968, 9.653920445078718, 10.097795305281295, 9.878149472135792, 9.862767266439079)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.05543284388838, 10.05543284388838, 9.94456715611162, 9.94456715611162, 9.94456715611162, 9.94456715611162, 10.05543284388838, 9.94456715611162, 10.05543284388838, 9.94456715611162, 10.05543284388838, 10.05543284388838, 10.05543284388838), (9.912301561131798, 10.19856412664496, 9.80143587335504, 10.087698438868202, 9.80143587335504, 10.087698438868202, 9.912301561131798, 10.087698438868202, 9.912301561131798, 10.087698438868202, 10.19856412664496, 10.19856412664496, 9.912301561131798), (9.976315302142929, 10.262577867656091, 9.737422132343909, 10.023684697857071, 9.737422132343909, 10.151712179879333, 9.848287820120667, 10.023684697857071, 9.976315302142929, 10.023684697857071, 10.13455038563383, 10.262577867656091, 9.976315302142929), (10.004490113852698, 10.286295490774881, 9.688659749626469, 10.013579204716196, 9.814627064259072, 10.141562388755121, 9.854838713826885, 10.062022336699608, 9.997205438076383, 10.052350686559413, 10.071860272004136, 10.211596976117955, 9.930462512229662), (10.001222689895883, 10.292900939080916, 9.640000799454178, 9.978642474126303, 9.785347671682882, 10.151044351941724, 9.862040411792833, 10.044101014863486, 10.006193145889398, 10.048018672412343, 10.044366889275011, 10.17921021935354, 9.90893623426837), (9.996442201403646, 10.288120450588679, 9.635220310961941, 9.98342296261854, 9.790128160175119, 10.155824840433961, 9.86682090028507, 10.048881503355723, 10.001412657397161, 10.05279916090458, 10.049147377767248, 10.174429730861302, 9.904155745776134), (10.007070226907791, 10.277492425084533, 9.598838808623258, 9.994050988122686, 9.779500134670974, 10.119443338095278, 9.830439397946387, 10.038253477851578, 10.037794159735844, 10.063427186408726, 10.038519352263103, 10.185057756365447, 9.893527720271988), (9.928539986788756, 10.25984963675182, 9.499106811480914, 9.936773871844402, 9.800401316682795, 10.09894236087609, 9.840076597940943, 9.974999951617619, 10.021228408408653, 10.01294794176302, 10.05339170662947, 10.14064723208186, 9.844410754441611), (9.916389218766835, 10.247698868729898, 9.486956043458992, 9.948924639866323, 9.812552084704716, 10.08679159285417, 9.827925829919021, 9.962849183595697, 10.009077640386732, 10.025098709784942, 10.06554247465139, 10.152798000103783, 9.83225998641969), (9.774175341241765, 10.211741945759641, 9.200092076464998, 9.922509582064134, 9.947357773267328, 10.082843707955377, 9.925265174556213, 9.884493419431841, 9.919396168398194, 10.000145404356353, 10.040209422689877, 10.043737314910707, 9.582376139150124), (9.668779694238504, 10.15646985456637, 9.102432854475746, 9.935056456204377, 9.956261628085214, 10.074124628234381, 9.891071551047245, 9.790247728570888, 9.892114234671839, 9.974922620269757, 10.021663426502629, 10.085695000929215, 9.48423343919565), (9.642858003581336, 10.14551540990898, 9.039938186981283, 9.921769025665098, 9.931310918692803, 10.061867551097349, 9.827964662829645, 9.78509132836986, 9.847970421784309, 9.97193814769736, 10.01750511266277, 10.066005241154125, 9.43616753575587), (9.642858003581336, 10.14551540990898, 9.039938186981283, 9.921769025665098, 9.931310918692803, 10.061867551097349, 9.827964662829645, 9.78509132836986, 9.847970421784309, 9.97193814769736, 10.01750511266277, 10.066005241154125, 9.43616753575587)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.904748493586107, 9.904748493586107, 9.904748493586107, 9.904748493586107, 10.095251506413893, 10.095251506413893, 9.904748493586107, 10.095251506413893, 9.904748493586107, 10.095251506413893, 10.095251506413893, 10.095251506413893, 10.095251506413893), (10.026983705588705, 10.026983705588705, 9.782513281583508, 10.026983705588705, 9.973016294411295, 9.973016294411295, 10.026983705588705, 10.217486718416492, 9.782513281583508, 10.217486718416492, 10.217486718416492, 9.973016294411295, 10.217486718416492), (10.072449924715063, 10.050791551225306, 9.738883772649952, 10.003175859952105, 10.08097607560249, 10.05029777558385, 10.003175859952105, 10.361068592131645, 9.637094697675554, 10.04208958265514, 10.04208958265514, 9.797619158649944, 10.073904844701339), (10.048877920086762, 10.076341138832555, 9.762455777278253, 9.998975029334206, 10.086989543003762, 10.0758473631911, 9.975813635561481, 10.333706367741021, 9.611545110068304, 9.997168821037489, 10.06763917026239, 9.77025693425932, 10.11882560631899), (10.048877920086762, 10.076341138832555, 9.762455777278253, 9.998975029334206, 10.086989543003762, 10.0758473631911, 9.975813635561481, 10.333706367741021, 9.611545110068304, 9.997168821037489, 10.06763917026239, 9.77025693425932, 10.11882560631899)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.118105200555467, 9.881894799444533, 10.118105200555467, 10.118105200555467, 10.118105200555467, 10.118105200555467, 9.881894799444533, 9.881894799444533, 9.881894799444533, 9.881894799444533, 10.118105200555467, 10.118105200555467, 9.881894799444533), (9.662175365007462, 10.337824634992538, 9.662175365007462, 9.662175365007462, 9.662175365007462, 10.574035036103473, 10.337824634992538, 10.337824634992538, 10.337824634992538, 10.337824634992538, 10.574035036103473, 10.574035036103473, 9.425964963896527), (9.7696653842985, 10.2303346157015, 9.554685345716424, 9.554685345716424, 9.7696653842985, 10.681525055394511, 10.2303346157015, 10.2303346157015, 10.445314654283576, 10.445314654283576, 10.681525055394511, 10.681525055394511, 9.318474944605489), (9.828465027916678, 10.374703889169641, 9.613484989334601, 9.613484989334601, 9.828465027916678, 10.740324699012689, 10.085965342233358, 10.085965342233358, 10.386515010665399, 10.589683927751718, 10.622725411776333, 10.740324699012689, 9.174105671137347), (9.846493586885936, 10.392732448138899, 9.595456430365344, 9.595456430365344, 9.81043646894742, 10.740073689249312, 10.0679367832641, 10.103993901202616, 10.36848645169614, 10.57165536878246, 10.64075397074559, 10.740575708776065, 9.15607711216809), (9.851054199715794, 10.397293060968757, 9.590895817535486, 9.600017043195201, 9.805875856117563, 10.74463430207917, 10.063376170434243, 10.099433288372758, 10.363925838866283, 10.567094755952603, 10.636193357915733, 10.745136321605923, 9.151516499338232), (9.781990695752029, 10.38605468582347, 9.659959321499251, 9.530953539231437, 9.874939360081328, 10.675570798115405, 9.994312666470478, 10.030369784408993, 10.294862334902518, 10.555856380807317, 10.705256861879498, 10.733897946460637, 9.162754874483518), (9.785749986874608, 10.404137372670244, 9.641876634652478, 9.513096988135628, 9.871406204709713, 10.67203764274379, 9.997845821842093, 10.01228709756222, 10.249966325716029, 10.510960371620827, 10.68220283066236, 10.751754497556446, 9.158995583360939), (9.775206932012708, 10.412197468258512, 9.652419689514378, 9.502553933273727, 9.838930494242351, 10.612889341700122, 9.967853070648363, 9.993674602574181, 10.24190623012776, 10.51428053223825, 10.652210079468631, 10.721761746362716, 9.167055678949207), (9.705908807642608, 10.38792805648238, 9.6913435444894, 9.490627217256794, 9.85472322662141, 10.585900922496187, 9.881253724587875, 9.923484387799025, 10.252169235462027, 10.557473608055318, 10.633277695673542, 10.709541077427534, 9.143688634028855), (9.650125839177038, 10.53322646688031, 9.647519272327058, 9.344954459414888, 9.863777734889526, 10.456154885852376, 9.8409679763112, 9.816192825912614, 10.063343197383086, 10.479462079253947, 10.482512090430836, 10.693724594615217, 8.987194089805437), (9.678074367969817, 10.550280124853597, 9.664572930300345, 9.3279008014416, 9.81094240300779, 10.508990217734112, 9.777237773609972, 9.844141354705393, 10.01050786550135, 10.41573187655272, 10.418781887729608, 10.746559926496953, 8.923463887104209), (9.717076853899778, 10.447984230301993, 9.699135524493782, 9.17006638344637, 9.835051256777328, 10.476389892891943, 9.763996446949056, 9.886096319525011, 10.002815018052582, 10.376259586937943, 10.407871680564623, 10.672331896566176, 8.810687204136267), (9.651529912078018, 10.389951186890027, 9.6859513408419, 9.141772864844445, 9.830290974120942, 10.494479453510511, 9.718865014620548, 9.904893931705335, 9.993982971855274, 10.376433418509592, 10.434890381131162, 10.695016822323232, 8.759962488489894), (9.489075038662873, 10.275990655994262, 9.640701053439573, 8.963897529810685, 9.768976807512429, 10.293348788835099, 9.754833063667819, 9.767757459678934, 9.963815344096352, 10.285069218453467, 10.259641244394421, 10.567161830552868, 8.516613404594237), (9.489075038662873, 10.275990655994262, 9.640701053439573, 8.963897529810685, 9.768976807512429, 10.293348788835099, 9.754833063667819, 9.767757459678934, 9.963815344096352, 10.285069218453467, 10.259641244394421, 10.567161830552868, 8.516613404594237)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.59338202746304, 9.59338202746304, 10.40661797253696, 10.40661797253696, 10.40661797253696, 10.40661797253696, 9.59338202746304, 10.40661797253696, 10.40661797253696, 10.40661797253696, 10.40661797253696, 10.40661797253696, 9.59338202746304), (9.296993675898428, 9.35493592123468, 10.110229620972348, 10.703006324101572, 10.64506407876532, 10.64506407876532, 9.35493592123468, 10.64506407876532, 10.64506407876532, 10.64506407876532, 10.64506407876532, 10.168171866308601, 9.296993675898428), (9.215327682044132, 9.215937260357103, 9.826031559801502, 10.784672317955868, 10.895411549928644, 10.760580662627136, 9.128070527087116, 10.726730072619615, 10.384348094610234, 10.905780062920405, 10.726730072619615, 10.052655282446784, 9.046646204735103), (9.206059346512186, 9.230694198986518, 9.811274621172087, 10.765861336931804, 10.88065461129923, 10.75536636948984, 9.14282746571653, 10.71746173708767, 10.38956238774753, 10.910994356057701, 10.735998408151561, 10.05786957558408, 9.041431911597806), (9.21729138579107, 9.225445533746166, 9.787022220695464, 10.72363902972169, 10.885903276539581, 10.713144062279726, 9.185049772926645, 10.725233433045057, 10.400794427026414, 10.93673595874858, 10.741247073391913, 10.069101614862964, 8.999209604387692), (9.206695803685973, 9.28873566981697, 9.77508382036976, 10.695835471260805, 10.879845489839296, 10.669749923961076, 9.160423659315397, 10.720224347678256, 10.392604452089541, 10.88111788004438, 10.757490162163682, 10.048687699540542, 8.961710167308594), (9.198909056944629, 9.296522416558314, 9.767297073628416, 10.703622218002149, 10.872058743097952, 10.67753667070242, 9.152636912574053, 10.712437600936912, 10.384817705348198, 10.888904626785724, 10.749703415422339, 10.056474446281886, 8.95392342056725), (9.195513362475419, 9.312349784982496, 9.751469705204235, 10.687794849577967, 10.887886111522134, 10.67414097623321, 9.164873851559898, 10.705451477029365, 10.395137633541546, 10.890383310462438, 10.767447794639017, 10.038730067065208, 8.941686481581405), (9.222070079093545, 9.293887802412822, 9.77802642182236, 10.601621020167759, 10.878831826076318, 10.61633543234478, 9.222679395448328, 10.735740752902306, 10.337332089653117, 10.836310325828823, 10.825253338527446, 9.980072505670488, 8.851780092916382), (9.244175086339927, 9.380997396667707, 9.762936266866214, 10.520669575595223, 10.91786274964217, 10.575346860747471, 9.205327492761866, 10.695216384511093, 10.334894262703655, 10.76925185499895, 10.732176155849222, 9.929918518290409, 8.670747725656005), (9.255292957862888, 9.370902774045014, 9.755235131549433, 10.509551704072262, 10.90674487811921, 10.565252238124778, 9.194209621238905, 10.706334256034054, 10.326169878486606, 10.760527470781902, 10.723451771632174, 9.938642902507457, 8.660653103033312), (9.239775157258785, 9.348612322522301, 9.745680681387574, 10.495002235011802, 10.927314350582124, 10.54272270369533, 9.18988927288238, 10.700607913633165, 10.340719347547067, 10.768304288923753, 10.702882299169259, 9.913078411145941, 8.639901200623873), (9.154471826610147, 9.349550487337266, 9.684131926173064, 10.453862352960636, 10.922155442603456, 10.500346838699832, 9.13421592901929, 10.682130170431511, 10.322181327090727, 10.739911182816945, 10.669296419943953, 9.964869183827753, 8.545721594691853), (9.159267943363282, 9.320434229859224, 9.660813588293287, 10.435735048623705, 10.948943675270446, 10.484529386473326, 9.155231246222797, 10.697846963026485, 10.293712936156314, 10.76697851289661, 10.675273128106728, 9.966911643741259, 8.471642010304326), (9.159267943363282, 9.320434229859224, 9.660813588293287, 10.435735048623705, 10.948943675270446, 10.484529386473326, 9.155231246222797, 10.697846963026485, 10.293712936156314, 10.76697851289661, 10.675273128106728, 9.966911643741259, 8.471642010304326)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.07308256618205, 9.92691743381795, 9.92691743381795, 9.92691743381795, 10.07308256618205, 9.92691743381795, 10.07308256618205, 10.07308256618205, 9.92691743381795, 9.92691743381795, 10.07308256618205, 10.07308256618205, 10.07308256618205), (10.175773145647257, 9.824226854352743, 10.029608013283157, 10.029608013283157, 9.970391986716843, 10.029608013283157, 10.175773145647257, 10.175773145647257, 9.824226854352743, 10.029608013283157, 10.175773145647257, 10.175773145647257, 10.175773145647257), (10.061992619623142, 9.674610045889088, 9.93090602404944, 9.948624079184926, 9.989399026006568, 10.091727893917946, 10.152347429429154, 10.252753199440386, 9.757688296789576, 10.081068034055926, 10.095409790897632, 10.122143430266457, 10.091516532948605), (9.881923938104284, 9.535495927844158, 9.983020416544536, 9.790510360548994, 9.978822241238982, 10.032827621672817, 10.139810009104666, 10.22394211073552, 9.689172225118375, 9.971048621406522, 10.137346843144817, 10.052279064801665, 9.978213806384526), (9.861367200345946, 9.514666445023455, 9.967457118048902, 9.767146363070065, 9.994385539734616, 9.991289727908438, 10.16011866745471, 10.17373444352987, 9.669404997450236, 9.942311202558678, 10.126421963401292, 10.044864715276642, 9.975437875611611), (9.791723998487212, 9.471006029723616, 9.96607408108322, 9.672560723251136, 10.002135872211769, 10.026141262852816, 10.116905813888055, 10.103203823849258, 9.62498109991054, 9.934342365525398, 10.120291382984943, 10.033076416226722, 9.919631271364066), (9.733318643408367, 9.385712432391632, 9.976206868575233, 9.59893612346886, 9.982486060451315, 10.03977525072207, 10.0997181369628, 10.088172576134657, 9.582796298251544, 9.94065999304311, 10.104257941673733, 10.061041566858126, 9.880688658715332), (9.741479398891698, 9.3775516769083, 9.968046113091901, 9.590775367985529, 9.981628191163455, 10.031614495238738, 10.100576006250659, 10.087314706846797, 9.581938428963685, 9.932499237559778, 10.105115810961593, 10.061899436145985, 9.879830789427473), (9.741479398891698, 9.3775516769083, 9.968046113091901, 9.590775367985529, 9.981628191163455, 10.031614495238738, 10.100576006250659, 10.087314706846797, 9.581938428963685, 9.932499237559778, 10.105115810961593, 10.061899436145985, 9.879830789427473)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (10.061793021317536, 10.061793021317536, 10.061793021317536, 9.938206978682464, 10.061793021317536, 10.061793021317536, 10.061793021317536, 9.938206978682464, 10.061793021317536, 9.938206978682464, 10.061793021317536, 9.938206978682464, 9.938206978682464), (10.07571294096077, 10.07571294096077, 10.07571294096077, 9.92428705903923, 10.047873101674302, 10.047873101674302, 10.07571294096077, 9.92428705903923, 10.07571294096077, 9.952126898325698, 10.07571294096077, 9.952126898325698, 9.952126898325698), (10.06907994419721, 10.06907994419721, 10.06907994419721, 9.93092005580279, 10.054506098437862, 10.041240104910742, 10.08234593772433, 9.93092005580279, 10.06907994419721, 9.945493901562138, 10.06907994419721, 9.958759895089258, 9.945493901562138), (10.03789218395423, 10.064481383467587, 10.100267704440189, 9.935518616532413, 10.074693964238563, 10.07242786515372, 10.051158177481351, 9.899732295559811, 10.08926780999791, 9.965681767362838, 10.053481489025309, 9.97435835026116, 9.976681661805117), (10.032762122832843, 10.066192985572112, 10.105397765561577, 9.937230218636937, 10.05933060759008, 10.060482967522102, 10.046028116359963, 9.889402919619286, 10.075519975040521, 9.98104512401132, 10.063810864965834, 9.977872889691454, 9.976585581391685), (10.013520603193816, 10.046527160542622, 10.12189568823788, 9.917858193070243, 10.042538885450982, 10.079724487161128, 10.029399687755992, 9.872611197480188, 10.058597746973755, 10.000417149578015, 10.044145039936344, 9.997408208793276, 9.995827101030711), (10.015613018157698, 10.045350049509036, 10.111506450215902, 9.905104731687082, 10.043715996484568, 10.082923087050116, 10.05044997219725, 9.84391567611889, 10.078996445276957, 10.01754632188375, 10.01982522949762, 9.987018970771299, 10.016225799333913), (9.974995257647782, 10.075796555331655, 10.096659573418782, 9.887130855165863, 10.042664348117944, 10.055307374974939, 10.044029901764697, 9.794431573594922, 10.053095272488425, 10.019896404258448, 10.04461778996892, 9.956711977576015, 10.005938116909705), (9.949491318686755, 10.069142959054028, 10.096036970654142, 9.865646136521983, 10.053770624053284, 10.03918336307659, 10.033326947277677, 9.781786231915662, 10.056538354813869, 10.011032264521676, 10.046075982574676, 9.94216747048071, 10.003782474114958), (9.941799016164936, 10.06727735606373, 10.085243474640098, 9.857827354398555, 10.059491884500051, 10.025415003360234, 10.041019249799497, 9.767390037648365, 10.064230657335688, 10.005437483676516, 10.053768285096496, 9.931500454068274, 9.99286234868761), (9.93971415978551, 10.050907558904491, 10.081648732152932, 9.850080033901293, 10.068361232384628, 10.017416004654816, 10.037003023344411, 9.747135260613891, 10.062843422288491, 10.003550423392792, 10.041768449301177, 9.946207097858203, 9.977944604543907), (9.9252715664096, 10.049944641755518, 10.083967152863947, 9.826463733568302, 10.074653038840863, 10.007703395597234, 10.037676931225027, 9.720206469629334, 10.0554455863328, 9.997048345900899, 10.0539586067466, 9.94033120536328, 9.965302785388184), (9.90650740991505, 10.049680528113115, 10.078346009505655, 9.811124705032604, 10.077312620255427, 9.992607623984572, 10.022062070541388, 9.701689506206403, 10.061639226218151, 9.981240903602234, 10.044086163349697, 9.938943547160942, 9.959055068582241), (9.908404905217191, 10.048624444756003, 10.073977369455905, 9.808764152208772, 10.077662535262588, 9.994573745637394, 10.022030655437304, 9.694441902268013, 10.063939805874542, 9.978635419319312, 10.042677972378508, 9.93827646620843, 9.955892600627775), (9.866248458550066, 10.066486260884476, 10.081410447153727, 9.778922328831966, 10.093908125851373, 9.984420943726983, 10.011360600741464, 9.653192426974966, 10.066092827749424, 9.989974470852152, 10.02121871662988, 9.941505878887407, 9.948727137279432), (9.862594864446022, 10.062832666780432, 10.081349567566589, 9.775268734727922, 10.090254531747329, 9.980767349622939, 10.011299721154325, 9.649538832870922, 10.066153707336563, 9.986320876748108, 10.017565122525836, 9.941566758474545, 9.945073543175388), (9.85058968205799, 10.055493020641915, 10.084102736087154, 9.765735606612324, 10.099787659862926, 9.981811471302954, 10.008062117497229, 9.638018085619422, 10.066923486853003, 9.985460668055563, 10.006044375274335, 9.935857100545014, 9.939848320382389), (9.849027123363996, 10.053930461947921, 10.08254017739316, 9.767298165306318, 10.098225101168932, 9.98024891260896, 10.009624676191223, 9.636455526925428, 10.06536092815901, 9.983898109361569, 10.004481816580341, 9.93429454185102, 9.938285761688395), (9.849027123363996, 10.053930461947921, 10.08254017739316, 9.767298165306318, 10.098225101168932, 9.98024891260896, 10.009624676191223, 9.636455526925428, 10.06536092815901, 9.983898109361569, 10.004481816580341, 9.93429454185102, 9.938285761688395)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (9.955298683435482, 10.044701316564518, 10.044701316564518, 10.044701316564518, 10.044701316564518, 10.044701316564518, 10.044701316564518, 9.955298683435482, 10.044701316564518, 9.955298683435482, 9.955298683435482, 9.955298683435482, 10.044701316564518), (9.967083432176578, 10.056486065305615, 10.056486065305615, 10.056486065305615, 10.032916567823422, 10.032916567823422, 10.032916567823422, 9.967083432176578, 10.056486065305615, 9.943513934694385, 9.943513934694385, 9.967083432176578, 10.056486065305615), (9.963082883322647, 10.052485516451684, 10.060486614159545, 10.052485516451684, 10.028916018969491, 10.028916018969491, 10.036917116677353, 9.971083981030509, 10.060486614159545, 9.947514483548316, 9.939513385840455, 9.971083981030509, 10.060486614159545), (9.981226549026665, 10.061783224029085, 10.083434492809495, 10.061783224029085, 10.024422524338021, 10.038213726546893, 10.055060782381371, 9.975577475661979, 10.083434492809495, 9.970462362198266, 9.916565507190505, 9.994031859680458, 10.042342948455527), (9.976101172431457, 10.066908600624293, 10.078309116214287, 10.076140073592457, 10.014329779260871, 10.03907499865588, 10.065153527458522, 9.974716203552992, 10.097791342372867, 9.956105512634894, 9.902208657627133, 9.979675010117086, 10.047468325050735), (9.991750330802086, 10.073830554482923, 10.057971132529337, 10.069218119733828, 10.0212517331195, 10.054724157026508, 10.044815543773572, 9.986326982725943, 10.109402121545818, 9.976443496319844, 9.881870673942183, 9.995324168487715, 10.040546371192105), (9.973034799424703, 10.067574258564246, 10.050591609040005, 10.051480826848369, 10.030344519463032, 10.111159779101644, 10.034272595362122, 10.003638289608176, 10.13484021314822, 10.010571500025055, 9.819504395186847, 10.009496318142116, 10.056630183732757), (9.962815297939523, 10.081887796067898, 10.05535675937641, 10.046046032488212, 10.050880168947318, 10.084803718900206, 10.056376984778035, 10.01331987246367, 10.139962973268299, 10.014616948720212, 9.774124569453713, 10.01951493003129, 10.042550962804095), (9.949844787826052, 10.084883099611385, 10.069261405377599, 10.042116593057006, 10.046950729516112, 10.098708364901395, 10.06030642420924, 10.016315176007158, 10.142958276811786, 10.027587458833683, 9.760219923452524, 10.022510233574778, 10.029580452690624), (9.935565811828404, 10.099162075609033, 10.068079904364385, 10.026119736340895, 10.048157814324274, 10.084429388903747, 10.076973986028264, 10.00203620000951, 10.15962583863081, 10.042537139934243, 9.743552361633501, 10.021303148766616, 10.030761953703838), (9.928932420083482, 10.103868344578098, 10.072275702560509, 10.02756089902365, 10.058566783128446, 10.08862518709987, 10.084117848546127, 10.008669591754431, 10.169524336662041, 10.043978302616997, 9.733143392829328, 10.02274431144937, 10.04117092250801), (9.88596121777313, 10.083413223334247, 10.104198262464564, 10.03441663648601, 10.06674476434878, 10.079277913090177, 10.079873360071865, 9.977205484013965, 10.162876448754524, 10.059565038847989, 9.683895861097149, 10.033154481401969, 10.03096817842156), (9.847416000226275, 10.072289520932387, 10.09606391996012, 10.019180746995623, 10.076103788126638, 10.088905373208334, 10.062404775710785, 9.951937548611628, 10.13636967806653, 10.07413896472508, 9.639531873662179, 10.02970624365706, 10.034224980493256), (9.839294279311531, 10.07047595831732, 10.098440170829718, 10.021975322140786, 10.074367228127134, 10.085478873867054, 10.062242002886642, 9.956977382508246, 10.135442655039014, 10.073288944313127, 9.628344439570146, 10.028329135932438, 10.025701129428242), (9.750980057922622, 10.08025603019242, 10.070560004828227, 9.999674038863947, 10.07552029727061, 10.063752551242896, 10.050593884934159, 9.901988115746551, 10.126786624105264, 10.06855924331802, 9.547872060407059, 9.983191902968557, 10.018764701084251), (9.750980057922622, 10.08025603019242, 10.070560004828227, 9.999674038863947, 10.07552029727061, 10.063752551242896, 10.050593884934159, 9.901988115746551, 10.126786624105264, 10.06855924331802, 9.547872060407059, 9.983191902968557, 10.018764701084251)]]"
        self.expected_all_intermediate_budgets = "[[0, 210, 1290, 2730, 9330, 10000], [0, 210, 270, 1230, 2130, 2250, 2370, 3150, 3570, 4050, 8910, 10000], [0, 210, 270, 330, 390, 1230, 1350, 1530, 1590, 2490, 2970, 3330, 5190, 6390, 7050, 10000], [0, 210, 270, 330, 870, 1410, 1470, 1590, 2130, 2190, 4290, 5790, 7050, 10000], [0, 210, 270, 570, 810, 10000], [0, 210, 270, 330, 450, 570, 630, 750, 990, 1230, 1710, 2370, 2550, 3810, 4590, 7110, 10000], [0, 210, 330, 570, 750, 990, 1470, 1530, 1770, 2070, 3690, 3870, 4230, 6570, 7890, 10000], [0, 210, 270, 690, 2430, 2970, 3870, 4950, 5070, 10000], [0, 210, 270, 330, 510, 750, 990, 1290, 2130, 2670, 3030, 4050, 4950, 5850, 6570, 8970, 9090, 9450, 9510, 10000], [0, 210, 270, 330, 510, 690, 870, 1470, 2070, 2250, 2490, 2730, 3450, 4350, 4830, 9090, 10000]]"
        self.expected_all_est_objectives = "[[66.17277984615737, 69.03597476254947, 68.57923316505459, 68.15624139189184, 67.15238271452218, 67.15238271452218], [67.96045089275079, 68.58297068827153, 68.68837155214018, 68.35782599156805, 68.167584665519, 68.15352158144465, 68.00647373332164, 67.87692736844473, 67.80095675066447, 67.66265135854712, 67.03524010569987, 67.03524010569987], [66.60284779945974, 66.75454789404685, 66.7391491065015, 66.40225970072872, 66.39994583331405, 66.12791919191375, 66.07209506219408, 65.9881478126976, 65.93673097140945, 65.18608608186473, 64.90075911961068, 64.69797028579018, 64.24361378868505, 63.903035211344786, 63.708872680283115, 63.708872680283115], [65.1382202229765, 65.21953823889191, 65.21634418998046, 65.1931126164193, 65.16844977613268, 65.07848319269064, 65.08091459228723, 65.06050088746476, 64.81481877918786, 64.79868584503426, 64.34421196589948, 64.078449847675, 63.91297818941224, 63.91297818941224], [65.25402450480675, 65.25357989737289, 65.64007136125544, 65.3353621159189, 65.31206591714583, 65.31206591714583], [66.81144941227032, 66.89230533887634, 67.12328970180333, 67.11064760805544, 67.01822651135573, 66.99940489706479, 66.99577889092654, 66.79746854613917, 66.73069824926758, 66.64150267417327, 66.45977209926039, 65.84445983470425, 65.75696243687858, 65.5012242658085, 65.37986343544372, 64.51246742312011, 64.51246742312011], [67.72045847556574, 68.4130183760773, 68.34636840804446, 68.03199519090788, 68.01229588557081, 67.98292989064285, 67.86464782961383, 67.85052120398989, 67.83217976444021, 67.72497130875959, 67.399793369451, 67.37436085314201, 67.2944315320707, 67.01687627002634, 66.96950037517615, 66.96950037517615], [65.79911425085075, 65.9164700774753, 66.43577981899702, 66.10659020467294, 65.61567588616084, 65.50807107622087, 65.23623835042456, 65.05771104229366, 65.049920114591, 65.049920114591], [68.49701125770689, 68.55141718642865, 68.59279613481225, 68.5829237759664, 68.58621321778604, 68.58051969148254, 68.54015725166182, 68.54535440782576, 68.44701047186174, 68.3776022479743, 68.35191612851408, 68.31438718453083, 68.25816062256504, 68.18724804526707, 68.18010327381738, 68.08785267908598, 68.0709670282686, 68.03339325541833, 68.02833925453305, 68.02833925453305], [64.96969877193652, 64.99014746157236, 65.01460023131035, 65.01684493891202, 65.07332033382976, 65.0714224690397, 65.07858581416579, 65.0729985284296, 65.04641832566527, 65.03662614827759, 65.0162516285893, 65.02868258112193, 64.95828515003676, 64.85973738866639, 64.84179525227117, 64.61586316290706, 64.61586316290706]]"
        self.expected_objective_curves = "[([0, 210, 1290, 2730, 9330, 10000], [68.89839091026717, 69.03597476254947, 68.57923316505459, 68.15624139189184, 67.15238271452218, 67.15238271452218]), ([0, 210, 270, 1230, 2130, 2250, 2370, 3150, 3570, 4050, 8910, 10000], [68.89839091026717, 68.58297068827153, 68.68837155214018, 68.35782599156805, 68.167584665519, 68.15352158144465, 68.00647373332164, 67.87692736844473, 67.80095675066447, 67.66265135854712, 67.03524010569987, 67.03524010569987]), ([0, 210, 270, 330, 390, 1230, 1350, 1530, 1590, 2490, 2970, 3330, 5190, 6390, 7050, 10000], [68.89839091026717, 66.75454789404685, 66.7391491065015, 66.40225970072872, 66.39994583331405, 66.12791919191375, 66.07209506219408, 65.9881478126976, 65.93673097140945, 65.18608608186473, 64.90075911961068, 64.69797028579018, 64.24361378868505, 63.903035211344786, 65.70879385258833, 65.70879385258833]), ([0, 210, 270, 330, 870, 1410, 1470, 1590, 2130, 2190, 4290, 5790, 7050, 10000], [68.89839091026717, 65.21953823889191, 65.21634418998046, 65.1931126164193, 65.16844977613268, 65.07848319269064, 65.08091459228723, 65.06050088746476, 64.81481877918786, 64.79868584503426, 64.34421196589948, 64.078449847675, 63.91297818941224, 63.91297818941224]), ([0, 210, 270, 570, 810, 10000], [68.89839091026717, 65.25357989737289, 65.64007136125544, 65.3353621159189, 65.31206591714583, 65.31206591714583]), ([0, 210, 270, 330, 450, 570, 630, 750, 990, 1230, 1710, 2370, 2550, 3810, 4590, 7110, 10000], [68.89839091026717, 66.89230533887634, 67.12328970180333, 67.11064760805544, 67.01822651135573, 66.99940489706479, 66.99577889092654, 66.79746854613917, 66.73069824926758, 66.64150267417327, 66.45977209926039, 65.84445983470425, 65.75696243687858, 65.5012242658085, 65.37986343544372, 64.51246742312011, 64.51246742312011]), ([0, 210, 330, 570, 750, 990, 1470, 1530, 1770, 2070, 3690, 3870, 4230, 6570, 7890, 10000], [68.89839091026717, 68.4130183760773, 68.34636840804446, 68.03199519090788, 68.01229588557081, 67.98292989064285, 67.86464782961383, 67.85052120398989, 67.83217976444021, 67.72497130875959, 67.399793369451, 67.37436085314201, 67.2944315320707, 67.01687627002634, 66.96950037517615, 66.96950037517615]), ([0, 210, 270, 690, 2430, 2970, 3870, 4950, 5070, 10000], [68.89839091026717, 65.9164700774753, 66.43577981899702, 66.10659020467294, 65.61567588616084, 65.50807107622087, 65.23623835042456, 65.05771104229366, 65.049920114591, 65.049920114591]), ([0, 210, 270, 330, 510, 750, 990, 1290, 2130, 2670, 3030, 4050, 4950, 5850, 6570, 8970, 9090, 9450, 9510, 10000], [68.89839091026717, 68.55141718642865, 68.59279613481225, 68.5829237759664, 68.58621321778604, 68.58051969148254, 68.54015725166182, 68.54535440782576, 68.44701047186174, 68.3776022479743, 68.35191612851408, 68.31438718453083, 68.25816062256504, 68.18724804526707, 68.18010327381738, 68.08785267908598, 68.0709670282686, 68.03339325541833, 68.02833925453305, 68.02833925453305]), ([0, 210, 270, 330, 510, 690, 870, 1470, 2070, 2250, 2490, 2730, 3450, 4350, 4830, 9090, 10000], [68.89839091026717, 64.99014746157236, 65.01460023131035, 65.01684493891202, 65.07332033382976, 65.0714224690397, 65.07858581416579, 65.0729985284296, 65.04641832566527, 65.03662614827759, 65.0162516285893, 65.02868258112193, 64.95828515003676, 64.85973738866639, 64.84179525227117, 64.61586316290706, 64.61586316290706])]"
        self.expected_progress_curves = "[([0.0, 0.021, 0.129, 0.273, 0.933, 1.0], [1.0, 1.0431351828442017, 0.89993791082663, 0.7673218576031007, 0.45259286230480417, 0.45259286230480417]), ([0.0, 0.021, 0.027, 0.123, 0.213, 0.225, 0.237, 0.315, 0.357, 0.405, 0.891, 1.0], [1.0, 0.9011096962118539, 0.9341548934460637, 0.8305225052181033, 0.7708781919682373, 0.7664691447374923, 0.7203668172447463, 0.679751541228913, 0.6559332919621724, 0.6125718925075359, 0.4158664022836898, 0.4158664022836898]), ([0.0, 0.021, 0.027, 0.033, 0.039, 0.123, 0.135, 0.153, 0.159, 0.249, 0.297, 0.333, 0.519, 0.639, 0.705, 1.0], [1.0, 0.3278639974102396, 0.32303618146142593, 0.21741487579783714, 0.2166894338774854, 0.13140385188040904, 0.11390191395214543, 0.08758283728558802, 0.07146266901405834, -0.16387893557438526, -0.25333442386784616, -0.31691262203939863, -0.45936211922942055, -0.5661400511065323, 0.0, 0.0]), ([0.0, 0.021, 0.027, 0.033, 0.087, 0.141, 0.147, 0.159, 0.213, 0.219, 0.429, 0.579, 0.705, 1.0], [1.0, -0.15339104120332364, -0.15439243694507218, -0.1616759819010825, -0.16940825649271116, -0.19761451007745265, -0.1968522195584246, -0.20325230848919676, -0.2802783728584953, -0.28533635788352024, -0.427822656596598, -0.5111441901378521, -0.5630227363211052, -0.5630227363211052]), ([0.0, 0.021, 0.027, 0.057, 0.081, 1.0], [1.0, -0.14271832679288768, -0.021545822274774484, -0.11707802895365985, -0.12438183515607114, -0.12438183515607114]), ([0.0, 0.021, 0.027, 0.033, 0.045, 0.057, 0.063, 0.075, 0.099, 0.123, 0.171, 0.237, 0.255, 0.381, 0.459, 0.711, 1.0], [1.0, 0.3710536048554318, 0.4434716434822555, 0.4395081040384721, 0.41053231335757434, 0.40463137541758276, 0.4034945527805295, 0.34132044702320563, 0.3203866752444637, 0.29242214759995344, 0.23544611845690963, 0.04253389367453583, 0.015101777252486504, -0.06507705613789358, -0.1031260097110752, -0.3750713359194079, -0.3750713359194079]), ([0.0, 0.021, 0.033, 0.057, 0.075, 0.099, 0.147, 0.153, 0.177, 0.207, 0.369, 0.387, 0.423, 0.657, 0.789, 1.0], [1.0, 0.8478263788771226, 0.826930332502741, 0.7283682848673712, 0.7221921739101438, 0.7129853699167492, 0.6759016697219986, 0.6714727009938217, 0.6657223070669411, 0.6321103950473586, 0.5301608592821013, 0.5221872764598547, 0.4971278976023036, 0.4101089867413988, 0.39525573286842597, 0.39525573286842597]), ([0.0, 0.021, 0.027, 0.069, 0.243, 0.297, 0.387, 0.495, 0.507, 1.0], [1.0, 0.06511048923468063, 0.22792407732459455, 0.12471680431449217, -0.029194272738403408, -0.0629304494385031, -0.14815523516555534, -0.2041269785872198, -0.20656958420848515, -0.20656958420848515]), ([0.0, 0.021, 0.027, 0.033, 0.051, 0.075, 0.099, 0.129, 0.213, 0.267, 0.303, 0.405, 0.495, 0.585, 0.657, 0.897, 0.909, 0.945, 0.951, 1.0], [1.0, 0.8912170667441551, 0.9041901626040153, 0.9010949883022732, 0.9021262915547367, 0.9003412615962357, 0.8876868607139863, 0.8893162690906395, 0.8584835544293156, 0.8367227418149598, 0.8286696495290925, 0.8169036040679903, 0.7992754958935038, 0.7770430395626156, 0.7748030163494991, 0.7458806813136968, 0.7405867051430284, 0.728806604970247, 0.727222078525719, 0.727222078525719]), ([0.0, 0.021, 0.027, 0.033, 0.051, 0.069, 0.087, 0.147, 0.207, 0.225, 0.249, 0.273, 0.345, 0.435, 0.483, 0.909, 1.0], [1.0, -0.225309460104326, -0.21764304666845904, -0.21693928767913537, -0.19923316559020954, -0.1998281826897781, -0.19758233627201743, -0.19933405777011276, -0.20766746236124473, -0.21073749823430468, -0.21712530187214613, -0.21322795925869645, -0.23529890734779438, -0.26619552519270967, -0.27182072990376405, -0.3426547836348409, -0.3426547836348409])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 10
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
