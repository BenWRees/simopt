import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_EXAMPLE1_RNDSRCH(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "EXAMPLE-1"
        self.expected_solver_name = "RNDSRCH"
        self.expected_all_recommended_xs = "[[(2.0, 2.0), (-1.3868011021291058, 0.49063838865551596), (0.2115038131722952, -0.08431540722394781), (0.2115038131722952, -0.08431540722394781)], [(2.0, 2.0), (-0.2167740101241827, -0.5538476178659764), (0.12687336202193622, 0.052303295948191206), (-0.09430454247719171, 0.08651966838113309), (-0.09430454247719171, 0.08651966838113309)], [(2.0, 2.0), (-1.0431970971246272, -1.3162835942382718), (1.0112373369677947, 0.7853278705520694), (-0.19476147601830907, -0.4887022831093096), (0.04691925587326419, -0.11812494545691514), (0.06770843725647267, 0.1031303030460592), (0.00468157077450062, -0.09667757601710734), (0.00468157077450062, -0.09667757601710734)], [(2.0, 2.0), (-1.4832334273540664, 1.8264167120807142), (0.010656711702209958, 0.5282211357902047), (0.18919944896434113, -0.07267000594574827), (0.07681549011763708, -0.13713304270118076), (0.055050796066149786, -0.012043261964488862), (0.055050796066149786, -0.012043261964488862)], [(2.0, 2.0), (1.0548215642825145, -0.8187946674699075), (0.2359883900016888, -0.04708505389818333), (-0.17212562250056127, -0.12933033822625667), (-0.04112143724769097, -0.011072643049349488), (-0.04112143724769097, -0.011072643049349488)], [(2.0, 2.0), (-1.1142801791955343, -0.38199824445827724), (0.6458443828015042, -0.12646858482813178), (0.14117915836210093, -0.6354823054367144), (-0.04280188271227483, -0.5390524467483465), (-0.5124452038133245, 0.038637385647904206), (0.19406244612126436, 0.09489264208815747), (0.05574214650338575, 0.048311443091672554), (-0.012688852133630664, 0.028498450045270945), (-0.012688852133630664, 0.028498450045270945)], [(2.0, 2.0), (1.2053569856330164, -0.1582720784943877), (0.5537596915151112, 0.2213151328202144), (-0.06758837896000809, 0.15022735628207726), (-0.04634735860929966, 0.08266767400099762), (-0.04634735860929966, 0.08266767400099762)], [(2.0, 2.0), (0.796174007590585, 2.471569257261906), (0.052129225868331214, -0.2011908405992195), (0.04759936485487095, -0.04800553494589603), (0.04759936485487095, -0.04800553494589603)], [(2.0, 2.0), (0.3237604145032038, 0.9263520893948654), (-0.49585556617049353, 0.4382678306206567), (-0.04626283224666211, 0.11500177618792813), (0.04751655305887319, 0.050578584908096635), (0.04751655305887319, 0.050578584908096635)], [(2.0, 2.0), (0.24343264403622802, -1.0766276147143954), (-0.1903203606151546, -0.6403790559679711), (0.2880881151820605, -0.0991174259220615), (0.12927626566841813, -0.07924480142294815), (-0.0630666873707622, -0.1267795400375171), (-0.0630666873707622, -0.1267795400375171)], [(2.0, 2.0), (-0.7221532971528364, 0.46365217371074574), (0.29095903080662194, 0.21699155112680016), (-0.10605174467251617, -0.33803721396718683), (-0.10123431380201957, -0.31660053335866395), (0.021484824241171013, -0.004785033733962602), (0.021484824241171013, -0.004785033733962602)], [(2.0, 2.0), (0.05447680957853019, 0.5039448418704328), (-0.08585865930132774, -0.4668513274734744), (-0.4110374265587129, -0.08302663828027812), (-0.0990496216049674, -0.26501521892019764), (0.10504433367931656, 0.14759284170305415), (0.10504433367931656, 0.14759284170305415)], [(2.0, 2.0), (-0.6798351780381356, -0.31356520949478683), (-0.15880404939763318, -0.14203032132464025), (0.02013398623191869, -0.020525530182870996), (0.02013398623191869, -0.020525530182870996)], [(2.0, 2.0), (-0.08333931635166508, -1.1996725754210888), (-0.028836902458845886, 1.161596990000997), (-0.8299298472792822, -0.5779984716287824), (-0.9671868166502477, 0.07899668616041326), (0.2540476291541865, 0.06882445489838875), (-0.093435748837665, 0.09669622735878561), (0.07303242555512518, -0.06348091764669193), (0.07303242555512518, -0.06348091764669193)], [(2.0, 2.0), (0.26670332361972665, -0.15684694712094482), (-0.13035957349377889, 0.16633984048956119), (-0.0026903590611020343, 0.1254147589427224), (-0.0026903590611020343, 0.1254147589427224)], [(2.0, 2.0), (-1.043894865410733, -0.10372517116717789), (0.3813394442554633, -0.10014529647864089), (-0.19055432318889637, 0.24310877824807428), (-0.12236859832480879, 0.1639073775836799), (0.17585265353245413, 0.09931034668286234), (0.037977870145725234, -0.022690411916704935), (0.037977870145725234, -0.022690411916704935)], [(2.0, 2.0), (-0.07035531904860877, 0.5420844560193467), (-0.18362910101734847, -0.3188956691910048), (0.19297182970959917, -0.06448551184035435), (0.19297182970959917, -0.06448551184035435)], [(2.0, 2.0), (-0.19170849305642526, 0.34543057774217645), (-0.2441380557562412, -0.08394367221861411), (0.02856819357769805, 0.10133995315143361), (0.02856819357769805, 0.10133995315143361)], [(2.0, 2.0), (0.6784107921211195, 1.3227050583548317), (1.1192002062827058, 0.46915649192690423), (0.5399697148233076, -0.088454498264038), (0.014876680167743857, -0.20153510544168285), (0.014876680167743857, -0.20153510544168285)], [(2.0, 2.0), (1.6360287741451962, 1.137355152553496), (-1.5263919584264607, -0.9925612053439953), (0.9139610040745288, -0.5759694919370398), (0.552780965540599, 0.13600300306476967), (-0.3293475322754702, -0.45727153789479497), (0.1688499815851491, 0.08015976782136798), (0.1688499815851491, 0.08015976782136798)], [(2.0, 2.0), (2.4025598711205602, 0.9194006200990745), (-0.10375222003261188, 1.5950612923413943), (-0.11139041664623904, 1.2033574376174736), (-0.8690339332648057, 0.01505090204020185), (-0.13346964579425008, -0.11633814744135057), (0.06860415935215773, 0.0984120269593956), (0.06860415935215773, 0.0984120269593956)], [(2.0, 2.0), (-0.5980040576532717, 1.6521241456485114), (-0.7997820858849689, -0.16902157441407098), (-0.6528798127221677, -0.451521969254752), (-0.5295628198101914, -0.315962668731266), (0.00899122741912691, 0.3740772265353478), (-0.10211916672608383, 0.34846407851703226), (-0.001462501202082138, 0.23146833200387407), (-0.10459484221585907, -0.09209086007030771), (-0.10459484221585907, -0.09209086007030771)], [(2.0, 2.0), (-0.3021793501048975, 0.5625363574503058), (-0.4612042216495412, 0.2760732636050486), (0.34485742938541547, 0.041740637072263505), (0.02622705537648275, -0.021100188741482263), (0.02622705537648275, -0.021100188741482263)], [(2.0, 2.0), (1.1662117843718838, 1.211017172297543), (0.3392724884470086, -0.44503490176745186), (0.1235019479528167, 0.4216547714459717), (0.07840561422833978, -0.11177723723439527), (-0.06398937998819325, 0.10470398334309126), (-0.016393216950454544, -0.03714523182934467), (-0.016393216950454544, -0.03714523182934467)]]"
        self.expected_all_intermediate_budgets = "[[0, 20, 30, 1000], [0, 20, 110, 200, 1000], [0, 20, 40, 50, 230, 600, 680, 1000], [0, 20, 30, 80, 570, 610, 1000], [0, 20, 50, 470, 780, 1000], [0, 20, 60, 220, 300, 410, 430, 450, 710, 1000], [0, 20, 30, 80, 420, 1000], [0, 20, 30, 450, 1000], [0, 20, 80, 220, 320, 1000], [0, 20, 30, 90, 100, 250, 1000], [0, 20, 60, 120, 410, 470, 1000], [0, 20, 70, 530, 570, 750, 1000], [0, 20, 30, 180, 1000], [0, 20, 60, 90, 100, 120, 230, 280, 1000], [0, 20, 40, 240, 1000], [0, 20, 30, 50, 100, 540, 690, 1000], [0, 20, 40, 170, 1000], [0, 20, 30, 40, 1000], [0, 20, 30, 50, 90, 1000], [0, 20, 30, 40, 80, 130, 200, 1000], [0, 20, 30, 50, 60, 80, 300, 1000], [0, 20, 30, 90, 210, 320, 350, 400, 920, 1000], [0, 20, 70, 110, 640, 1000], [0, 20, 30, 100, 190, 690, 830, 1000]]"
        self.expected_all_est_objectives = "[[7.984539704940337, 2.1484830302293187, 0.03638265582209661, 0.03638265582209661], [8.081590387702734, 0.435328542983867, 0.10042287246052442, 0.09796938745134476, 0.09796938745134476], [7.9253347189439385, 2.7461974028540084, 1.5646755348875019, 0.20209667300101886, -0.05851036174516336, -0.05944498917397769, -0.06529681024660318, -0.06529681024660318], [8.073099810658121, 5.608879216846336, 0.352230944457918, 0.11417717191068556, 0.09780590158061683, 0.07627544096438224, 0.07627544096438224], [7.880122723414122, 1.6631959633666866, -0.06196975406969674, -0.0735237102789571, -0.11806370056046667, -0.11806370056046667], [8.025785950362149, 1.4133289268793845, 0.45889522010683287, 0.4495552656411394, 0.3181954918712409, 0.2898788848431312, 0.0724507968791864, 0.031227132792551425, 0.0267591189855986, 0.0267591189855986], [8.015084462897443, 1.4930199765426875, 0.37071464685958216, 0.04222091044338588, 0.02406648487223625, 0.02406648487223625], [7.994852045957048, 6.737399689762069, 0.03804725648769793, -0.0005777231229253443, -0.0005777231229253443], [7.910902809206077, 0.8738518087315944, 0.3488542430652729, -0.07373153262006339, -0.08428117472802223, -0.08428117472802223], [7.943417039435916, 1.1618035123839925, 0.389724214423027, 0.036236065666482194, -0.03359086914635138, -0.03653250173603942, -0.03653250173603942], [8.091417684005862, 0.8278964067812714, 0.22316017487420275, 0.21693381458064145, 0.2019019680198155, 0.09190217822636841, 0.09190217822636841], [7.909472416682599, 0.16640054311226748, 0.1347942880233633, 0.08531760537873, -0.010483689517995937, -0.05770962435728908, -0.05770962435728908], [7.977013328578315, 0.5375123384819667, 0.02240466685898018, -0.02215999663081128, -0.02215999663081128], [8.026689092895502, 1.472848822762931, 1.3768282270182977, 1.0495548775057213, 0.9683799076218668, 0.09596609636642346, 0.044769492441777255, 0.03605265498323108, 0.03605265498323108], [7.9661065902554125, 0.061838217906379986, 0.010769151190983477, -0.01815730995205031, -0.01815730995205031], [7.989698471543214, 1.090173872707766, 0.14514732369507374, 0.08511129969046301, 0.03153817382555069, 0.03048517225588895, -0.008344355043031399, -0.008344355043031399], [7.920874622531411, 0.21968005090763143, 0.05628871710062724, -0.03772886916980809, -0.03772886916980809], [7.936832268065668, 0.09290669841492687, 0.003482198439651216, -0.052081804145304854, -0.052081804145304854], [8.053894643913893, 2.2636845181777545, 1.5266115595743008, 0.3532861351033973, 0.09473235825209407, 0.09473235825209407], [8.098435148416002, 4.068602041287019, 3.41348530551889, 1.2655007210271325, 0.42249876112263224, 0.4160022048006124, 0.13337105307448036, 0.13337105307448036], [7.934581643563343, 6.552173078120745, 2.4895666930508344, 1.3950585911532551, 0.690028150381263, -0.03406964553813164, -0.051026898705986604, -0.051026898705986604], [8.017557178997036, 3.1046802246016347, 0.6857768565169564, 0.6476813175768552, 0.3978263671541382, 0.15757179257991363, 0.14941271722658736, 0.07113690662745498, 0.03697798652368271, 0.03697798652368271], [7.988890794564379, 0.3966503076476531, 0.2778165755092783, 0.10955972194989176, -0.009976129036976224, -0.009976129036976224], [7.9800797052490156, 2.8066922228564035, 0.293241590457205, 0.17312518268030874, -0.001278703644708532, -0.004862729871802345, -0.01827178894134566, -0.01827178894134566]]"
        self.expected_objective_curves = "[([0, 20, 30, 1000], [8.090508544469758, 2.1484830302293187, 0.03638265582209661, 0.03638265582209661]), ([0, 20, 110, 200, 1000], [8.090508544469758, 0.435328542983867, 0.10042287246052442, 0.09796938745134476, 0.09796938745134476]), ([0, 20, 40, 50, 230, 600, 680, 1000], [8.090508544469758, 2.7461974028540084, 1.5646755348875019, 0.20209667300101886, -0.05851036174516336, -0.05944498917397769, -0.06529681024660318, -0.06529681024660318]), ([0, 20, 30, 80, 570, 610, 1000], [8.090508544469758, 5.608879216846336, 0.352230944457918, 0.11417717191068556, 0.09780590158061683, 0.07627544096438224, 0.07627544096438224]), ([0, 20, 50, 470, 780, 1000], [8.090508544469758, 1.6631959633666866, -0.06196975406969674, -0.0735237102789571, -0.11806370056046667, -0.11806370056046667]), ([0, 20, 60, 220, 300, 410, 430, 450, 710, 1000], [8.090508544469758, 1.4133289268793845, 0.45889522010683287, 0.4495552656411394, 0.3181954918712409, 0.2898788848431312, 0.0724507968791864, 0.031227132792551425, 0.0267591189855986, 0.0267591189855986]), ([0, 20, 30, 80, 420, 1000], [8.090508544469758, 1.4930199765426875, 0.37071464685958216, 0.04222091044338588, 0.02406648487223625, 0.02406648487223625]), ([0, 20, 30, 450, 1000], [8.090508544469758, 6.737399689762069, 0.03804725648769793, -0.0005777231229253443, -0.0005777231229253443]), ([0, 20, 80, 220, 320, 1000], [8.090508544469758, 0.8738518087315944, 0.3488542430652729, -0.07373153262006339, -0.08428117472802223, -0.08428117472802223]), ([0, 20, 30, 90, 100, 250, 1000], [8.090508544469758, 1.1618035123839925, 0.389724214423027, 0.036236065666482194, -0.03359086914635138, -0.03653250173603942, -0.03653250173603942]), ([0, 20, 60, 120, 410, 470, 1000], [8.090508544469758, 0.8278964067812714, 0.22316017487420275, 0.21693381458064145, 0.2019019680198155, 0.09190217822636841, 0.09190217822636841]), ([0, 20, 70, 530, 570, 750, 1000], [8.090508544469758, 0.16640054311226748, 0.1347942880233633, 0.08531760537873, -0.010483689517995937, -0.05770962435728908, -0.05770962435728908]), ([0, 20, 30, 180, 1000], [8.090508544469758, 0.5375123384819667, 0.02240466685898018, -0.02215999663081128, -0.02215999663081128]), ([0, 20, 60, 90, 100, 120, 230, 280, 1000], [8.090508544469758, 1.472848822762931, 1.3768282270182977, 1.0495548775057213, 0.9683799076218668, 0.09596609636642346, 0.044769492441777255, 0.03605265498323108, 0.03605265498323108]), ([0, 20, 40, 240, 1000], [8.090508544469758, 0.061838217906379986, 0.010769151190983477, -0.01815730995205031, -0.01815730995205031]), ([0, 20, 30, 50, 100, 540, 690, 1000], [8.090508544469758, 1.090173872707766, 0.14514732369507374, 0.08511129969046301, 0.03153817382555069, 0.03048517225588895, -0.008344355043031399, -0.008344355043031399]), ([0, 20, 40, 170, 1000], [8.090508544469758, 0.21968005090763143, 0.05628871710062724, -0.03772886916980809, -0.03772886916980809]), ([0, 20, 30, 40, 1000], [8.090508544469758, 0.09290669841492687, 0.003482198439651216, -0.052081804145304854, -0.052081804145304854]), ([0, 20, 30, 50, 90, 1000], [8.090508544469758, 2.2636845181777545, 1.5266115595743008, 0.3532861351033973, 0.09473235825209407, 0.09473235825209407]), ([0, 20, 30, 40, 80, 130, 200, 1000], [8.090508544469758, 4.068602041287019, 3.41348530551889, 1.2655007210271325, 0.42249876112263224, 0.4160022048006124, 0.13337105307448036, 0.13337105307448036]), ([0, 20, 30, 50, 60, 80, 300, 1000], [8.090508544469758, 6.552173078120745, 2.4895666930508344, 1.3950585911532551, 0.690028150381263, -0.03406964553813164, -0.051026898705986604, -0.051026898705986604]), ([0, 20, 30, 90, 210, 320, 350, 400, 920, 1000], [8.090508544469758, 3.1046802246016347, 0.6857768565169564, 0.6476813175768552, 0.3978263671541382, 0.15757179257991363, 0.14941271722658736, 0.07113690662745498, 0.03697798652368271, 0.03697798652368271]), ([0, 20, 70, 110, 640, 1000], [8.090508544469758, 0.3966503076476531, 0.2778165755092783, 0.10955972194989176, -0.009976129036976224, -0.009976129036976224]), ([0, 20, 30, 100, 190, 690, 830, 1000], [8.090508544469758, 2.8066922228564035, 0.293241590457205, 0.17312518268030874, -0.001278703644708532, -0.004862729871802345, -0.01827178894134566, -0.01827178894134566])]"
        self.expected_progress_curves = "[([0.0, 0.02, 0.03, 1.0], [1.0, 0.2655559929786994, 0.004496955367158701, 0.004496955367158701]), ([0.0, 0.02, 0.11, 0.2, 1.0], [1.0, 0.053807315150965936, 0.012412430183905827, 0.012109175450820261, 0.012109175450820261]), ([0.0, 0.02, 0.04, 0.05, 0.23, 0.6, 0.68, 1.0], [1.0, 0.3394344604865615, 0.19339643809622215, 0.024979477110763502, -0.007231975768094075, -0.007347497236698567, -0.008070791828189417, -0.008070791828189417]), ([0.0, 0.02, 0.03, 0.08, 0.57, 0.61, 1.0], [1.0, 0.6932665834313059, 0.043536316972149346, 0.014112483941288341, 0.012088968331597864, 0.009427768420876347, 0.009427768420876347]), ([0.0, 0.02, 0.05, 0.47, 0.78, 1.0], [1.0, 0.205573723113309, -0.007659562279562263, -0.00908765003767458, -0.014592865196486164, -0.014592865196486164]), ([0.0, 0.02, 0.06, 0.22, 0.3, 0.41, 0.43, 0.45, 0.71, 1.0], [1.0, 0.17468975146753427, 0.05672019472997272, 0.05556576118424985, 0.03932947973817325, 0.035829501106117365, 0.00895503619839941, 0.00385972434500383, 0.0033074705796942412, 0.0033074705796942412]), ([0.0, 0.02, 0.03, 0.08, 0.42, 1.0], [1.0, 0.18453969467262188, 0.045820932617762704, 0.005218573123224232, 0.0029746566288081882, 0.0029746566288081882]), ([0.0, 0.02, 0.03, 0.45, 1.0], [1.0, 0.8327535472868881, 0.0047027027137503015, -7.14075165670822e-05, -7.14075165670822e-05]), ([0.0, 0.02, 0.08, 0.22, 0.32, 1.0], [1.0, 0.10800950322571665, 0.043118951194202886, -0.009113337216665119, -0.010417290120240013, -0.010417290120240013]), ([0.0, 0.02, 0.03, 0.09, 0.1, 0.25, 1.0], [1.0, 0.14360080160574573, 0.04817054605169681, 0.004478836585773245, -0.004151885998478095, -0.004515476565562878, -0.004515476565562878]), ([0.0, 0.02, 0.06, 0.12, 0.41, 0.47, 1.0], [1.0, 0.10232934088515083, 0.027582960162219124, 0.026813371914541254, 0.02495541125876753, 0.011359258533777566, 0.011359258533777566]), ([0.0, 0.02, 0.07, 0.53, 0.57, 0.75, 1.0], [1.0, 0.020567377464301678, 0.016660792987543596, 0.010545394632460845, -0.0012958010563083862, -0.007133003326068584, -0.007133003326068584]), ([0.0, 0.02, 0.03, 0.18, 1.0], [1.0, 0.06643739828312542, 0.0027692532225671797, -0.002739011584872335, -0.002739011584872335]), ([0.0, 0.02, 0.06, 0.09, 0.1, 0.12, 0.23, 0.28, 1.0], [1.0, 0.1820465072952296, 0.1701782056653811, 0.12972668797478018, 0.119693329819644, 0.011861565418161605, 0.005533581998671678, 0.004456166727352975, 0.004456166727352975]), ([0.0, 0.02, 0.04, 0.24, 1.0], [1.0, 0.00764330419608163, 0.0013310845828529156, -0.002244273008581356, -0.002244273008581356]), ([0.0, 0.02, 0.03, 0.05, 0.1, 0.54, 0.69, 1.0], [1.0, 0.13474726177169058, 0.017940445016189834, 0.01051989491422521, 0.0038981695220022374, 0.0037680168172774496, -0.0010313758396232283, -0.0010313758396232283]), ([0.0, 0.02, 0.04, 0.17, 1.0], [1.0, 0.02715281118611426, 0.006957376880728124, -0.004663349524004587, -0.004663349524004587]), ([0.0, 0.02, 0.03, 0.04, 1.0], [1.0, 0.011483418861034756, 0.0004304053843477444, -0.006437395604866546, -0.006437395604866546]), ([0.0, 0.02, 0.03, 0.05, 0.09, 1.0], [1.0, 0.27979508404636555, 0.18869166890847813, 0.04366674025020157, 0.01170907338288989, 0.01170907338288989]), ([0.0, 0.02, 0.03, 0.04, 0.08, 0.13, 0.2, 1.0], [1.0, 0.502885822185813, 0.42191232933709305, 0.15641794506133505, 0.05222153326955324, 0.051418548353795314, 0.016484878835663023, 0.016484878835663023]), ([0.0, 0.02, 0.03, 0.05, 0.06, 0.08, 0.3, 1.0], [1.0, 0.8098592371674167, 0.3077144878306284, 0.1724315082896542, 0.0852886004122608, -0.004211063538326011, -0.006307007578759172, -0.006307007578759172]), ([0.0, 0.02, 0.03, 0.09, 0.21, 0.32, 0.35, 0.4, 0.92, 1.0], [1.0, 0.3837435196485676, 0.08476313358394721, 0.08005446308063982, 0.04917198529208293, 0.01947612955524549, 0.018467654586276652, 0.008792637228729014, 0.0045705392090536635, 0.0045705392090536635]), ([0.0, 0.02, 0.07, 0.11, 0.64, 1.0], [1.0, 0.049026622426445884, 0.03433858007593094, 0.01354175962458886, -0.0012330657562676175, -0.0012330657562676175]), ([0.0, 0.02, 0.03, 0.1, 0.19, 0.69, 0.83, 1.0], [1.0, 0.3469117185192159, 0.03624513698309476, 0.02139855383981368, -0.00015804984787792925, -0.0006010413121837995, -0.0022584227976417235, -0.0022584227976417235])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
