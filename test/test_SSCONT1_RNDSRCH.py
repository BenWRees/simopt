import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_SSCONT1_RNDSRCH(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "SSCONT-1"
        self.expected_solver_name = "RNDSRCH"
        self.expected_all_recommended_xs = "[[(600, 600), (359.64365512847405, 465.33501295716064), (448.4333218676209, 310.8963458265232), (448.4333218676209, 310.8963458265232)], [(600, 600), (379.4984318811467, 885.7474017443209), (325.34753297971815, 484.396706029854), (349.5306522240082, 410.27378677181), (370.70555006408216, 436.0331898637314), (589.5536241931459, 238.46041135411085), (455.5779816688252, 273.4468864216472), (455.5779816688252, 273.4468864216472)], [(600, 600), (201.9742725596509, 780.8933400714283), (392.20484473409556, 456.927538294216), (236.91888662053393, 425.03253740381695), (362.6919082172776, 354.3557218892089), (362.6919082172776, 354.3557218892089)], [(600, 600), (270.51550828210134, 330.22973611572723), (563.1986444042213, 251.7030137502581), (626.4364857411043, 175.81234105838976), (592.2418396925617, 148.6990089807615), (592.2418396925617, 148.6990089807615)], [(600, 600), (290.4813924950597, 261.4662596466684), (483.61266152187284, 508.8728086787097), (460.58375448622513, 226.7074912071731), (326.54107511059124, 455.5743039431546), (450.52768085160676, 312.2453259596492), (450.52768085160676, 312.2453259596492)], [(600, 600), (409.74224692763124, 535.1203903690143), (481.3923763982421, 312.5808672336022), (481.3923763982421, 312.5808672336022)], [(600, 600), (477.3830349535785, 647.41569100937), (370.95683999105216, 181.27446475403576), (360.07380838009834, 284.1229158649434), (617.7140354330088, 305.547888556553), (561.5913293809684, 280.0377568572764), (530.1524959071461, 206.53998668477863), (530.1524959071461, 206.53998668477863)], [(600, 600), (238.95919282377542, 384.82460068594133), (288.4513939553728, 390.67891574809835), (481.2727419601838, 388.8134007448537), (383.97289195347247, 391.48484260076674), (383.97289195347247, 391.48484260076674)], [(600, 600), (476.5545786705003, 356.2619054680448), (339.7929445338787, 241.71203036349), (615.6162331057836, 193.5195467569682), (511.5095718637328, 212.24733099847668), (511.5095718637328, 212.24733099847668)], [(600, 600), (503.25052162181316, 446.79327484259204), (419.1449837747667, 403.8396019725111), (357.96744157512427, 324.1947641853848), (388.4854466145964, 330.62760034162926), (467.74485172048503, 276.0076074487548), (467.74485172048503, 276.0076074487548)], [(600, 600), (397.72342509059786, 517.9017436258317), (366.7352918961766, 550.7069416997712), (252.62867911667325, 529.9826163022867), (435.36179228783743, 166.1970196502605), (535.3728948305198, 271.33988791921485), (535.3728948305198, 271.33988791921485)], [(600, 600), (348.5143374923055, 612.8819976658843), (214.6092917691743, 606.8398543406752), (323.0573894679575, 373.3738917206228), (539.3520518764884, 133.24184635177056), (505.1297306937891, 247.61327551635512), (505.1297306937891, 247.61327551635512)], [(600, 600), (362.1026347528802, 387.89624420528344), (475.3774248292501, 280.03885712973334), (408.7990201660214, 293.347400348089), (412.1792995993795, 356.15852469873664), (473.74674210957585, 286.14963364289696), (564.4016878241707, 281.72768874754325), (564.4016878241707, 281.72768874754325)], [(600, 600), (230.901069770748, 319.1180503439337), (297.2109392966932, 354.77378929236016), (354.6256303229821, 277.4776312174981), (309.60936825899296, 383.2782873917883), (420.81491956616384, 325.3002812076395), (420.81491956616384, 325.3002812076395)], [(600, 600), (269.53531296484516, 621.281457435753), (120.15822309677885, 812.2760024394447), (346.29172252677733, 580.2703487485495), (232.69213821976837, 569.0477113127039), (230.21327902837302, 312.1783451201739), (293.9495143460546, 347.88321411354724), (364.18166714347495, 297.64766786818774), (389.67059157266146, 252.6122702172407), (524.4349659748128, 287.1905882374912), (524.4349659748128, 287.1905882374912)], [(600, 600), (173.13408261528184, 540.7249988512299), (434.57147554207785, 320.9616135947453), (472.15859546823503, 383.88231161502756), (519.9703770383644, 198.77766342015346), (519.9703770383644, 198.77766342015346)], [(600, 600), (209.3720655064243, 531.2019221541831), (304.16893412149375, 505.5360985556011), (552.0436508245876, 214.40522842968096), (506.6225605447666, 222.94911686265655), (506.6225605447666, 222.94911686265655)], [(600, 600), (329.0520513654508, 680.1216372231888), (418.14538618102137, 584.730239081933), (625.4427510055506, 262.89712974344155), (584.194201255846, 203.66023410862118), (584.194201255846, 203.66023410862118)], [(600, 600), (572.2750905724531, 505.53253118221835), (359.42425903813466, 724.812003376224), (403.20525305188335, 560.9130757765975), (665.2542503671029, 159.73621513977307), (372.6056813655376, 318.21502444387085), (367.1063026342511, 455.9932631147591), (376.81715298924775, 434.69086831814514), (376.81715298924775, 434.69086831814514)], [(600, 600), (491.5286448221384, 364.142737083846), (461.9073911804049, 336.4006076458697), (437.0856095903734, 228.11524026171574), (520.9933393156387, 234.11663709978478), (520.9933393156387, 234.11663709978478)], [(600, 600), (532.6396285831278, 254.8683578270847), (546.8993048611507, 147.24734900140908), (546.8993048611507, 147.24734900140908)], [(600, 600), (222.2307936965125, 535.3174554149696), (575.0422142121101, 149.62693997154216), (575.0422142121101, 149.62693997154216)], [(600, 600), (476.8967743219232, 311.48795175504034), (493.1318947135452, 344.9635720590553), (490.5943837934043, 291.83318347765623), (490.5943837934043, 291.83318347765623)], [(600, 600), (473.2502346988226, 446.1802468462773), (473.28700327791034, 432.03057900181966), (361.17230627930707, 370.5322469061443), (471.7268879881168, 361.82599742500713), (597.8315809669834, 185.76144428246218), (597.8315809669834, 185.76144428246218)]]"
        self.expected_all_intermediate_budgets = "[[0, 30, 80, 1000], [0, 30, 40, 250, 300, 560, 900, 1000], [0, 20, 30, 80, 100, 1000], [0, 20, 40, 560, 740, 1000], [0, 20, 120, 130, 800, 940, 1000], [0, 30, 260, 1000], [0, 30, 40, 60, 80, 110, 300, 1000], [0, 20, 40, 140, 680, 1000], [0, 30, 90, 130, 270, 1000], [0, 30, 90, 110, 170, 470, 1000], [0, 20, 40, 80, 140, 180, 1000], [0, 20, 60, 90, 170, 540, 1000], [0, 20, 120, 310, 430, 550, 970, 1000], [0, 40, 50, 70, 310, 340, 1000], [0, 20, 70, 90, 130, 160, 210, 220, 320, 940, 1000], [0, 20, 30, 340, 790, 1000], [0, 20, 60, 120, 600, 1000], [0, 30, 50, 60, 70, 1000], [0, 40, 60, 70, 150, 180, 220, 370, 1000], [0, 20, 90, 110, 230, 1000], [0, 20, 120, 1000], [0, 20, 270, 1000], [0, 20, 50, 390, 1000], [0, 20, 40, 140, 190, 800, 1000]]"
        self.expected_all_est_objectives = "[[618.5809976153716, 533.3809189890569, 524.6956810502536, 524.6956810502536], [619.371245290233, 617.0013871604638, 535.1566693494801, 531.8047516351805, 532.5540902393947, 529.4790860906369, 524.6017259605693, 524.6017259605693], [620.2040298994102, 558.2160445991162, 537.1368353845496, 545.4253221207432, 533.5709689924389, 533.5709689924389], [620.3929887875448, 546.078807843856, 527.145481326377, 522.60774171131, 517.620364115135, 517.620364115135], [617.140803174291, 543.2060261863802, 553.1628117457508, 515.8191104014048, 529.5690253522938, 519.9401355735813, 519.9401355735813], [617.6250759903628, 542.7328033712926, 523.4597411567702, 523.4597411567702], [622.8299886318688, 585.0447275257981, 534.5729153987116, 526.7188411663461, 543.3303346926017, 526.2093936498089, 516.5363149993058, 516.5363149993058], [617.1638109984892, 550.0044627557086, 542.3876126622054, 538.2641591809906, 534.7083064386326, 534.7083064386326], [625.4509909440814, 533.830456186644, 543.9036167612861, 527.6161568132001, 524.745025896469, 524.745025896469], [616.3517529689802, 542.8864270263207, 530.1130514049365, 529.5912733771099, 525.9884721979162, 525.9454774712535, 525.9454774712535], [620.885724515664, 550.5665198680736, 550.464269192072, 547.4920252446749, 541.5284542081213, 530.9561343507952, 530.9561343507952], [618.8018614763591, 549.5554309741424, 541.4258391645974, 533.8620259445208, 518.6660248436312, 521.4716198172625, 521.4716198172625], [619.9876951863847, 528.1772218541133, 518.4579892337155, 520.7869186607401, 525.9628454354237, 518.6203962156504, 525.0666976836851, 525.0666976836851], [620.5752955225382, 551.2226685630148, 536.2782141351003, 534.1161748104465, 532.5715121077395, 527.5991190128451, 527.5991190128451], [624.383736629565, 545.9738103666589, 555.3097100191543, 548.5193116890038, 542.0726999045208, 553.8440879558518, 539.4192902951702, 533.5394448412255, 533.9470377514253, 527.5017108320944, 527.5017108320944], [621.6851306868389, 539.0628671488302, 522.035961061019, 530.3773813290093, 516.326066741273, 516.326066741273], [619.7087176057688, 541.2419798777642, 538.4581878514359, 524.0981603290754, 522.0466003864655, 522.0466003864655], [623.808754566687, 556.666787327645, 557.7239765406276, 538.3112754067907, 519.0173025802243, 519.0173025802243], [618.1205002744614, 579.7995595921925, 572.5035226368108, 549.8631566143539, 526.8537529113826, 527.0544934140588, 529.5956816367898, 531.3894913607328, 531.3894913607328], [621.6456203016469, 535.5676999795628, 527.9016721133502, 528.438316977871, 522.7123272247158, 522.7123272247158], [617.7541201292993, 519.6083412454099, 516.228515867695, 516.228515867695], [626.0524700155847, 544.5506305704266, 520.902672599505, 520.902672599505], [616.5518744333754, 530.0263524474991, 531.546328773638, 528.58668413041, 528.58668413041], [619.165760431194, 541.3916760668104, 541.4913252591061, 534.5387868914912, 534.345052832423, 521.3446194150314, 521.3446194150314]]"
        self.expected_objective_curves = "[([0, 30, 80, 1000], [624.4131899421741, 533.3809189890569, 524.6956810502536, 524.6956810502536]), ([0, 30, 40, 250, 300, 560, 900, 1000], [624.4131899421741, 617.0013871604638, 535.1566693494801, 531.8047516351805, 532.5540902393947, 529.4790860906369, 524.6017259605693, 524.6017259605693]), ([0, 20, 30, 80, 100, 1000], [624.4131899421741, 558.2160445991162, 537.1368353845496, 545.4253221207432, 533.5709689924389, 533.5709689924389]), ([0, 20, 40, 560, 740, 1000], [624.4131899421741, 546.078807843856, 527.145481326377, 522.60774171131, 517.620364115135, 517.620364115135]), ([0, 20, 120, 130, 800, 940, 1000], [624.4131899421741, 543.2060261863802, 553.1628117457508, 526.7574017452295, 529.5690253522938, 519.9401355735813, 519.9401355735813]), ([0, 30, 260, 1000], [624.4131899421741, 542.7328033712926, 523.4597411567702, 523.4597411567702]), ([0, 30, 40, 60, 80, 110, 300, 1000], [624.4131899421741, 585.0447275257981, 534.5729153987116, 526.7188411663461, 543.3303346926017, 526.2093936498089, 516.5363149993058, 516.5363149993058]), ([0, 20, 40, 140, 680, 1000], [624.4131899421741, 550.0044627557086, 542.3876126622054, 538.2641591809906, 534.7083064386326, 534.7083064386326]), ([0, 30, 90, 130, 270, 1000], [624.4131899421741, 533.830456186644, 543.9036167612861, 527.6161568132001, 524.745025896469, 524.745025896469]), ([0, 30, 90, 110, 170, 470, 1000], [624.4131899421741, 542.8864270263207, 530.1130514049365, 529.5912733771099, 525.9884721979162, 525.9454774712535, 525.9454774712535]), ([0, 20, 40, 80, 140, 180, 1000], [624.4131899421741, 550.5665198680736, 550.464269192072, 547.4920252446749, 541.5284542081213, 530.9561343507952, 530.9561343507952]), ([0, 20, 60, 90, 170, 540, 1000], [624.4131899421741, 549.5554309741424, 541.4258391645974, 533.8620259445208, 518.6660248436312, 521.4716198172625, 521.4716198172625]), ([0, 20, 120, 310, 430, 550, 970, 1000], [624.4131899421741, 528.1772218541133, 518.4579892337155, 520.7869186607401, 525.9628454354237, 518.6203962156504, 525.0666976836851, 525.0666976836851]), ([0, 40, 50, 70, 310, 340, 1000], [624.4131899421741, 551.2226685630148, 536.2782141351003, 534.1161748104465, 532.5715121077395, 527.5991190128451, 527.5991190128451]), ([0, 20, 70, 90, 130, 160, 210, 220, 320, 940, 1000], [624.4131899421741, 545.9738103666589, 555.3097100191543, 548.5193116890038, 542.0726999045208, 553.8440879558518, 539.4192902951702, 533.5394448412255, 533.9470377514253, 527.5017108320944, 527.5017108320944]), ([0, 20, 30, 340, 790, 1000], [624.4131899421741, 539.0628671488302, 522.035961061019, 530.3773813290093, 516.326066741273, 516.326066741273]), ([0, 20, 60, 120, 600, 1000], [624.4131899421741, 541.2419798777642, 538.4581878514359, 524.0981603290754, 522.0466003864655, 522.0466003864655]), ([0, 30, 50, 60, 70, 1000], [624.4131899421741, 556.666787327645, 557.7239765406276, 538.3112754067907, 519.0173025802243, 519.0173025802243]), ([0, 40, 60, 70, 150, 180, 220, 370, 1000], [624.4131899421741, 579.7995595921925, 572.5035226368108, 549.8631566143539, 526.8537529113826, 527.0544934140588, 529.5956816367898, 531.3894913607328, 531.3894913607328]), ([0, 20, 90, 110, 230, 1000], [624.4131899421741, 535.5676999795628, 527.9016721133502, 528.438316977871, 522.7123272247158, 522.7123272247158]), ([0, 20, 120, 1000], [624.4131899421741, 519.6083412454099, 516.228515867695, 516.228515867695]), ([0, 20, 270, 1000], [624.4131899421741, 544.5506305704266, 520.902672599505, 520.902672599505]), ([0, 20, 50, 390, 1000], [624.4131899421741, 530.0263524474991, 531.546328773638, 528.58668413041, 528.58668413041]), ([0, 20, 40, 140, 190, 800, 1000], [624.4131899421741, 541.3916760668104, 541.4913252591061, 534.5387868914912, 534.345052832423, 521.3446194150314, 521.3446194150314])]"
        self.expected_progress_curves = "[([0.0, 0.03, 0.08, 1.0], [1.0, 0.06782513731259486, -0.02111211975288083, -0.02111211975288083]), ([0.0, 0.03, 0.04, 0.25, 0.3, 0.56, 0.9, 1.0], [1.0, 0.9241027806077119, 0.08600890699188947, 0.05168510728490537, 0.05935837087787257, 0.027870179491240633, -0.022074224420909505, -0.022074224420909505]), ([0.0, 0.02, 0.03, 0.08, 0.1, 1.0], [1.0, 0.32213802617048587, 0.10628590307814338, 0.191160408616699, 0.0697712585501678, 0.0697712585501678]), ([0.0, 0.02, 0.04, 0.56, 0.74, 1.0], [1.0, 0.1978521340656288, 0.003973953703234255, -0.04249271968959694, -0.09356370778215023, -0.09356370778215023]), ([0.0, 0.02, 0.12, 0.13, 0.8, 0.94, 1.0], [1.0, 0.16843471078210367, 0.27039267705534203, 0.0, 0.028791161885807357, -0.06980913571553611, -0.06980913571553611]), ([0.0, 0.03, 0.26, 1.0], [1.0, 0.1635888862403645, -0.03376820411104372, -0.03376820411104372]), ([0.0, 0.03, 0.04, 0.06, 0.08, 0.11, 0.3, 1.0], [1.0, 0.5968650384861903, 0.08003123826844204, -0.000394862195014683, 0.16970763590530066, -0.005611629433734614, -0.10466442322200696, -0.10466442322200696]), ([0.0, 0.02, 0.04, 0.14, 0.68, 1.0], [1.0, 0.2380510304580845, 0.16005411666386943, 0.11782975334298926, 0.08141764907337955, 0.08141764907337955]), ([0.0, 0.03, 0.09, 0.13, 0.27, 1.0], [1.0, 0.0724284199841814, 0.1755780720491191, 0.008793693480193257, -0.02060682613817095, -0.02060682613817095]), ([0.0, 0.03, 0.09, 0.11, 0.17, 0.47, 1.0], [1.0, 0.16516199990689198, 0.03436201500867163, 0.029018982737258104, -0.007873875798970299, -0.00831414388196332, -0.00831414388196332]), ([0.0, 0.02, 0.04, 0.08, 0.14, 0.18, 1.0], [1.0, 0.24380652250563697, 0.24275947063201628, 0.21232354868335557, 0.1512562924903407, 0.042995225199535116, 0.042995225199535116]), ([0.0, 0.02, 0.06, 0.09, 0.17, 0.54, 1.0], [1.0, 0.23345292327102643, 0.1502055094756469, 0.07275169583356722, -0.08285609128749387, -0.054126662899970326, -0.054126662899970326]), ([0.0, 0.02, 0.12, 0.31, 0.43, 0.55, 0.97, 1.0], [1.0, 0.014539026668040255, -0.08498638600690396, -0.06113803589858473, -0.008136295087838369, -0.0833233306475285, -0.017312891460510984, -0.017312891460510984]), ([0.0, 0.04, 0.05, 0.07, 0.31, 0.34, 1.0], [1.0, 0.2505255169150418, 0.09749357990608772, 0.07535419252749731, 0.05953677165335675, 0.008619225579523658, 0.008619225579523658]), ([0.0, 0.02, 0.07, 0.09, 0.13, 0.16, 0.21, 0.22, 0.32, 0.94, 1.0], [1.0, 0.19677695481475466, 0.292377019335943, 0.22284301161838524, 0.1568293947759111, 0.27736897843675207, 0.12965835188801314, 0.06944844971522399, 0.07362222085286314, 0.007621761091763536, 0.007621761091763536]), ([0.0, 0.02, 0.03, 0.34, 0.79, 1.0], [1.0, 0.12600856161013194, -0.04834778123636328, 0.037068766231032974, -0.10681737556527932, -0.10681737556527932]), ([0.0, 0.02, 0.06, 0.12, 0.6, 1.0], [1.0, 0.1483227814753112, 0.11981661632395231, -0.02723076087196265, -0.04823883402859462, -0.04823883402859462]), ([0.0, 0.03, 0.05, 0.06, 0.07, 1.0], [1.0, 0.3062735566897133, 0.31709922542376273, 0.11831222577672842, -0.07925899025458219, -0.07925899025458219]), ([0.0, 0.04, 0.06, 0.07, 0.15, 0.18, 0.22, 0.37, 1.0], [1.0, 0.5431542648551639, 0.4684424931303005, 0.23660404872803384, 0.0009866406070964204, 0.003042233075116872, 0.029064123529844395, 0.04743282196608452, 0.04743282196608452]), ([0.0, 0.02, 0.09, 0.11, 0.23, 1.0], [1.0, 0.09021788054759661, 0.011717383979463042, 0.017212653378533553, -0.04142175896789564, -0.04142175896789564]), ([0.0, 0.02, 0.12, 1.0], [1.0, -0.07320672570275022, -0.10781630123450127, -0.10781630123450127]), ([0.0, 0.02, 0.27, 1.0], [1.0, 0.18220352478557805, -0.05995270996038787, -0.05995270996038787]), ([0.0, 0.02, 0.05, 0.39, 1.0], [1.0, 0.03347421348622042, 0.04903884466889605, 0.01873194020503358, 0.01873194020503358]), ([0.0, 0.02, 0.04, 0.14, 0.19, 0.8, 1.0], [1.0, 0.14985567770000166, 0.15087609025450124, 0.0796817607018732, 0.07769791455567743, -0.055427153168657955, -0.055427153168657955])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
