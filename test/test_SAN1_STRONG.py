import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_SAN1_STRONG(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "SAN-1"
        self.expected_solver_name = "STRONG"
        self.expected_all_recommended_xs = "[[(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.128665227434481, 7.971340780393595, 7.713176791391591, 7.1699689361985754, 7.480594511171233, 7.996398836769232, 7.118727619128119, 7.696391497205113, 7.534865727404901, 7.871847395568138, 7.06823943283002, 7.841302144572143, 7.548352642536875), (6.302381185126452, 7.927326634963882, 7.481909171049245, 6.232782466279833, 7.027709847142612, 7.994774289448442, 6.135473948815445, 7.398917761654489, 7.12361036641789, 7.69551952684428, 6.215257241753448, 7.6864040558573405, 7.134427337911771), (5.333113100870104, 7.874930763634078, 7.288135913106906, 5.372757632318369, 6.586246781958725, 7.994736302588063, 5.255776796087147, 6.817426175352811, 6.751083371088891, 7.516920549748352, 5.480506713339056, 7.393911485856117, 6.7129894673028225), (4.386729069075645, 7.815213155229762, 6.691967840716733, 4.566312718329168, 6.124440265920679, 7.857519200592454, 4.457354679382068, 6.257514125793537, 6.417394437787564, 7.3452106132089785, 4.756001488440842, 7.106342956500701, 6.308623241884419), (3.1537941582181728, 7.712370390658817, 6.212673442747914, 3.832543893939657, 5.72302610113583, 7.718868446866047, 3.7525523538208274, 5.715721798707429, 6.075699635826975, 7.198753595960804, 4.105294051590516, 6.861881354725396, 5.978281270457375), (1.9639490280037615, 7.537455901053642, 5.747656008490039, 3.148318941970881, 5.139187601721774, 7.557999922931495, 3.1276416135692697, 5.137799621694812, 5.77542342997168, 6.99518538943263, 3.449894669645604, 6.600642512411229, 5.592775057906008), (1.9639490280037615, 7.537455901053642, 5.747656008490039, 3.148318941970881, 5.139187601721774, 7.557999922931495, 3.1276416135692697, 5.137799621694812, 5.77542342997168, 6.99518538943263, 3.449894669645604, 6.600642512411229, 5.592775057906008)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (6.843347963299614, 8.013582907683947, 7.835124914613992, 7.233767058468622, 8.013582907683947, 7.629033618098126, 7.323411645743942, 7.281711759129498, 7.97947903394005, 7.490040761750328, 7.841044047823915, 7.623124928828921, 7.286990071983624), (5.604495779573166, 8.028404321270726, 7.632491887193011, 6.4927647381184554, 7.700746553494098, 7.222134849412117, 6.6919974966876525, 6.663815639073114, 7.960482819133846, 7.019715838426381, 7.581436120600413, 7.268699679547781, 6.641708387866325), (4.364371874807649, 8.04418825985049, 7.408503087415743, 5.811912885738227, 7.106475555909299, 6.797023374280298, 6.095484018921639, 6.130709648369461, 7.939332990045939, 6.578481001691657, 7.2103920748595325, 6.938195960528945, 6.065372252548433), (3.1562325103990894, 7.80947114021812, 7.186892810912225, 5.160549038377317, 6.494984613653112, 6.2359832587090915, 5.520421632993852, 5.631237372361486, 7.885589336299154, 6.1488662277242545, 6.747580646428946, 6.620713032113233, 5.574844347923585), (1.9689542857844295, 7.581284587221661, 6.981473700351831, 4.517985063741789, 5.928960718133413, 5.709190361098689, 4.73846095649626, 5.183157623804777, 7.748558919606308, 5.758709488936676, 6.259894908845145, 6.336976659900426, 5.146194431910719), (1.9689542857844295, 7.581284587221661, 6.981473700351831, 4.517985063741789, 5.928960718133413, 5.709190361098689, 4.73846095649626, 5.183157623804777, 7.748558919606308, 5.758709488936676, 6.259894908845145, 6.336976659900426, 5.146194431910719)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (6.975887607138997, 8.012841282117519, 8.012841282117519, 6.856346282825169, 7.848599340313932, 8.012841282117519, 7.363873558415744, 7.517735863213212, 7.7544376989598485, 7.785878239899534, 7.198634705988395, 7.755908380830113, 7.582050775214537), (5.978268439202276, 7.871579548471646, 8.014005761344432, 5.779797187596891, 7.640668647487123, 7.909447266105234, 6.8045000760951755, 7.0551853625796745, 7.528847025301142, 7.571285777929111, 6.234533679695833, 7.520218866869654, 7.178215113921547), (4.935604143145499, 7.740161268773496, 7.813015652034404, 4.812022637505361, 7.402887746272676, 7.762081157764583, 6.336556917779327, 6.629714556948992, 7.321309998851766, 7.2921414573963865, 5.16481634352364, 7.301829854426135, 6.821338446402761), (3.866918840047235, 7.61303301893932, 7.631585048365655, 3.8928644931704444, 6.980018894777469, 7.597094785756407, 5.924069865348863, 6.220779832001049, 7.120133858904809, 7.00448284814917, 4.098374892073778, 7.090375642945475, 6.481720927853816), (2.7925367301191915, 7.289149017142858, 7.45897523957179, 3.0374354280218223, 6.5499657098828585, 7.324302604969104, 5.486342860756702, 5.801716540070416, 6.911828336042081, 6.67986182983823, 3.0878390877256074, 6.87165846708777, 6.1144620226449735), (1.723244601154015, 6.937956789552995, 7.228307942546383, 2.3225596242828552, 5.992364811923888, 7.03291679626608, 5.011521516910024, 5.360327295276675, 6.7040731183121505, 6.312330068228066, 2.1200919327248915, 6.639300432915846, 5.685331876567434), (1.723244601154015, 6.937956789552995, 7.228307942546383, 2.3225596242828552, 5.992364811923888, 7.03291679626608, 5.011521516910024, 5.360327295276675, 6.7040731183121505, 6.312330068228066, 2.1200919327248915, 6.639300432915846, 5.685331876567434)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.330140190134353, 7.735435739857496, 8.013580167247992, 7.243777710190462, 8.001685670992119, 7.791702628459009, 7.600199162754615, 7.257961841923433, 7.602128908790244, 7.762895405908857, 7.781639677837151, 7.137389081664423, 6.928045607142257), (6.381637491198723, 7.443460101867941, 8.027160569520053, 6.450997301711313, 7.986482803815062, 7.577274384662747, 7.186576507509181, 6.585334161177907, 7.264146175249099, 7.420977546090044, 7.5844769293130465, 6.3553717830404635, 6.014196056611579), (5.491381521929959, 7.128861377074336, 8.04033010673743, 5.641771972278482, 7.959240430700215, 7.368008363573304, 6.30513237087498, 6.004652669566162, 6.881519933486725, 7.1338024491145715, 7.202241479155818, 5.685477708784354, 5.327865729027134), (4.66549517599281, 6.79608371225185, 8.008688884081016, 4.752981194385572, 7.919240184526243, 7.130886368949679, 5.481798321360674, 5.425505599833217, 6.544546718864434, 6.871507520511221, 6.786822262655857, 5.053278995858299, 4.559422175442142), (3.7949164579249963, 6.429848467590597, 7.930784315967017, 3.845317476774628, 7.863848622626265, 6.836779835698786, 4.685561272916783, 4.876881431417404, 6.136218261176854, 6.6191662690331885, 6.323231327284352, 4.455744515495899, 3.8877668661024467), (2.942260194665809, 6.043216036337685, 7.801483044901217, 3.030192595960008, 7.791898149661419, 6.509792387749656, 3.91911862352227, 4.350697666935678, 5.714591100510037, 6.370942143885432, 5.551636404441251, 3.905433547682354, 3.314741252238277), (2.2020313977337063, 5.629265298067887, 7.581200683520322, 2.3171212843407156, 7.701271615544075, 5.765118633629524, 3.179172427054282, 3.8582728269838866, 5.350446515346022, 6.108776689842945, 4.744677477715851, 3.3991339394284537, 2.802781949245923), (2.569010033584762, 5.149015572819661, 7.180395765696412, 2.2037224676590386, 7.556949628142773, 4.8013034845621805, 2.405064689959665, 3.320845772714627, 4.917432163140645, 5.780835343759067, 3.8091067284837945, 2.8773882411433576, 2.3775928767651813), (1.7264432229354183, 4.717230034432869, 6.724502335019278, 2.640723483032915, 7.343422109389049, 3.8603193483552793, 2.1867086457782445, 2.8311162546654804, 4.352987887353843, 5.355389559872817, 2.890616613792816, 2.500377081294386, 2.40777964856497), (1.7264432229354183, 4.717230034432869, 6.724502335019278, 2.640723483032915, 7.343422109389049, 3.8603193483552793, 2.1867086457782445, 2.8311162546654804, 4.352987887353843, 5.355389559872817, 2.890616613792816, 2.500377081294386, 2.40777964856497)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.246984692827795, 8.014370556133535, 7.919117872202466, 6.847987402190963, 8.014370556133535, 8.011695193788864, 7.39797515000003, 7.710253268229083, 7.905367531150976, 7.59525487839986, 7.379862345718303, 7.516377557380302, 7.072034043588237), (6.384493502208855, 8.024792877813706, 7.808540140159936, 5.703001790160594, 8.027804783492156, 8.022856591935454, 6.891172736278907, 7.215438009102492, 7.8223813447654384, 7.253647653821094, 6.847405280217481, 6.8563548676200705, 6.305181859899223), (5.374763876275276, 8.007443446048157, 7.611603747148696, 4.469502635639228, 7.98996475414841, 8.00931293892086, 6.4497627983706245, 6.743222335008934, 7.643798959216688, 6.957951003708976, 6.296300474930419, 6.36729569680108, 5.723656502032309), (4.356651555533066, 7.917280068830316, 7.320590326775549, 3.288222944125709, 7.905786409452059, 7.937101030070601, 6.0353993576424765, 6.2650565163169665, 7.438657710543881, 6.671235839736658, 5.675712593392246, 5.825220386776565, 5.21443778177542), (3.362495695833502, 7.678567446443605, 6.9633793056679885, 2.204519987002099, 7.776765295337618, 7.74191165554548, 5.676025627455436, 5.841002841407457, 7.228351347397807, 6.399861256965045, 4.82159553798576, 5.359346419877174, 4.740607819904649), (2.26631800133847, 7.221135518272137, 6.499365259363898, 2.3002774492367024, 7.571963356217934, 7.4504363571916175, 5.217844699232917, 5.366579124397285, 6.91553364814299, 6.104303033279076, 3.7434133866621466, 4.830538519357954, 4.321753987722483), (2.247155914163777, 6.633660566189015, 6.019430824223511, 1.794106967379225, 7.3209213631646985, 7.1222550273876974, 4.606867452704626, 4.772342455566526, 6.5905980267199284, 5.441324898066317, 2.7553094141645995, 4.2169532367848515, 3.7111269581939945), (2.247155914163777, 6.633660566189015, 6.019430824223511, 1.794106967379225, 7.3209213631646985, 7.1222550273876974, 4.606867452704626, 4.772342455566526, 6.5905980267199284, 5.441324898066317, 2.7553094141645995, 4.2169532367848515, 3.7111269581939945)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (6.955290102021191, 7.770238927944726, 7.639200476327142, 7.4872382790002545, 8.016895311306563, 7.233323685054908, 7.2548139158742355, 7.790756678823289, 7.245384485000926, 7.79707292572153, 7.327671548822561, 7.862624832202966, 7.559539271657735), (6.060724314195767, 7.56705668267352, 7.32071615217045, 7.033668134736673, 8.032404407009684, 6.576754793594294, 6.631266051243891, 7.617679273236675, 6.397967654576739, 7.591745868837178, 6.293537943362152, 7.749471292243267, 7.161155794914446), (5.177449410877263, 7.3647890479813105, 6.988582831171938, 6.534156634864196, 8.049000207154249, 5.948985230066586, 5.965100024708753, 7.449557789251215, 5.570557764640731, 7.25436284928019, 5.313468249999516, 7.6400159665671055, 6.734863156080575), (4.279944923929346, 7.157864162958887, 6.6599223621174435, 6.02877454352289, 8.063920645851383, 5.379938342414195, 5.339237090424971, 7.024730780750886, 4.826850760306448, 6.858670098732842, 4.360310925275023, 7.462701742059594, 6.242524283778683), (3.3771300153901116, 6.880293001074555, 6.365083107399646, 5.455383025329619, 8.053877195335236, 4.870509634194412, 4.755155318495745, 6.608070600800768, 4.045624636305858, 6.4398740182320315, 3.447192475750092, 7.239857197766857, 5.743879758499935), (2.253727316428301, 6.522605820168025, 6.134858997828733, 4.830955310722968, 8.020699416909155, 4.403440263773614, 4.270868195001662, 6.110571881106264, 3.4814420563343034, 5.939367394309219, 2.8033659949524092, 6.92311534202859, 5.1256785091881785), (2.2348384343238514, 5.9311437674687975, 5.870848790347186, 4.00656635704646, 7.964490740057614, 3.7959796553311134, 3.8497251929199057, 5.339613099575409, 3.0322511932807035, 5.4188196920134, 2.3140782010415535, 6.234973643009891, 4.3700947934082075), (2.1240463774826384, 5.422282523484559, 5.454705352233756, 3.252719665621822, 7.792124482054253, 3.0276684792976782, 3.485766883829272, 4.5495404360635625, 2.791359269236851, 4.84116106258946, 2.7472425056883054, 5.534607310866949, 3.6347242884807716), (2.1240463774826384, 5.422282523484559, 5.454705352233756, 3.252719665621822, 7.792124482054253, 3.0276684792976782, 3.485766883829272, 4.5495404360635625, 2.791359269236851, 4.84116106258946, 2.7472425056883054, 5.534607310866949, 3.6347242884807716)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (7.229689614536666, 7.953483262829209, 7.481206476817893, 7.242397298339198, 8.017799862544472, 7.440975681082435, 7.21639668385896, 7.667914979093888, 6.932601088360684, 7.953848490302911, 7.7628336895329495, 7.777561438892412, 7.473680024299587), (6.460924999348441, 7.8700567922119165, 6.842613671081865, 6.5648913418601165, 8.036446672739542, 6.63074143770071, 6.537766617931437, 7.353634152983496, 6.004201587281258, 7.923165013123139, 7.405502520537865, 7.533533352876932, 6.95504230812767), (5.755152094852617, 7.786591222387226, 6.3586544173277915, 5.6521708333236, 8.054785902410343, 5.987062726182319, 5.823627099823015, 6.991669426024929, 5.22769499971111, 7.860437605945754, 6.983840157067022, 7.1035625722123665, 6.32069282645479), (5.052150490841423, 7.656690305138089, 5.777845781897642, 4.8010527692863345, 8.073916882224333, 5.183646827127562, 5.2572312051900365, 6.566096770578207, 4.590288596162965, 7.785751553605307, 6.55767783566443, 6.6224123377922774, 5.646578912633884), (4.321390242137381, 7.498603877692258, 5.331086568375623, 3.867014577046949, 8.09182930196824, 4.540740103638884, 4.5012935567023655, 6.163380184308787, 4.0955201255610625, 7.662010999672316, 6.171411389641913, 6.166932728985371, 4.8688040684494975), (3.4885351499609394, 7.297529190711305, 4.802635826654724, 3.0800143788173, 8.090960418969619, 3.67366451074484, 3.8842337256673667, 5.753764993421544, 3.6770578602979267, 7.54715974155628, 5.713382295244426, 5.736173653884583, 4.17362202194413), (2.7803006804008685, 7.0577544279535385, 4.348452097622443, 2.286771384020186, 8.0586190178102, 2.8729424071353633, 3.298427055145342, 5.353224190144066, 3.315742689153159, 7.080374584537249, 5.249718232724612, 5.296127867094186, 3.3354521382415245), (2.066502933736805, 6.699472756127788, 3.90838671072485, 2.3662726093927424, 7.984839660599901, 2.063065339312988, 2.5905217773356015, 4.902605685262446, 2.9743008337941883, 6.447476363834639, 4.671678104663567, 4.7997836859727, 2.499397583238728), (2.066502933736805, 6.699472756127788, 3.90838671072485, 2.3662726093927424, 7.984839660599901, 2.063065339312988, 2.5905217773356015, 4.902605685262446, 2.9743008337941883, 6.447476363834639, 4.671678104663567, 4.7997836859727, 2.499397583238728)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (6.935437491220769, 8.012840677763819, 7.823836553655574, 7.1531936691634455, 7.867699656347042, 7.3666726871997215, 7.8236120739033845, 7.077268666178648, 7.4257656050423675, 8.012840677763819, 7.35244156432099, 7.848415207674448, 7.787739125309694), (5.78817603362927, 8.025800221713453, 7.663467346220702, 6.314115334902952, 7.726765042660217, 6.7872993344813395, 7.662729689600654, 6.232863130162577, 6.900530884392158, 7.6927714997030385, 6.760031270011285, 7.710583147112709, 7.454348750261969), (4.720972756706311, 8.038788923092255, 7.512223695705156, 5.296316596356805, 7.585890854839045, 6.257518373033816, 7.516179651839881, 5.395250936987708, 6.420242131992394, 7.399972953492468, 6.218336914901957, 7.52643908120386, 7.0872180432745795), (3.649527163263682, 8.052659237712689, 7.341165181062427, 4.298656183384711, 7.44831647014572, 5.738959824336698, 7.25780560475636, 4.627335068630045, 5.953819504384381, 7.0538975259136105, 5.688168185453461, 7.346270132111442, 6.605466001485342), (2.555187765436334, 8.067348268626573, 7.072227268622464, 3.352208192662263, 7.279364780478088, 5.227340016279902, 7.000326567377318, 3.9291371754630666, 5.462942098090668, 6.711076651212148, 5.072516311384113, 7.170565947778238, 6.13466573585725), (1.6737664290263174, 8.056425733602783, 6.795965244586779, 2.492829912525908, 7.067784220158726, 4.750277610390699, 6.7494154904412085, 2.8263365388585884, 5.024489619361981, 6.408007049786614, 4.49286310077471, 6.94994069019216, 5.701214702698002), (1.6737664290263174, 8.056425733602783, 6.795965244586779, 2.492829912525908, 7.067784220158726, 4.750277610390699, 6.7494154904412085, 2.8263365388585884, 5.024489619361981, 6.408007049786614, 4.49286310077471, 6.94994069019216, 5.701214702698002)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (6.954046180565692, 8.013449968710818, 7.341088499321709, 7.722225422183232, 7.911163724956371, 6.868717258254945, 7.640153435474856, 7.732012692201307, 7.612570669288216, 8.013449968710818, 7.4112885828811725, 7.446731982382458, 7.679830776696328), (5.771197275739363, 8.02702244145269, 6.747506035168904, 7.442786850209823, 7.78624877194935, 5.878423873109659, 7.100936140136151, 7.487554139049204, 7.258643834935593, 7.888430717013216, 6.872948061633194, 6.9408586799825365, 7.309903950335681), (4.540210490745737, 8.041255246766742, 6.179761556571948, 7.108082162839541, 7.645168362357783, 4.964078889222545, 6.57279629891095, 7.254101953298421, 6.821798604935181, 7.769497690845487, 6.328497333327379, 6.456969670934099, 6.9560792664460545), (3.3896105025487446, 8.05580266476519, 5.648274372741338, 6.792456395247694, 7.509766113019853, 4.114238999117058, 5.882008826220272, 7.020665378770829, 6.414609887684599, 7.636322319165783, 5.818513606749332, 6.003674340966149, 6.3457762067049845), (2.2992243556250394, 8.071406416780073, 5.133637796628698, 6.45844877944542, 7.367720623555458, 3.353848244141081, 5.154052708406623, 6.764857011310896, 5.793160149428008, 7.495720230120302, 5.298672022090903, 5.5566945810688955, 5.7418898552637625), (1.7601874781576599, 8.057330976091302, 4.658190584742508, 6.058842961276601, 7.190182039927644, 2.747305112202811, 4.275285623408491, 6.425091054077252, 5.142734726991911, 6.854537024184642, 4.708162845004995, 5.015499169667045, 4.993119826966927), (1.7601874781576599, 8.057330976091302, 4.658190584742508, 6.058842961276601, 7.190182039927644, 2.747305112202811, 4.275285623408491, 6.425091054077252, 5.142734726991911, 6.854537024184642, 4.708162845004995, 5.015499169667045, 4.993119826966927)], [(8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8, 8), (6.839331564936399, 8.01697202876853, 7.4746404034856955, 7.449708393073219, 8.01697202876853, 7.336955294379803, 7.347046244447207, 7.486290038232994, 7.613817926970205, 7.94961844157787, 7.4697918585311935, 7.3092604036547675, 7.81654004670093), (5.737605336026496, 8.03450507991719, 6.983379584713114, 6.787256598800521, 8.03450507991719, 6.716636591071278, 6.542419872681379, 7.005951218139806, 7.255472131349315, 7.784909369445265, 6.974852922163334, 6.69212752864885, 7.569351189268634), (4.7935800611014425, 8.039174861157983, 6.568308538383021, 6.006694660079067, 8.050768579301238, 6.192559374681601, 5.570118913569855, 6.600114628456309, 6.936511460911308, 7.64197173406894, 6.560808825794637, 6.191309834680287, 6.93862011838771), (3.8293745077281995, 7.991423065861005, 6.183678920409296, 5.30086913360845, 8.066949226066807, 5.698696528496911, 4.599611734762101, 6.006099025967551, 6.6233856729165606, 7.48881936999778, 6.1674868989922205, 5.72213886884816, 6.316792315254252), (2.9440439321413767, 7.699667773605444, 5.757269477307433, 4.644577212946579, 8.084678018676483, 5.113193984101319, 3.7043128362375004, 5.387674477190863, 6.353798371216577, 7.3498711316672125, 5.614109085929788, 5.265037266146794, 5.6969252828074515), (2.218342185912678, 7.371168939431524, 5.31023558909182, 3.8925666895309927, 8.098017208874285, 4.506418634159417, 2.8876518812000067, 4.699373082943736, 6.070963961058266, 7.218059015139266, 5.034990225272804, 4.819153491610918, 5.019077622907149), (2.702077613338633, 6.922391008657529, 4.852501390546387, 2.84822471879011, 8.073160478526955, 3.8975822153814965, 2.327048495420393, 4.094982084309662, 5.765187080916682, 7.097769394330563, 4.291613021174689, 4.441268057401878, 4.378619023761654), (2.128070562706009, 6.4604039863875045, 4.376042780491733, 1.850093365276253, 8.01270516502463, 3.315604681592951, 2.2036829052960494, 3.5466630737836233, 5.440729207262964, 6.904503384346249, 3.5057681780621417, 4.110730251986423, 3.5382932717031723), (2.128070562706009, 6.4604039863875045, 4.376042780491733, 1.850093365276253, 8.01270516502463, 3.315604681592951, 2.2036829052960494, 3.5466630737836233, 5.440729207262964, 6.904503384346249, 3.5057681780621417, 4.110730251986423, 3.5382932717031723)]]"
        self.expected_all_intermediate_budgets = "[[10, 280, 577, 901, 1252, 1630, 2035, 10000], [10, 280, 577, 901, 1252, 1630, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 10000], [10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000]]"
        self.expected_all_est_objectives = "[[53.523223876925904, 50.07671628891105, 46.681574667465924, 43.27964711813638, 39.975980908805106, 36.83844850775702, 33.927843620430835, 33.927843620430835], [54.953360714200635, 51.25228051704833, 47.57197967047799, 44.003718768269934, 40.52684194208157, 37.17578839167466, 37.17578839167466], [53.8672782395678, 50.137955697008664, 46.511423140629915, 43.00399967346072, 39.67414477525087, 36.44477767666895, 33.507950761419266, 33.507950761419266], [52.695576178381195, 49.35065628370503, 45.930354184855176, 42.47255935374495, 39.13161699105719, 35.887817154147584, 32.80645799112945, 29.922410764477327, 27.977464712374104, 25.64139070825213, 25.64139070825213], [52.78821960384539, 49.3485456842903, 46.07042344781516, 42.91752118552473, 39.8403045645787, 36.798977871581464, 33.85164698759936, 31.135155577280756, 31.135155577280756], [54.034159529816264, 50.61903116946448, 47.39751508235964, 44.208471857388794, 40.905635711360524, 37.66038317020177, 34.29895381872975, 31.20098630392866, 28.439880480310734, 28.439880480310734], [54.76136678045259, 51.30881528986292, 47.91123224917082, 44.28839158678735, 40.7559598761386, 37.263013735360495, 33.95847553029, 30.82283938159082, 28.251893463518826, 28.251893463518826], [53.224291400680606, 49.76957864398526, 46.25266749636526, 42.814130400920334, 39.42321180287726, 36.169539655270526, 33.415271731562385, 33.415271731562385], [55.38260900616551, 52.346832381115426, 49.13815276759752, 45.94505788875631, 42.73586554759875, 39.58829209501196, 36.35159964569515, 36.35159964569515], [52.56075901754922, 49.07576238259851, 45.54129045527419, 41.98751454185192, 38.552202559740955, 35.2162193414253, 32.065454866939355, 29.890493301469697, 27.29217044276732, 27.29217044276732]]"
        self.expected_objective_curves = "[([10, 280, 577, 901, 1252, 1630, 2035, 10000], [55.70371272821374, 50.07671628891105, 46.681574667465924, 43.27964711813638, 39.975980908805106, 36.83844850775702, 33.927843620430835, 33.927843620430835]), ([10, 280, 577, 901, 1252, 1630, 10000], [55.70371272821374, 51.25228051704833, 47.57197967047799, 44.003718768269934, 40.52684194208157, 37.17578839167466, 37.17578839167466]), ([10, 280, 577, 901, 1252, 1630, 2035, 10000], [55.70371272821374, 50.137955697008664, 46.511423140629915, 43.00399967346072, 39.67414477525087, 36.44477767666895, 33.507950761419266, 33.507950761419266]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 3412, 10000], [55.70371272821374, 49.35065628370503, 45.930354184855176, 42.47255935374495, 39.13161699105719, 35.887817154147584, 32.80645799112945, 29.922410764477327, 27.977464712374104, 26.824672427496584, 26.824672427496584]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 10000], [55.70371272821374, 49.3485456842903, 46.07042344781516, 42.91752118552473, 39.8403045645787, 36.798977871581464, 33.85164698759936, 31.135155577280756, 31.135155577280756]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [55.70371272821374, 50.61903116946448, 47.39751508235964, 44.208471857388794, 40.905635711360524, 37.66038317020177, 34.29895381872975, 31.20098630392866, 28.439880480310734, 28.439880480310734]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [55.70371272821374, 51.30881528986292, 47.91123224917082, 44.28839158678735, 40.7559598761386, 37.263013735360495, 33.95847553029, 30.82283938159082, 28.251893463518826, 28.251893463518826]), ([10, 280, 577, 901, 1252, 1630, 2035, 10000], [55.70371272821374, 49.76957864398526, 46.25266749636526, 42.814130400920334, 39.42321180287726, 36.169539655270526, 33.415271731562385, 33.415271731562385]), ([10, 280, 577, 901, 1252, 1630, 2035, 10000], [55.70371272821374, 52.346832381115426, 49.13815276759752, 45.94505788875631, 42.73586554759875, 39.58829209501196, 36.35159964569515, 36.35159964569515]), ([10, 280, 577, 901, 1252, 1630, 2035, 2467, 2926, 10000], [55.70371272821374, 49.07576238259851, 45.54129045527419, 41.98751454185192, 38.552202559740955, 35.2162193414253, 32.065454866939355, 29.890493301469697, 27.29217044276732, 27.29217044276732])]"
        self.expected_progress_curves = "[([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 1.0], [1.0, 0.8051529281891354, 0.6875887160099372, 0.5697895262202037, 0.45539285046746986, 0.3467489215703531, 0.245962854685232, 0.245962854685232]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 1.0], [1.0, 0.8458594134426667, 0.7184209387479605, 0.5948620924341015, 0.4744676198344693, 0.35843005364416575, 0.35843005364416575]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 1.0], [1.0, 0.8072734767759281, 0.6816968468527831, 0.560244629928452, 0.4449411134841347, 0.3331172071162444, 0.23142314510211465, 0.23142314510211465]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 0.3412, 1.0], [1.0, 0.7800115108274237, 0.6615760620301548, 0.5418423452894237, 0.42615490111196636, 0.3138312295795347, 0.20713242203842624, 0.10726597230115771, 0.03991795685983696, 0.0, 0.0]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 1.0], [1.0, 0.7799384267016096, 0.6664262669366006, 0.5572501229422263, 0.4506947599903069, 0.34538216437328034, 0.24332437944374055, 0.1492599167042656, 0.1492599167042656]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.8239317683066154, 0.7123797204006177, 0.6019521164441367, 0.48758418345066223, 0.37521020885296186, 0.2588133578333473, 0.1515394497483837, 0.05593011526681653, 0.05593011526681653]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.8478170537321602, 0.7301683020661388, 0.6047195120558452, 0.482401329946413, 0.36145042214594286, 0.2470235516315362, 0.1384452846237744, 0.04942065321979554, 0.04942065321979554]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 1.0], [1.0, 0.7945176147670976, 0.6727368661342331, 0.5536699906550109, 0.436252009907262, 0.3235864880018842, 0.22821393077602153, 0.22821393077602153]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 1.0], [1.0, 0.8837606682167014, 0.772653111313634, 0.6620852099709459, 0.5509598987507573, 0.44196827645960296, 0.3298907137839337, 0.3298907137839337]), ([0.001, 0.028, 0.0577, 0.0901, 0.1252, 0.163, 0.2035, 0.2467, 0.2926, 1.0], [1.0, 0.7704927076316095, 0.648103878552807, 0.5250466066900014, 0.40609140782123365, 0.29057568487552304, 0.18147356646448626, 0.10616076026241701, 0.016188142348314997, 0.016188142348314997])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 10
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
