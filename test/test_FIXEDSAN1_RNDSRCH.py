import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_FIXEDSAN1_RNDSRCH(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "FIXEDSAN-1"
        self.expected_solver_name = "RNDSRCH"
        self.expected_all_recommended_xs = "[[(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (0.1960868262262368, 1.7796135691996542, 1.2820651904841724, 0.9056949268349318, 0.5562335504646729, 1.143675436199959, 0.29529862159736137, 0.22487410478955897, 0.1948749140929799, 0.9412745736035047, 0.4496971228178462, 1.4060158406361205, 0.557898739560154), (3.3226997394609716, 1.9364777802467783, 0.4649732684997351, 0.7357740288917657, 0.5999184021770918, 0.6531938866020959, 0.45330302474652984, 1.2779851104193691, 5.4126853462427, 1.595542036265024, 3.1731896226412046, 9.790103973990766, 1.1585631268428287), (1.891832551567722, 0.2597923869447272, 0.8319503523528584, 2.9415236941968086, 2.3765492760398743, 1.3047095191807447, 0.5100204429133709, 0.40543767572837586, 0.6533535810007305, 1.5896600819456872, 1.6209828815823202, 0.997135512649886, 2.3929818289845044), (0.8891474417413017, 0.985335237597565, 1.1588468993180863, 0.3898780587485494, 2.2631505940877097, 3.8363424654332117, 1.383354458181854, 2.4253163431609313, 5.195163150026689, 3.616905007896434, 0.5476505650315783, 6.332698095344877, 1.1494393764787216), (1.088547037194216, 0.7628873832417162, 0.561521207190516, 1.5805579060742119, 0.8568821670538688, 1.3350313139313676, 0.9966186334624763, 2.3942902592925117, 2.600745939674509, 2.5092289477097567, 0.7644326210979902, 1.9473536199171277, 0.6068126368925623), (0.9705074213645866, 1.6062548020974527, 1.1036705986023219, 1.113798167160827, 1.3245630397696924, 2.7563382447707188, 0.5457806548187589, 1.0357479550973214, 3.246578429066266, 1.9544359703272818, 0.382861746866544, 0.5013734093103733, 1.4329924509318634), (0.9705074213645866, 1.6062548020974527, 1.1036705986023219, 1.113798167160827, 1.3245630397696924, 2.7563382447707188, 0.5457806548187589, 1.0357479550973214, 3.246578429066266, 1.9544359703272818, 0.382861746866544, 0.5013734093103733, 1.4329924509318634)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (0.7751772441855154, 0.5217046225116457, 0.4107329784631801, 0.9965720707775174, 0.5333369471741016, 6.452003025605507, 2.5855155692925162, 0.27253616504913164, 2.20021967377238, 1.130583248358226, 0.3333347373565821, 0.47340968558107493, 0.9520202041701445), (0.4332455021748569, 4.108542816085184, 0.7811953114147324, 3.0358031524986404, 1.2274106484326013, 0.7806172525391533, 1.3164075228291978, 0.14013875854118027, 2.3463572362868823, 2.0604876534934946, 0.26231028645670024, 2.5615882414766684, 1.8791167051477933), (0.26081081603696077, 0.5995655306906057, 0.20026705068361683, 1.1998980471532668, 0.829030642971745, 1.9251606226697626, 0.6227797942067801, 1.4063817500187934, 0.5342769627380625, 0.35429577092935954, 1.4940605407147054, 0.5109500094374292, 1.220558396356272), (1.6347551356078882, 10.473183975219113, 4.113486148548108, 0.4835484381718077, 1.8543999988578026, 1.0581598562411845, 1.0059689440881627, 0.4159560460890282, 3.6069181014659124, 0.36238604092196464, 1.6231947554488801, 1.1809037790646033, 0.7348098800729297), (2.646726133689833, 1.6934697755237704, 5.029686183658338, 1.2175042220916146, 1.598736853750509, 0.7985402767156081, 1.8256154055393072, 1.2654698769663544, 0.9242448981385026, 2.806100625595978, 1.2408101775179443, 0.4413268565714863, 1.3467616934914723), (0.7247416623322506, 0.7527355029361964, 3.3246575202241084, 1.3307423736429849, 1.0114636541022988, 1.0804851238887183, 2.115890637937191, 1.0969684738022816, 3.0414931576677557, 2.720815663322174, 1.8439755453153253, 3.8991779680523426, 4.472867813588701), (1.7489054906238037, 2.768050360705959, 0.9130362187124104, 0.5124144711747488, 1.0308750094359473, 2.248438243392408, 1.5483102061029619, 1.2111762107528863, 2.077914657680098, 1.1255239923482105, 0.9142525502642843, 2.3911605047328304, 1.013134783180605), (1.7489054906238037, 2.768050360705959, 0.9130362187124104, 0.5124144711747488, 1.0308750094359473, 2.248438243392408, 1.5483102061029619, 1.2111762107528863, 2.077914657680098, 1.1255239923482105, 0.9142525502642843, 2.3911605047328304, 1.013134783180605)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (0.29360035955537117, 0.2130231182497829, 0.20043495403197642, 0.11180421103285271, 3.2804801697178902, 2.515807948884934, 0.795484826303316, 0.5631992923544213, 5.095633150539393, 2.2320835160697015, 0.4315395084767616, 0.9931493764190482, 1.0132092179402108), (1.4495535717259753, 3.22113987659905, 15.439307300953729, 0.40188863162155913, 0.9987821371130792, 0.21501725329800797, 4.7356245268973645, 3.9353164689929625, 0.31736555248299053, 0.9939416857491913, 0.6000720150990749, 2.6499232687273184, 0.5108740548751163), (4.279580377487999, 1.3279345298010552, 2.3134279656751717, 1.0566676115615161, 0.8704266324829312, 3.538208007095115, 2.505105245893458, 0.7296117911890162, 0.4031329834179283, 0.5015844806409561, 2.505487875530965, 3.106673606007233, 2.39200376881195), (1.1644093438743717, 3.7571236167671502, 2.5291118964509103, 1.0251641359822408, 1.7932016827814967, 0.7245371834794013, 0.6914259983893175, 1.5176820768448778, 1.2563039716794584, 0.7966601547750229, 0.5049051177816403, 1.0409465442695451, 1.086338372038444), (1.1644093438743717, 3.7571236167671502, 2.5291118964509103, 1.0251641359822408, 1.7932016827814967, 0.7245371834794013, 0.6914259983893175, 1.5176820768448778, 1.2563039716794584, 0.7966601547750229, 0.5049051177816403, 1.0409465442695451, 1.086338372038444)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (0.17508472216749252, 8.547621076504065, 1.0125980758658424, 1.8599470449725506, 0.2975778085022722, 0.7908803393131751, 1.941915053575108, 0.6543353587900118, 0.37049529424499855, 0.5117489454283721, 7.184644691730161, 0.31054470162340975, 1.2489076651916542), (0.9181707773675212, 1.3097948533313313, 1.3409920942437645, 0.11915370968433643, 0.5945747823377834, 0.136905935170129, 0.7710338802756364, 1.289676803685063, 1.756984634103518, 1.0628823584884433, 1.2724587214707253, 0.5339166373874368, 4.511365745871041), (2.541899018622928, 0.3333870838465204, 2.5632960695687026, 13.176705675677333, 1.3407734262783737, 5.5389252858400395, 1.1609697249601687, 0.5416162280425767, 5.4683097229336814, 1.5714442044992387, 0.6131265129179446, 1.6188850111118285, 2.4981033842291565), (1.9993795064420348, 1.3360129157038265, 0.6505396792586323, 1.9768917174067064, 0.6585265915141896, 0.9484552893970919, 0.5785474194125769, 1.0427685020712512, 0.7839766846245363, 0.7211148959869731, 1.462009994274223, 0.6455524522870727, 2.243707633357869), (0.6018065938183128, 1.1389992546772407, 0.6522762615437921, 0.7353695883158388, 1.2277656049948624, 3.339847898864352, 2.173056287924049, 1.7072014646949403, 3.802577683574333, 0.8800369532267122, 1.5284212246760487, 1.284861281315746, 0.8376152346865529), (0.6018065938183128, 1.1389992546772407, 0.6522762615437921, 0.7353695883158388, 1.2277656049948624, 3.339847898864352, 2.173056287924049, 1.7072014646949403, 3.802577683574333, 0.8800369532267122, 1.5284212246760487, 1.284861281315746, 0.8376152346865529)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (3.4528226147962844, 0.38216210341942375, 1.0468045557450767, 5.219531707451578, 0.25180847320436694, 0.4704107693122269, 1.3194782621527334, 0.9461870795003203, 0.41749210598824515, 1.0789668686934684, 0.43113934303827933, 0.40728442606166204, 1.0458804284695546), (2.079188318904887, 0.4926110138993005, 2.3328540115212646, 0.789079808952555, 0.8117928935922796, 1.7050348806587476, 2.039133819694644, 2.5831366997274876, 3.2931925184389526, 0.9511095024712267, 0.10030278246411245, 0.9665025125765996, 2.4224660805564406), (0.8139568466303584, 1.5582433606067665, 3.0561239480996036, 2.566449834571652, 0.6618946362895177, 7.984886298104512, 8.541954476673597, 0.9666066350300743, 2.188757831291287, 1.9635736427516788, 3.5779192974766625, 1.6383084046250977, 0.816922400518329), (3.6814510898559405, 1.0059501670228672, 0.7306016896620006, 2.265866487382744, 0.9286705000093993, 3.9308534921463196, 2.4328384560567065, 0.8207472857930804, 2.128155388902591, 5.505473436328713, 2.6625839363648014, 0.6176372822284746, 1.70158612513639), (0.8441595656757273, 3.4378734812811094, 0.24077510024046722, 0.716701369052779, 3.243842192022819, 1.2686227000062547, 0.8899520258025329, 2.1216819609769075, 3.2264054665731474, 0.2619591069883925, 2.3113204902818985, 0.7340305268345819, 1.5066465986068382), (1.2595689669472214, 0.7280963272797721, 1.5278377686849054, 0.23526863221568506, 0.6592923661982337, 2.8488138953570887, 1.078410984815601, 2.7255621479264907, 2.6395005928325452, 5.25242762261217, 2.071714370497954, 1.9182050085695674, 1.3559224547291253), (0.8817376818649778, 1.6667455178924016, 4.082759932592676, 1.4110959231587734, 2.3854580411072726, 2.8966110321468412, 2.372276127732376, 0.9445220427281892, 0.9270727429913931, 0.5406129713023508, 0.7184757583331695, 0.49647951557269454, 0.9084819340551601), (2.9524336025256637, 0.5910179629495939, 0.9274083675955732, 0.8931140692701993, 2.1525943198563673, 0.9996765234916604, 0.8194889298207728, 1.8629701752607744, 2.053629490099884, 0.6490871185594934, 1.339543603012648, 1.4325322764529191, 0.6472965717891056), (2.9524336025256637, 0.5910179629495939, 0.9274083675955732, 0.8931140692701993, 2.1525943198563673, 0.9996765234916604, 0.8194889298207728, 1.8629701752607744, 2.053629490099884, 0.6490871185594934, 1.339543603012648, 1.4325322764529191, 0.6472965717891056)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (0.27007830820374873, 0.6384147853652827, 2.326608367632777, 0.2779469309837803, 7.821427263780955, 0.47102529285029304, 3.9992226917786384, 3.014812888169809, 2.1355632575911834, 0.8619363806552449, 0.11741132927665278, 1.4482100832632707, 2.472433023868225), (0.28939396854093513, 1.180402669077842, 0.47399562590043687, 0.6271857474156067, 2.0349995616893746, 4.531798767562961, 0.24260563614448882, 2.283620344053546, 1.9353726364314456, 0.31444464686945006, 0.41518739232236584, 0.4870936390232905, 9.645281149409586), (1.6389349191267708, 2.3664517827330616, 1.123063647321865, 2.791362250305231, 0.9509601205204969, 0.5308517354163529, 0.2100884252444188, 0.09172247543727279, 1.281103501472, 3.0851849947615566, 0.4518372454484251, 2.377304410455783, 1.3975636920602272), (0.5477070932137251, 1.0464366742144566, 3.4655703576764605, 1.2697306277692266, 1.256063084939499, 1.1179300066242088, 1.7682104995873915, 0.16393605826208216, 1.067676959322938, 1.058397232179318, 2.0057229799487657, 1.491222318390817, 0.48444554228949727), (0.3900572903547295, 1.2037056908829395, 1.0248722780096902, 1.582777555844745, 0.43868460574167106, 4.424844277026339, 0.796840884323875, 1.7964680201888668, 1.0062117989010408, 0.6585354390605545, 1.3059208622875769, 2.557094774122924, 3.1553752785729148), (0.8550631728053274, 2.01142955130705, 0.5740177545938764, 2.774362913487719, 1.908785910149397, 0.4257998771581972, 0.6359096766181787, 0.23832340535444993, 0.5900285506129238, 1.4959760442751429, 1.1066273135728384, 1.4550391168348602, 1.766301188021202), (0.5376266078758605, 2.7823575547309582, 3.6694712437904595, 1.0231014445372586, 1.9145077800448849, 3.237970483448804, 0.5667078463668667, 1.1918120398075096, 0.8294029675152975, 1.8518283175186787, 0.3977761474159041, 0.8971169123053803, 0.6334957651692111), (0.906076123599777, 1.3827500181710466, 3.6105563404185412, 1.2056003114422809, 0.3917313276374664, 0.8938240252142997, 1.1174079617549468, 3.7471479884161787, 0.6634134768930036, 0.6829538324363477, 0.5241546719137203, 0.9904452535667027, 1.1263249193129994), (1.2523460780885571, 0.6283479485902377, 1.4084169656990417, 2.431572952683808, 1.4915619176381971, 1.2382151679718518, 3.004856223536792, 5.938401396075097, 1.6992613390411595, 3.6023645143179888, 1.6256306381821741, 0.5854003593327513, 1.369357409674504), (2.7695080473966147, 1.7062501284459086, 2.0088855189595747, 2.5290018015994695, 1.182311369020207, 2.7960625886949524, 0.5103567083479313, 1.3655010719979286, 2.3799008190205813, 2.3887452847365913, 0.6041458845212238, 0.9878517885101656, 1.425710643153983), (1.9007036126115402, 1.1093520111208752, 1.1416847929947946, 1.611674351263001, 0.6439338057999713, 1.0990832027635586, 0.8096208058520002, 3.398712918677974, 1.1497061317151946, 1.5753739862979765, 0.600616732611201, 2.014843646263856, 0.8600312715263602), (0.9239091519127334, 1.7244014279410225, 2.4875989893594457, 1.9338125142229448, 0.8602395454007444, 1.6005467839978316, 1.3292196157828806, 0.4968016129000951, 1.3425086651992073, 1.1862805810792507, 1.7846258968269022, 1.3382675564152513, 3.5473418306287465), (0.9239091519127334, 1.7244014279410225, 2.4875989893594457, 1.9338125142229448, 0.8602395454007444, 1.6005467839978316, 1.3292196157828806, 0.4968016129000951, 1.3425086651992073, 1.1862805810792507, 1.7846258968269022, 1.3382675564152513, 3.5473418306287465)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (4.120766951920165, 0.8303265780493678, 1.916595459077095, 1.2969280523966775, 0.2091541999508758, 0.6618990616195053, 0.5401544030307659, 0.18847696854500573, 13.852640477267272, 0.477154376158565, 0.318038918707349, 11.91539630458594, 0.923668500245831), (1.1930169398852217, 0.40864802468637723, 1.8569562529843961, 0.6970204800051786, 0.8618852452955895, 1.6025930413081309, 6.242370418682756, 0.6245262739276294, 3.913461964064692, 0.39764594765793004, 0.12129240391516787, 0.5050796220905376, 0.5942216231922297), (0.4677626286463374, 0.31705401075001866, 1.4599905718709516, 3.0529800078438623, 0.17060341085951222, 0.28750390970986467, 1.780519645398228, 1.4733429003143024, 0.8597477085321564, 0.3016485026202391, 2.4265434506718813, 1.3734586314027355, 1.3926014783587695), (1.0994805003598533, 3.7016140398598156, 0.530210083618412, 0.8447996948332718, 0.658550584693966, 1.4027981939866991, 0.6422071609155717, 0.3485571224148962, 5.050252607910085, 0.38804130609753246, 3.0543625444499027, 10.81411465446244, 0.6252778711619539), (2.535017768692632, 1.4360515562626734, 2.764414503459689, 0.2957576651282315, 0.7805352896765878, 0.3470329551569332, 0.4520224534456866, 5.400055057487877, 0.9139907865284848, 3.8433945551073507, 2.2960500688993024, 1.1970954162612666, 0.828021765810205), (1.338862911788443, 1.0108243110456516, 1.5820151112406675, 0.833027131627785, 0.3440414567996678, 1.9638422730606857, 2.744314072121455, 0.2872224640811314, 1.3449546996973905, 3.3170018224546896, 1.5471692301302518, 1.1550089800912215, 2.73913014048482), (0.8586288574482208, 1.313850555746207, 0.778919240654447, 2.1488226135380613, 2.7820756572350507, 1.6312015257414587, 1.0371216325723087, 1.2784891216199032, 0.5191516779678876, 0.5913394310004741, 5.333495995928753, 3.468925819051842, 0.7647916693330995), (0.8367420375884409, 2.1516540447584944, 1.0273048832023046, 3.590043029230514, 2.697667049347423, 2.0968805047923484, 1.138723595011309, 0.7384485303489904, 1.6286354890292953, 2.959259715611305, 2.47340981595317, 1.269911510932381, 0.4139069213747204), (0.550787745000484, 1.4283159480675485, 0.7910854556316916, 1.2074769491222896, 3.9851115714170358, 0.7392172301894189, 1.8092269075335636, 0.7385145814657955, 1.3319086886975835, 1.410065526829309, 0.7392416702970157, 2.257686587367192, 1.8891039498760334), (0.550787745000484, 1.4283159480675485, 0.7910854556316916, 1.2074769491222896, 3.9851115714170358, 0.7392172301894189, 1.8092269075335636, 0.7385145814657955, 1.3319086886975835, 1.410065526829309, 0.7392416702970157, 2.257686587367192, 1.8891039498760334)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (2.548069258956035, 18.239155378825522, 1.0631548967019449, 0.7894990503250063, 4.91290508637893, 0.12937352989901288, 0.15027333866241419, 0.39747745267688533, 1.0512867179286343, 0.17317331663569221, 3.6793241663964533, 0.37552592590253087, 4.099939039198074), (0.3039588200767704, 4.1909455120235855, 1.869757123137606, 0.46303118281479444, 0.16302496384278017, 1.0225744413191966, 4.699621047371826, 1.7237309194231043, 0.2936118882934686, 6.8868637754263915, 0.9515856035012532, 2.4281982097388246, 3.290005285720988), (0.40601489911606187, 1.2196688732218728, 1.555821427077603, 3.3786761173646296, 3.7557988811886887, 0.32106311826493744, 0.8640408946866771, 0.4573872708959466, 6.091286970665916, 0.48562284387326254, 1.349672846835693, 0.876636693349439, 2.2071685893360824), (1.8209234601555828, 1.3444905705226304, 0.6793179293446896, 1.5772278706223601, 1.843493209496221, 0.9035875872797209, 0.404563001984442, 0.32373984768121805, 6.712373545496626, 5.368189030637084, 1.650146329003649, 0.8029545947729946, 0.5790988694938837), (0.3472220433191755, 3.2799656320772206, 0.4075746281272967, 1.0221128735773264, 3.257230334428174, 7.551513081735932, 3.5191538640020963, 2.4302652610538704, 1.2627641035807815, 2.7430990041653183, 0.48743355566415936, 1.5648607901884715, 3.5089415448706482), (0.9999136740172934, 4.034625789403536, 0.8602726202429262, 0.9862858614282456, 3.2943647819523085, 0.39948994259653986, 0.6795241461864333, 0.5705725512309127, 2.1537867631430436, 1.2409557238002913, 2.0092561852078954, 11.976662783813074, 2.780022624916511), (0.42801058409422693, 1.3685763217239117, 0.43014005851448833, 0.8674304092121993, 1.3552313367355575, 1.211066578607376, 0.5768225589338197, 1.7459063374558628, 2.2059612015735173, 0.9812749799685884, 1.3396325343701587, 5.749000224445429, 0.8804235296284159), (0.997457506468357, 1.1322328692347956, 0.7269806242668818, 0.6814388089355269, 0.4837201235122313, 1.123553061971829, 1.908287453069364, 1.7209663705764398, 0.8188218312454324, 0.9661645044338956, 0.3439910164501693, 2.2689661263007608, 1.4692469223443867), (0.8823108503193717, 2.0173985703810766, 1.0132298794173213, 0.7060624918002656, 2.7027234893023566, 0.5326745003138752, 3.009706520726321, 0.9069060883335127, 2.2464685428488163, 1.0183829424587123, 1.3819046225020246, 0.5414935758301459, 0.7494523423620644), (1.3191694153290325, 3.158970157859914, 1.0043726739781451, 0.5655260069170466, 0.9676737379970591, 1.4136639328767457, 4.126513097741671, 1.997322053138775, 1.7375721829859858, 0.6784174292651409, 0.7602616762282888, 3.3488808386878977, 0.9407930614850597), (1.3191694153290325, 3.158970157859914, 1.0043726739781451, 0.5655260069170466, 0.9676737379970591, 1.4136639328767457, 4.126513097741671, 1.997322053138775, 1.7375721829859858, 0.6784174292651409, 0.7602616762282888, 3.3488808386878977, 0.9407930614850597)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (1.462796407070721, 2.9691259248868067, 1.4888902976159997, 0.153719412926101, 14.555002110737634, 0.3758084464727329, 5.657764275494078, 0.5553107975336472, 1.318688894417368, 9.194640688930994, 3.781526680836197, 0.20856841105219873, 0.5584862256178065), (1.6734241647214056, 0.7484072363361305, 0.26879217138168754, 2.376820071749524, 1.066678308287756, 6.508999599369154, 0.5503142250909927, 6.728056670487597, 1.4055456752672457, 0.27321775444400687, 1.132419655525493, 0.6821536321847487, 5.134745095078288), (0.49210269979331767, 0.9471014775831271, 1.1446543830903728, 0.7833831473605347, 0.21695078343988258, 1.7990048200494826, 0.9859415366594804, 0.5937425096523908, 0.7366495288047915, 1.4860534272008352, 0.4737374868112754, 3.451755397777542, 3.002102537914641), (1.2992187416830379, 0.6044542264822146, 1.5267386473746762, 0.88263529631389, 4.296414937500419, 4.848325717803306, 3.7523971744943703, 0.34220361286177226, 1.717255358406573, 2.2825212076170875, 0.40005472483238, 0.8054327499724283, 1.5483375344380759), (0.4091393371451913, 0.2912021751730309, 1.0087358179366934, 1.8125233418935676, 0.30343626429865805, 0.8572412900667297, 0.8934265261691426, 4.594706863090209, 2.085895678488764, 3.0901448345883424, 1.8991908890327023, 2.143773821451132, 1.8479812054624758), (0.2967527661452117, 5.997225176183158, 1.3997376948093858, 0.487876534993193, 1.7188878314023086, 2.0957983859488234, 1.587001606336021, 2.56444150387353, 2.3387667350296493, 4.708262014326722, 0.8462185248531372, 0.7124349136548521, 1.9394859553623973), (0.8772058606777484, 0.6189045108783522, 0.9229116776472784, 3.807555847108082, 1.510918897539268, 0.8977058564028751, 1.068564651439994, 0.9302780793714241, 0.9931717456964266, 0.5381732081658053, 0.4191563341143025, 1.0875456164371617, 1.3999794334691993), (1.24936702856677, 1.4794520936987334, 0.9267468033252027, 1.8061737254771097, 1.0023157256238804, 2.930522870176869, 1.0867788182753517, 0.986743304651486, 1.5646814668948503, 1.5630675795174591, 1.3509156952138555, 0.8860870576248264, 1.07669329774634), (1.24936702856677, 1.4794520936987334, 0.9267468033252027, 1.8061737254771097, 1.0023157256238804, 2.930522870176869, 1.0867788182753517, 0.986743304651486, 1.5646814668948503, 1.5630675795174591, 1.3509156952138555, 0.8860870576248264, 1.07669329774634)], [(10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10, 10), (1.3310682630745387, 0.2822930568519808, 0.7996460111285009, 0.4712767251273454, 0.35192355501778627, 2.397574920002393, 0.2150057600464826, 0.32060362664555675, 4.90860355597395, 1.2891168201317171, 0.7042151001809572, 2.5986023181440108, 1.1552128374905983), (4.922583451705806, 1.402761159074533, 0.8900817259485453, 1.1640115198323826, 0.9111061514985423, 1.7809901834000417, 1.044335972749202, 1.3702561668067026, 2.2210058321743875, 2.851343786482714, 0.6554472652108831, 0.4343576841046355, 2.8232694729588417), (1.7290970752102446, 1.800694058763542, 3.7490049218180563, 1.4367929012141967, 4.735385069887302, 1.8233000905655896, 2.445115122941896, 0.3410991065815714, 0.6620081066033399, 0.789433758982264, 1.5871283322972864, 1.305776020325928, 1.7050163279442905), (1.3033733628865565, 1.6337970491359275, 0.9667518796385396, 1.6551829809096166, 0.885841387243032, 0.38647243328497116, 1.1819372147333755, 4.35536832575398, 2.188299092697158, 1.4238339509753148, 1.0176721828500346, 0.7632929672249934, 0.6929128442346624), (1.2784918282860265, 3.2110384325975962, 3.937193434564619, 1.4540168808080185, 2.1815320227593276, 2.8680572515314853, 1.700064122117704, 2.1775193032535056, 0.4930806019787539, 3.658065654962502, 1.082326765257998, 1.3245876836027055, 0.5116986686913416), (1.2784918282860265, 3.2110384325975962, 3.937193434564619, 1.4540168808080185, 2.1815320227593276, 2.8680572515314853, 1.700064122117704, 2.1775193032535056, 0.4930806019787539, 3.658065654962502, 1.082326765257998, 1.3245876836027055, 0.5116986686913416)]]"
        self.expected_all_intermediate_budgets = "[[0, 20, 40, 150, 280, 500, 2070, 10000], [0, 20, 140, 150, 220, 270, 560, 660, 10000], [0, 20, 40, 50, 300, 10000], [0, 20, 30, 40, 60, 1460, 10000], [0, 20, 40, 80, 100, 450, 620, 730, 5290, 10000], [0, 20, 50, 60, 80, 100, 440, 900, 3740, 4740, 5310, 5660, 7430, 10000], [0, 20, 30, 50, 170, 230, 490, 640, 4530, 6880, 10000], [0, 20, 30, 40, 50, 100, 240, 250, 700, 2620, 9670, 10000], [0, 20, 30, 50, 640, 980, 1010, 4050, 7180, 10000], [0, 20, 30, 620, 3630, 3930, 10000]]"
        self.expected_all_est_objectives = "[[66.17277984615737, 33.874064015728344, 31.8915249207413, 26.0205270681606, 25.37547277009376, 22.086114125789972, 22.279742295308655, 22.279742295308655], [67.96045089275079, 30.389104410094095, 31.086445669359282, 29.472557401770036, 30.493164494155536, 23.04324624947146, 23.30629436070592, 20.36332250956023, 20.36332250956023], [66.60284779945974, 38.886567140074, 38.75634367261171, 26.087765122837663, 20.574763386305843, 20.574763386305843], [65.1382202229765, 40.05384005592769, 34.9442104144485, 35.90346679719597, 22.724078621577064, 21.59318130098609, 21.59318130098609], [65.25402450480675, 33.023893839354024, 30.648846561289623, 30.98033344858396, 26.465132243073203, 26.956245857218683, 24.616629598670464, 22.799089626309552, 21.88007639715236, 21.88007639715236], [66.81144941227032, 35.631711428134, 36.49106407839654, 35.96010425862248, 26.052481499504307, 24.787557660410357, 25.718267585158234, 23.361064817214018, 24.295030494984125, 24.724175350596887, 21.96241360857575, 22.547356247664382, 21.25727479645502, 21.25727479645502], [67.72045847556574, 46.95829462331507, 35.80108526493285, 33.5785288188178, 32.7380327552128, 27.899360479820825, 25.48404462817174, 24.89740376477238, 22.705442055511845, 21.04265002688455, 21.04265002688455], [65.79911425085075, 54.82092089134026, 35.28591565016966, 28.24801906723932, 28.224786121223115, 26.86099061162489, 30.86717030930895, 24.732582084263658, 23.17287782079987, 22.080363549129032, 22.288035908190622, 22.288035908190622], [68.49701125770689, 47.268273533708125, 33.64492434916426, 26.997465335971732, 26.40288127159057, 28.0655712193862, 25.863263883448617, 24.117252534620675, 20.236813106514333, 20.236813106514333], [64.96969877193652, 31.49810486527408, 24.817227812794602, 22.975397437105148, 22.487413037857294, 22.09721490665045, 22.09721490665045]]"
        self.expected_objective_curves = "[([0, 20, 40, 150, 280, 500, 2070, 10000], [68.89839091026717, 33.874064015728344, 31.8915249207413, 26.0205270681606, 25.37547277009376, 22.086114125789972, 22.279742295308655, 22.279742295308655]), ([0, 20, 140, 150, 220, 270, 560, 660, 10000], [68.89839091026717, 30.389104410094095, 31.086445669359282, 29.472557401770036, 30.493164494155536, 23.04324624947146, 23.30629436070592, 20.36332250956023, 20.36332250956023]), ([0, 20, 40, 50, 300, 10000], [68.89839091026717, 38.886567140074, 38.75634367261171, 26.087765122837663, 20.574763386305843, 20.574763386305843]), ([0, 20, 30, 40, 60, 1460, 10000], [68.89839091026717, 40.05384005592769, 34.9442104144485, 35.90346679719597, 22.724078621577064, 21.59318130098609, 21.59318130098609]), ([0, 20, 40, 80, 100, 450, 620, 730, 5290, 10000], [68.89839091026717, 33.023893839354024, 30.648846561289623, 30.98033344858396, 26.465132243073203, 26.956245857218683, 24.616629598670464, 22.799089626309552, 21.88007639715236, 21.88007639715236]), ([0, 20, 50, 60, 80, 100, 440, 900, 3740, 4740, 5310, 5660, 7430, 10000], [68.89839091026717, 35.631711428134, 36.49106407839654, 35.96010425862248, 26.052481499504307, 24.787557660410357, 25.718267585158234, 23.361064817214018, 24.295030494984125, 24.724175350596887, 21.96241360857575, 22.547356247664382, 21.25727479645502, 21.25727479645502]), ([0, 20, 30, 50, 170, 230, 490, 640, 4530, 6880, 10000], [68.89839091026717, 46.95829462331507, 35.80108526493285, 33.5785288188178, 32.7380327552128, 27.899360479820825, 25.48404462817174, 24.89740376477238, 22.705442055511845, 21.04265002688455, 21.04265002688455]), ([0, 20, 30, 40, 50, 100, 240, 250, 700, 2620, 9670, 10000], [68.89839091026717, 54.82092089134026, 35.28591565016966, 28.24801906723932, 28.224786121223115, 26.86099061162489, 30.86717030930895, 24.732582084263658, 23.17287782079987, 22.080363549129032, 22.288035908190622, 22.288035908190622]), ([0, 20, 30, 50, 640, 980, 1010, 4050, 7180, 10000], [68.89839091026717, 47.268273533708125, 33.64492434916426, 26.997465335971732, 26.40288127159057, 28.0655712193862, 25.863263883448617, 24.117252534620675, 19.881968753119985, 19.881968753119985]), ([0, 20, 30, 620, 3630, 3930, 10000], [68.89839091026717, 31.49810486527408, 24.817227812794602, 22.975397437105148, 22.487413037857294, 22.09721490665045, 22.09721490665045])]"
        self.expected_progress_curves = "[([0.0, 0.002, 0.004, 0.015, 0.028, 0.05, 0.207, 1.0], [1.0, 0.28545729465421915, 0.24501086858438073, 0.12523472838062988, 0.11207476546047247, 0.04496748794931368, 0.048917759327708206, 0.048917759327708206]), ([0.0, 0.002, 0.014, 0.015, 0.022, 0.027, 0.056, 0.066, 1.0], [1.0, 0.2143594981960968, 0.22858618444891027, 0.195660724030459, 0.21648246187810163, 0.06449425227766285, 0.06986078250688126, 0.009820254830044929, 0.009820254830044929]), ([0.0, 0.002, 0.004, 0.005, 0.03, 1.0], [1.0, 0.3877190041742554, 0.38506227278238053, 0.12660647384302812, 0.014133929052690779, 0.014133929052690779]), ([0.0, 0.002, 0.003, 0.004, 0.006, 0.146, 1.0], [1.0, 0.41153291927624713, 0.30728970003234435, 0.3268598020620698, 0.057982809503011955, 0.03491100477264412, 0.03491100477264412]), ([0.0, 0.002, 0.004, 0.008, 0.01, 0.045, 0.062, 0.073, 0.529, 1.0], [1.0, 0.2681126958654976, 0.2196585824573428, 0.22642135445713474, 0.1343052634247258, 0.1443246322919794, 0.09659335865786176, 0.059513133452238645, 0.040764045111787675, 0.040764045111787675]), ([0.0, 0.002, 0.005, 0.006, 0.008, 0.01, 0.044, 0.09, 0.374, 0.474, 0.531, 0.566, 0.743, 1.0], [1.0, 0.32131563222872866, 0.33884756565927265, 0.32801528136745306, 0.12588664114654455, 0.10008051774082982, 0.11906823417929223, 0.07097817243657674, 0.0900323105533043, 0.09878743458575445, 0.04244383339089577, 0.05437743876938093, 0.028058066721512044, 0.028058066721512044]), ([0.0, 0.002, 0.003, 0.005, 0.017, 0.023, 0.049, 0.064, 0.453, 0.688, 1.0], [1.0, 0.5523929466615921, 0.32477108306224406, 0.27942798480449055, 0.26228075074260077, 0.16356542101332885, 0.1142897753143108, 0.10232152390831092, 0.057602598846153534, 0.023679436863902673, 0.023679436863902673]), ([0.0, 0.002, 0.003, 0.004, 0.005, 0.01, 0.024, 0.025, 0.07, 0.262, 0.967, 1.0], [1.0, 0.7128009471235092, 0.3142609398879514, 0.1706785184626019, 0.17020453556067325, 0.14238129898853252, 0.22411267637956703, 0.09895894309855081, 0.0671389082036464, 0.04485016856107877, 0.04908696002651438, 0.04908696002651438]), ([0.0, 0.002, 0.003, 0.005, 0.064, 0.098, 0.101, 0.405, 0.718, 1.0], [1.0, 0.5587169274164351, 0.28078254165349104, 0.14516556430902663, 0.1330352610715745, 0.16695634046951646, 0.12202635090648875, 0.08640540445653755, 0.0, 0.0]), ([0.0, 0.002, 0.003, 0.062, 0.363, 0.393, 1.0], [1.0, 0.23698457784031313, 0.10068582818738021, 0.06311004654863624, 0.05315451781413639, 0.04519395859674054, 0.04519395859674054])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 10
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
