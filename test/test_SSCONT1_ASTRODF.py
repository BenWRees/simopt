import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_SSCONT1_ASTRODF(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "SSCONT-1"
        self.expected_solver_name = "ASTRODF"
        self.expected_all_recommended_xs = "[[(600, 600), (578.8563914364373, 576.4851575189023), (540.9216512203627, 548.0078773689489), (494.1304461441873, 555.7913937670363), (461.91294010002355, 570.8797105815213), (411.0137466920665, 554.8507255725015), (349.34149090496754, 503.82367952209165), (347.12151762011837, 452.84320640953047), (347.5616997737789, 463.6778852798452), (355.01363470750596, 460.42063480151614), (355.01363470750596, 460.42063480151614)], [(600, 600), (579.4910239161784, 575.9296468660463), (552.2145775545941, 537.1224893576224), (555.8459996687305, 541.8096018406935), (547.381197427183, 539.0803738341885), (547.381197427183, 539.0803738341885)], [(600, 600), (569.1071442280892, 593.2448936162399), (552.2169393507468, 619.9791596282589), (526.3888359800587, 601.7333635022179), (526.3888359800587, 601.7333635022179)], [(600, 600), (573.3916503038607, 582.9121175551807), (541.9523903435036, 586.3140189566151), (510.4460738202959, 589.0254796587925), (488.1490633615256, 597.1090014532509), (481.5235240168533, 591.1757231948005), (478.2416510138875, 588.1749399274844), (475.2997304500309, 584.8401994546803)], [(600, 600), (569.2350701903849, 592.6843254713281), (523.4962019464077, 580.116273444061), (480.69759285292673, 559.6644016553124), (421.91076302120564, 519.5818788013769), (360.64577817910913, 483.4003692654595), (255.34827173925282, 465.99174675968914), (257.3120396856475, 492.60109996401775), (284.99153597087445, 463.693451736929), (284.99153597087445, 463.693451736929)], [(600, 600), (578.739235908756, 576.5910292781492), (558.9272434017596, 551.9438194380331), (527.3492831373261, 516.5484464983696), (469.3850793814855, 475.285253663212), (398.472827129699, 469.4583779498476), (345.1566122363684, 467.2139449594926), (328.6827953111553, 446.22519991805285), (327.3090574290336, 439.6977599039682), (327.3090574290336, 439.6977599039682)], [(600, 600), (570.4938105683991, 611.3747433037621), (539.8340121238758, 619.1192096728031), (513.0687238506332, 602.2782078127527), (482.77976224782844, 638.7827117132829), (465.99728833966253, 644.6780335468836), (461.650344923239, 639.6185165896374), (458.9855189578502, 649.2627696770077), (456.4257423493956, 642.2086178198188), (456.4257423493956, 642.2086178198188)], [(600, 600), (578.0824341615731, 577.2048183223247), (562.4342486317666, 549.7251114529865), (533.4559270514488, 512.1717244101686), (477.81462874883886, 467.8259701241045), (455.4490846516674, 400.28130018459353), (454.6023799547482, 390.67979047631394), (454.6023799547482, 390.67979047631394)], [(600, 600), (569.7414862412073, 609.188163315318), (526.9957218695218, 629.7502553363246), (494.88328372737016, 614.4395951099829), (459.8401525397978, 620.5718016109577), (456.86916758038274, 622.0873561621012), (456.86916758038274, 622.0873561621012)], [(600, 600), (571.6814358892015, 585.9266590070946), (526.8379885546527, 570.4649245910092), (466.47560155173954, 532.7968713454466), (388.78255968531744, 459.62299454817423), (386.6063278939221, 419.6596281257228), (387.68491970642674, 427.08594312116105), (383.99373973559307, 437.71987929358704), (378.9048506201282, 447.7602286733057), (377.72153707322815, 453.26260280396974), (373.8159615046633, 457.8005780530243), (373.8159615046633, 457.8005780530243)], [(600, 600), (576.0798157996996, 579.3160741679994), (546.2846992578014, 568.7212154971768), (503.8953442923039, 547.4340694787682), (448.80721276892143, 502.4029939279609), (378.945168602165, 421.7189200047747), (342.50899914236993, 504.79799148247656), (314.62518698652383, 418.47175223763577), (379.22145981680734, 429.57536596703), (333.26841959145514, 395.81793800430216), (345.46947591480557, 417.1546393245873), (363.9017030800866, 416.88848436863134), (381.73151362070087, 412.2070644110862), (382.5371198015323, 405.3413610988247), (392.24041760227544, 408.9973834174008), (392.24041760227544, 408.9973834174008)], [(600, 600), (570.6568189123157, 588.211118642748), (528.195502817136, 567.0678777496107), (462.61159534296706, 539.4770988475999), (372.292950805275, 482.6161504834192), (357.8457636716829, 376.8716291883328), (387.4735092920719, 305.68051927382334), (482.8761565228032, 329.4347710943852), (449.2577354292732, 314.2996097106897), (457.5546424085205, 318.31405783726865), (457.5546424085205, 318.31405783726865)], [(600, 600), (583.4182904778495, 573.0733048941571), (553.0452824445413, 536.6387006969301), (485.10904048722745, 515.4923764603799), (427.7584883633274, 473.38045212672085), (452.8294660500173, 369.6400497859091), (497.0489393666479, 302.9177540962388), (442.55105996655107, 235.4243556029618), (479.46474467761766, 212.64883572147687), (544.3837747896102, 208.3425048977857), (542.2256602772558, 153.08218394007235), (565.4849378886211, 203.25554874247885), (586.5539106110106, 161.23455551551902), (593.2270665634976, 183.77086755793263), (572.2834026251159, 155.41068816455717), (572.2834026251159, 155.41068816455717)], [(600, 600), (580.5074919967353, 575.0993547926432), (548.2483290779307, 540.3236965274424), (479.3294783672182, 522.6405967789674), (376.3528185241219, 494.5971924285815), (289.229807747314, 432.95138159618017), (298.9195192238857, 378.088398827524), (368.31572812946797, 362.9278631705708), (383.18748168073654, 353.22293274565834), (388.4253777158735, 336.2547515417945), (388.4253777158735, 336.2547515417945)], [(600, 600), (577.488821565773, 577.79083870331), (549.5690469728631, 539.4439198351519), (503.32039159318634, 528.9053300067218), (461.79151166089537, 471.1311824009859), (374.0931480482338, 410.3066641566019), (375.1634637422198, 383.64642246949023), (406.91889467813326, 395.84879535045036), (406.8663021648751, 402.22717668156747), (400.12872627636267, 395.4338175348623), (400.12872627636267, 395.4338175348623)], [(600, 600), (583.2047710717644, 573.2059654913979), (551.6912469199632, 575.8323309522274), (520.2627351082499, 572.332524486007), (472.8705350816158, 574.3273619820214), (444.9534099607531, 535.9785142159399), (423.7824952662575, 493.53098930578295), (354.1267192647685, 479.0198601412285), (354.37810953762704, 484.3384318745329), (360.00119564197405, 483.6116086168802), (364.86559223115376, 480.6987036737105), (366.85284737412803, 476.93922069387764), (366.85284737412803, 476.93922069387764)], [(600, 600), (579.6435329155746, 575.8005320752561), (546.4351254788675, 541.9301663329489), (515.3630742089045, 524.6052527725068), (490.9227014192926, 550.4566198138219), (438.7672850171516, 561.7468275142712), (431.9194054594466, 554.4516605797708), (430.12121699671485, 549.7831761348717), (428.3168337493549, 542.4991033863251), (428.3168337493549, 542.4991033863251)], [(600, 600), (579.4447111573636, 575.9691843543382), (545.7509997098219, 542.5815547755585), (500.25413149540384, 487.8774874434133), (403.61241190908504, 442.58948643432336), (400.2640614895406, 335.9151523634329), (398.9765776812049, 399.77182255017647), (398.9765776812049, 399.77182255017647)], [(600, 600), (579.2894287944287, 576.1028821750622), (547.86335002709, 540.572591248741), (493.3949188449292, 494.7938843583731), (452.3341138370772, 436.6861370942848), (476.1379103673301, 388.9259494821499), (472.3444857521623, 401.7161193525636), (472.3444857521623, 401.7161193525636)], [(600, 600), (573.8206065546209, 582.2619234742873), (538.296323389831, 550.8290536462264), (498.1389081464626, 492.09335750689655), (438.3430877820287, 453.53223891647764), (374.84519306530217, 421.4305665839727), (384.68617361070807, 446.2311545690375), (358.31260460822415, 442.1877747240043), (358.06086678712455, 432.1852978753188), (358.06086678712455, 432.1852978753188)], [(600, 600), (568.4347453518619, 601.9064886567184), (521.3659189072958, 607.7823355855716), (450.8674355485763, 598.1665233931285), (383.9416473079947, 574.0120441319887), (279.93063628121376, 550.0885288136485), (272.2408842048977, 547.261476644972), (272.2408842048977, 547.261476644972)], [(600, 600), (575.8508407068413, 579.583876336737), (555.5743856950094, 555.3173279181185), (514.809657794741, 531.0637310876052), (444.0723029953648, 538.7270616942777), (438.33583814549536, 512.6692982920551), (431.32077257743066, 531.4107100647046), (429.77388573918967, 516.4821736345127), (420.2762082125833, 522.5236576986239), (403.41591579655494, 521.619385691581), (392.4285119394113, 515.3234752251018), (392.38689907989493, 510.5748850317323), (392.38689907989493, 510.5748850317323)], [(600, 600), (590.4688806371627, 612.6157743991936), (566.7522025648146, 612.4772781443512), (543.2153344160189, 615.3954689787904), (525.5552761365226, 617.5235177481554), (500.0727940895042, 625.43282689772), (460.9572484967617, 633.905178024006), (420.99115818271713, 636.0307992589944), (383.2862510016083, 649.4526700335538), (324.8702237173558, 663.295816270292), (359.7795016423867, 731.414832595592), (359.7795016423867, 731.414832595592)], [(600, 600), (576.2835318295279, 579.0828028283189), (557.1516210503526, 553.9040421372588), (516.639146815978, 529.2313967296592), (453.7627857594273, 495.9287959260243), (405.5156393976066, 443.6343137320007), (401.24486280188734, 408.3159691038976), (401.29855245376194, 399.4222252397377), (398.73079493907926, 393.2658261093986), (396.33511295711105, 397.6577432990822), (396.33511295711105, 397.6577432990822)]]"
        self.expected_all_intermediate_budgets = "[[4, 24, 40, 56, 88, 104, 120, 164, 246, 290, 1000], [4, 24, 40, 115, 131, 1000], [4, 24, 40, 56, 1000], [4, 24, 40, 56, 88, 147, 657, 1000], [4, 24, 40, 56, 72, 88, 104, 156, 178, 1000], [4, 24, 40, 56, 72, 88, 120, 152, 224, 1000], [4, 24, 40, 56, 72, 120, 284, 306, 389, 1000], [4, 24, 40, 56, 72, 88, 197, 1000], [4, 24, 40, 72, 88, 919, 1000], [4, 24, 40, 56, 72, 124, 212, 232, 252, 395, 415, 1000], [4, 24, 40, 56, 72, 88, 116, 132, 172, 188, 256, 297, 317, 444, 469, 1000], [4, 24, 40, 56, 72, 88, 128, 156, 210, 270, 1000], [4, 24, 40, 56, 72, 88, 120, 160, 198, 219, 255, 275, 310, 350, 370, 1000], [4, 24, 40, 56, 72, 88, 164, 192, 250, 270, 1000], [4, 24, 40, 56, 72, 88, 140, 168, 372, 392, 1000], [4, 24, 40, 56, 72, 88, 104, 120, 190, 386, 496, 975, 1000], [4, 24, 40, 72, 88, 104, 174, 414, 459, 1000], [4, 24, 40, 56, 72, 88, 144, 1000], [4, 24, 40, 56, 72, 104, 160, 1000], [4, 24, 40, 56, 72, 88, 136, 152, 215, 1000], [4, 24, 40, 56, 72, 88, 217, 1000], [4, 24, 40, 56, 72, 120, 152, 195, 236, 257, 297, 744, 1000], [4, 44, 60, 76, 108, 124, 140, 156, 178, 198, 233, 1000], [4, 24, 40, 56, 72, 88, 120, 186, 283, 516, 1000]]"
        self.expected_all_est_objectives = "[[618.5809976153716, 604.3426729892019, 580.4415981209335, 566.2145313796427, 562.3946193648277, 546.8794931679699, 535.8028002448107, 532.1622303277846, 532.939014848137, 532.4544015179036, 532.4544015179036], [619.371245290233, 603.6485267460105, 581.5706091178515, 583.9128190245713, 580.7662291262072, 580.7662291262072], [620.2040298994102, 606.2252067443167, 608.2893641318437, 591.7243023004486, 591.7243023004486], [620.3929887875448, 604.7435781022047, 593.9041943029691, 582.7580082494529, 577.4033820040011, 573.9475104848436, 573.3099401704529, 572.2208733061591], [617.140803174291, 601.3803055218472, 580.0102213895614, 562.8270862613596, 541.7823055381924, 532.2321735262267, 533.0254671389854, 533.6428450167786, 530.826054741922, 530.826054741922], [617.6250759903628, 601.2518580630849, 583.183035506711, 565.1946279773447, 542.9742703531032, 533.536305729741, 531.0217017441998, 530.8466345548103, 530.2832795013347, 530.2832795013347], [622.8299886318688, 612.1712702905619, 602.432864073124, 586.4351652344512, 584.1934249957848, 580.5716097961747, 577.3762443066248, 579.1370807297736, 577.2258547314669, 577.2258547314669], [617.1638109984892, 605.340061520366, 594.394681335377, 569.9373131844344, 548.5933480550608, 537.0310437425059, 536.1165507948401, 536.1165507948401], [625.4509909440814, 613.5269435924067, 603.5957837922593, 587.7054301061617, 579.7613183977356, 578.8536290753593, 578.8536290753593], [616.3517529689802, 596.6505073213333, 577.3173730148943, 552.5051111367109, 532.052575373237, 529.7572945355536, 531.5723229366752, 532.2861880351599, 530.8344945508438, 532.0559951508028, 531.9302310318463, 531.9302310318463], [620.885724515664, 604.9188936642771, 592.1208086379498, 574.5579237707481, 554.2980131972819, 539.1601785752816, 545.6669979032695, 542.0581191804094, 540.4976161684017, 539.276242398419, 540.252261772307, 539.5078024153586, 539.2986146078766, 538.647152894561, 538.6360204614383, 538.6360204614383], [618.8018614763591, 600.2471557694986, 577.6973494739532, 554.7638790100235, 537.9659326015532, 531.3162565351746, 529.391424945827, 527.604607109684, 525.6232362014925, 526.5118446636181, 526.5118446636181], [619.9876951863847, 602.0317260562279, 577.8763572910052, 553.8997711708885, 537.1348605383987, 528.7899130909957, 520.8484051090765, 519.7403034896457, 517.243562008838, 515.6626325746871, 510.9117062434349, 516.4134360327889, 511.89363333835973, 515.2277711476457, 508.76553648037805, 508.76553648037805], [620.5752955225382, 606.4909954554112, 582.9588719776619, 559.7969782858676, 537.2298239478438, 535.9408999859828, 534.1264851326392, 528.7185863847147, 527.6404683181065, 527.8174338168773, 527.8174338168773], [624.383736629565, 606.1207672541624, 586.0849553293383, 567.4343602806648, 548.5832058810724, 532.1512370530876, 531.5417193598196, 531.3593068623361, 531.9357790521806, 531.362393819906, 531.362393819906], [621.6851306868389, 604.7641103265722, 592.1095518783939, 580.3386837212046, 565.8885784364062, 551.0854159745636, 541.3568082895497, 533.7681847121282, 533.5721576106208, 533.8062498748546, 534.1210565548591, 534.0367083811302, 534.0367083811302], [619.7087176057688, 603.366423269168, 583.5404911400747, 569.3741407065418, 568.0133231925228, 557.7073141630999, 555.2474206301553, 553.5506015362812, 552.48068006452, 552.48068006452], [623.808754566687, 607.7153006296824, 584.0937213429339, 555.0798106359458, 533.7319018664905, 523.173540194907, 529.0700174971219, 529.0700174971219], [618.1205002744614, 603.7668180513333, 581.0035076605502, 551.9118063972824, 537.4442695359744, 534.2114918637038, 535.2491066529817, 535.2491066529817], [621.6456203016469, 604.6875676648382, 582.8633346933661, 554.7158885011834, 538.9005566158714, 530.8970598247552, 534.7624771567874, 533.8172638012937, 531.7654434473648, 531.7654434473648], [617.7541201292993, 604.8628087035717, 588.5681918480964, 563.2317335872264, 547.6879360259733, 536.9893389517424, 537.8205354921156, 537.8205354921156], [626.0524700155847, 609.9583528638317, 594.9342904138596, 572.3397459437548, 558.2074051456503, 550.9430140098506, 553.7325798505285, 550.4986841364312, 548.1768573695376, 545.3064394257436, 545.5501007899697, 544.4790072670662, 544.4790072670662], [616.5518744333754, 614.4161263238927, 604.5666628540024, 595.7591620270257, 590.069631607888, 584.1858597021097, 574.8147032345416, 565.7995560043563, 560.5662985349669, 553.5954956521742, 573.8942070842173, 573.8942070842173], [619.165760431194, 599.5745160849799, 587.5872684163812, 566.620262587244, 547.5414743019206, 534.5222252506226, 534.0095991536622, 533.2802857783508, 533.1141951189676, 533.1545647904564, 533.1545647904564]]"
        self.expected_objective_curves = "[([4, 24, 40, 56, 88, 104, 120, 164, 246, 290, 1000], [624.4131899421741, 604.3426729892019, 580.4415981209335, 566.2145313796427, 562.3946193648277, 546.8794931679699, 535.8028002448107, 532.1622303277846, 532.939014848137, 532.4544015179036, 532.4544015179036]), ([4, 24, 40, 115, 131, 1000], [624.4131899421741, 603.6485267460105, 581.5706091178515, 583.9128190245713, 580.7662291262072, 580.7662291262072]), ([4, 24, 40, 56, 1000], [624.4131899421741, 606.2252067443167, 608.2893641318437, 591.7243023004486, 591.7243023004486]), ([4, 24, 40, 56, 88, 147, 657, 1000], [624.4131899421741, 604.7435781022047, 593.9041943029691, 582.7580082494529, 577.4033820040011, 573.9475104848436, 573.3099401704529, 572.2208733061591]), ([4, 24, 40, 56, 72, 88, 104, 156, 178, 1000], [624.4131899421741, 601.3803055218472, 580.0102213895614, 562.8270862613596, 541.7823055381924, 532.2321735262267, 533.0254671389854, 533.6428450167786, 530.826054741922, 530.826054741922]), ([4, 24, 40, 56, 72, 88, 120, 152, 224, 1000], [624.4131899421741, 601.2518580630849, 583.183035506711, 565.1946279773447, 542.9742703531032, 533.536305729741, 531.0217017441998, 530.8466345548103, 530.2832795013347, 530.2832795013347]), ([4, 24, 40, 56, 72, 120, 284, 306, 389, 1000], [624.4131899421741, 612.1712702905619, 602.432864073124, 586.4351652344512, 584.1934249957848, 580.5716097961747, 577.3762443066248, 579.1370807297736, 577.2258547314669, 577.2258547314669]), ([4, 24, 40, 56, 72, 88, 197, 1000], [624.4131899421741, 605.340061520366, 594.394681335377, 569.9373131844344, 548.5933480550608, 537.0310437425059, 536.1165507948401, 536.1165507948401]), ([4, 24, 40, 72, 88, 919, 1000], [624.4131899421741, 613.5269435924067, 603.5957837922593, 587.7054301061617, 579.7613183977356, 578.8536290753593, 578.8536290753593]), ([4, 24, 40, 56, 72, 124, 212, 232, 252, 395, 415, 1000], [624.4131899421741, 596.6505073213333, 577.3173730148943, 552.5051111367109, 532.052575373237, 529.7572945355536, 531.5723229366752, 532.2861880351599, 530.8344945508438, 532.0559951508028, 531.9302310318463, 531.9302310318463]), ([4, 24, 40, 56, 72, 88, 116, 132, 172, 188, 256, 297, 317, 444, 469, 1000], [624.4131899421741, 604.9188936642771, 592.1208086379498, 574.5579237707481, 554.2980131972819, 539.1601785752816, 545.6669979032695, 542.0581191804094, 540.4976161684017, 539.276242398419, 540.252261772307, 539.5078024153586, 539.2986146078766, 538.647152894561, 538.6360204614383, 538.6360204614383]), ([4, 24, 40, 56, 72, 88, 128, 156, 210, 270, 1000], [624.4131899421741, 600.2471557694986, 577.6973494739532, 554.7638790100235, 537.9659326015532, 531.3162565351746, 529.391424945827, 527.604607109684, 525.6232362014925, 526.5118446636181, 526.5118446636181]), ([4, 24, 40, 56, 72, 88, 120, 160, 198, 219, 255, 275, 310, 350, 370, 1000], [624.4131899421741, 602.0317260562279, 577.8763572910052, 553.8997711708885, 537.1348605383987, 528.7899130909957, 520.8484051090765, 519.7403034896457, 517.243562008838, 515.6626325746871, 510.9117062434349, 516.4134360327889, 511.89363333835973, 515.2277711476457, 520.001691815753, 520.001691815753]), ([4, 24, 40, 56, 72, 88, 164, 192, 250, 270, 1000], [624.4131899421741, 606.4909954554112, 582.9588719776619, 559.7969782858676, 537.2298239478438, 535.9408999859828, 534.1264851326392, 528.7185863847147, 527.6404683181065, 527.8174338168773, 527.8174338168773]), ([4, 24, 40, 56, 72, 88, 140, 168, 372, 392, 1000], [624.4131899421741, 606.1207672541624, 586.0849553293383, 567.4343602806648, 548.5832058810724, 532.1512370530876, 531.5417193598196, 531.3593068623361, 531.9357790521806, 531.362393819906, 531.362393819906]), ([4, 24, 40, 56, 72, 88, 104, 120, 190, 386, 496, 975, 1000], [624.4131899421741, 604.7641103265722, 592.1095518783939, 580.3386837212046, 565.8885784364062, 551.0854159745636, 541.3568082895497, 533.7681847121282, 533.5721576106208, 533.8062498748546, 534.1210565548591, 534.0367083811302, 534.0367083811302]), ([4, 24, 40, 72, 88, 104, 174, 414, 459, 1000], [624.4131899421741, 603.366423269168, 583.5404911400747, 569.3741407065418, 568.0133231925228, 557.7073141630999, 555.2474206301553, 553.5506015362812, 552.48068006452, 552.48068006452]), ([4, 24, 40, 56, 72, 88, 144, 1000], [624.4131899421741, 607.7153006296824, 584.0937213429339, 555.0798106359458, 533.7319018664905, 523.173540194907, 529.0700174971219, 529.0700174971219]), ([4, 24, 40, 56, 72, 104, 160, 1000], [624.4131899421741, 603.7668180513333, 581.0035076605502, 551.9118063972824, 537.4442695359744, 534.2114918637038, 535.2491066529817, 535.2491066529817]), ([4, 24, 40, 56, 72, 88, 136, 152, 215, 1000], [624.4131899421741, 604.6875676648382, 582.8633346933661, 554.7158885011834, 538.9005566158714, 530.8970598247552, 534.7624771567874, 533.8172638012937, 531.7654434473648, 531.7654434473648]), ([4, 24, 40, 56, 72, 88, 217, 1000], [624.4131899421741, 604.8628087035717, 588.5681918480964, 563.2317335872264, 547.6879360259733, 536.9893389517424, 537.8205354921156, 537.8205354921156]), ([4, 24, 40, 56, 72, 120, 152, 195, 236, 257, 297, 744, 1000], [624.4131899421741, 609.9583528638317, 594.9342904138596, 572.3397459437548, 558.2074051456503, 550.9430140098506, 553.7325798505285, 550.4986841364312, 548.1768573695376, 545.3064394257436, 545.5501007899697, 544.4790072670662, 544.4790072670662]), ([4, 44, 60, 76, 108, 124, 140, 156, 178, 198, 233, 1000], [624.4131899421741, 614.4161263238927, 604.5666628540024, 595.7591620270257, 590.069631607888, 584.1858597021097, 574.8147032345416, 565.7995560043563, 560.5662985349669, 553.5954956521742, 573.8942070842173, 573.8942070842173]), ([4, 24, 40, 56, 72, 88, 120, 186, 283, 516, 1000], [624.4131899421741, 599.5745160849799, 587.5872684163812, 566.620262587244, 547.5414743019206, 534.5222252506226, 534.0095991536622, 533.2802857783508, 533.1141951189676, 533.1545647904564, 533.1545647904564])]"
        self.expected_progress_curves = "[([0.004, 0.024, 0.04, 0.056, 0.088, 0.104, 0.12, 0.164, 0.246, 0.29, 1.0], [1.0, 0.8077748398105459, 0.5788625523982045, 0.4426029737446671, 0.4060178075191055, 0.2574218532873973, 0.1513349459838774, 0.11646742677044711, 0.1239070721571255, 0.119265693200503, 0.119265693200503]), ([0.004, 0.024, 0.04, 0.115, 0.131, 1.0], [1.0, 0.801126661634317, 0.5896756430747797, 0.6121081332578417, 0.5819717023586879, 0.5819717023586879]), ([0.004, 0.024, 0.04, 0.056, 1.0], [1.0, 0.8258047865970137, 0.8455742317689219, 0.6869225302931109, 0.6869225302931109]), ([0.004, 0.024, 0.04, 0.056, 0.088, 0.147, 0.657, 1.0], [1.0, 0.8116145042172124, 0.7078004224949941, 0.601047945483119, 0.5497640702247781, 0.516665497929866, 0.5105591751030569, 0.5001286489269532]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.104, 0.156, 0.178, 1.0], [1.0, 0.7794027972624357, 0.5747310463944328, 0.4101597545679664, 0.2086035936010372, 0.11713730700104548, 0.12473506804263292, 0.13064799802516838, 0.10367021947202489, 0.10367021947202489]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.12, 0.152, 0.224, 1.0], [1.0, 0.7781725931080357, 0.605118639466874, 0.43283485988173653, 0.22001962379215212, 0.12962761914976376, 0.10554402653148255, 0.10386732240855558, 0.09847179544472011, 0.09847179544472011]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.12, 0.284, 0.306, 0.389, 1.0], [1.0, 0.8827531462407548, 0.7894836654633924, 0.6362658769464337, 0.614795633928254, 0.5801077378191034, 0.5495041592201166, 0.5663685511189552, 0.5480638046820007, 0.5480638046820007]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.197, 1.0], [1.0, 0.8173273177374163, 0.7124980567710002, 0.47825787642870055, 0.2738362800300893, 0.1630984348690578, 0.15433988850131514, 0.15433988850131514]), ([0.004, 0.024, 0.04, 0.072, 0.088, 0.919, 1.0], [1.0, 0.8957370927042313, 0.8006215165621979, 0.6484318250891602, 0.5723471806680321, 0.5636537959483024, 0.5636537959483024]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.124, 0.212, 0.232, 0.252, 0.395, 0.415, 1.0], [1.0, 0.7341032058823077, 0.5489403200569316, 0.3113011488600884, 0.11541720762298438, 0.09343418009373355, 0.11081759507858478, 0.11765463037924051, 0.10375105165117438, 0.11544996050582929, 0.11424545600955073, 0.11424545600955073]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.116, 0.132, 0.172, 0.188, 0.256, 0.297, 0.317, 0.444, 0.469, 1.0], [1.0, 0.8132935871268377, 0.6907200654747359, 0.5225117246085154, 0.32847264905636153, 0.1834902008237789, 0.2458091929342973, 0.21124519579204376, 0.19629949498313184, 0.18460180084120986, 0.1939496158941673, 0.18681956441222244, 0.18481607043660042, 0.17857670288603802, 0.17847008212757284, 0.17847008212757284]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.128, 0.156, 0.21, 0.27, 1.0], [1.0, 0.7685500677002512, 0.5525795405056104, 0.3329344738659009, 0.1720523228586291, 0.10836512187309054, 0.0899300680343167, 0.0728168394320463, 0.05384028087532065, 0.06235091886127962, 0.06235091886127962]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.12, 0.16, 0.198, 0.219, 0.255, 0.275, 0.31, 0.35, 0.37, 1.0], [1.0, 0.7856417704221921, 0.5542939859475797, 0.3246584903330453, 0.16409273911481376, 0.08416909471600464, 0.008109387457483228, -0.0025034438811595843, -0.026415958552529095, -0.04155729319976037, -0.08705923902472906, -0.03436648115727111, -0.077654842837099, -0.045722173838814516, 0.0, 0.0]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.164, 0.192, 0.25, 0.27, 1.0], [1.0, 0.828350375118047, 0.6029717156790586, 0.3811389280319545, 0.16500225014711506, 0.15265759476921453, 0.13528005603160642, 0.08348596395396353, 0.0731602997699017, 0.07485518493050428, 0.07485518493050428]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.14, 0.168, 0.372, 0.392, 1.0], [1.0, 0.8248045185036681, 0.63291174534793, 0.4542858719207389, 0.27373914346782985, 0.11636213880030663, 0.11052448965049746, 0.10877743591832499, 0.11429859211461374, 0.10880700122123935, 0.10880700122123935]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.104, 0.12, 0.19, 0.386, 0.496, 0.975, 1.0], [1.0, 0.8118111513751979, 0.6906122539811937, 0.5778768908420004, 0.43948116293756745, 0.29770403371834125, 0.204528398279852, 0.1318484376089192, 0.1299709901531796, 0.13221300629540927, 0.13522806388632067, 0.13442022015988742, 0.13442022015988742]), ([0.004, 0.024, 0.04, 0.072, 0.088, 0.104, 0.174, 0.414, 0.459, 1.0], [1.0, 0.7984248186198538, 0.6085421669497463, 0.4728640980805463, 0.4598308829803154, 0.3611251923776925, 0.33756558853055474, 0.32131432191411785, 0.311067160529021, 0.311067160529021]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.144, 1.0], [1.0, 0.8400761447530043, 0.6138407232657317, 0.3359603056142374, 0.13150093904517088, 0.03037834372717752, 0.08685179165218888, 0.08685179165218888]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.104, 0.16, 1.0], [1.0, 0.8022595953384154, 0.5842442349686087, 0.3056187791012508, 0.16705610046033406, 0.136094207083837, 0.1460319515650199, 0.1460319515650199]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.136, 0.152, 0.215, 1.0], [1.0, 0.8110780648559205, 0.6020567083665486, 0.3324748452837879, 0.1810036743006574, 0.10435026988895484, 0.14137126280059803, 0.1323184920573869, 0.11266720469203718, 0.11266720469203718]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.217, 1.0], [1.0, 0.8127564340190685, 0.6566949163905615, 0.4140352599780779, 0.2651647060623328, 0.1626990076841998, 0.1706597836072382, 0.1706597836072382]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.12, 0.152, 0.195, 0.236, 0.257, 0.297, 0.744, 1.0], [1.0, 0.8615589533938061, 0.7176661569148106, 0.5012671503346408, 0.36591480838286583, 0.2963401804333265, 0.3230572172610171, 0.2920846158509525, 0.26984734497028495, 0.24235594799484358, 0.2446896120893008, 0.2344312253969974, 0.2344312253969974]), ([0.004, 0.044, 0.06, 0.076, 0.108, 0.124, 0.14, 0.156, 0.178, 0.198, 0.233, 1.0], [1.0, 0.9042532307488115, 0.809920100330889, 0.7255663559155698, 0.6710749395368028, 0.6147231774094721, 0.5249710271604495, 0.4386285515523529, 0.38850708444101056, 0.3217442948260924, 0.5161549851838295, 0.5161549851838295]), ([0.004, 0.024, 0.04, 0.056, 0.072, 0.088, 0.12, 0.186, 0.283, 0.516, 1.0], [1.0, 0.7621078683583334, 0.6473001327765245, 0.44648886002043014, 0.2637619704759196, 0.1390702527540419, 0.13416058182546559, 0.12717559081970217, 0.12558485931633692, 0.12597149941070643, 0.12597149941070643])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
