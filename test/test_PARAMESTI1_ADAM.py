import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_PARAMESTI1_ADAM(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "PARAMESTI-1"
        self.expected_solver_name = "ADAM"
        self.expected_all_recommended_xs = "[[(1, 1), (1.499999998791309, 1.4999999977642131), (1.9501941923588508, 1.987094219932607), (2.3107878532807606, 2.4582134482168443), (2.5529285525385585, 2.910688626601515), (2.6735728102941936, 3.342105880932273), (2.6899542500362976, 3.7502815215869814), (2.6899542500362976, 3.7502815215869814)], [(1, 1), (1.4999999985559338, 1.4999999977293828), (1.932993291938198, 1.986711774230398), (2.2440348916506148, 2.456897788889597), (2.4083163624171253, 2.9077290626998678), (2.44254407028723, 3.336642733544894), (2.3797113794507667, 3.741323114809531), (2.3797113794507667, 3.741323114809531)], [(1, 1), (1.499999998835872, 1.4999999978958247), (1.9404733052245104, 1.988477408601106), (2.2721224509352327, 2.462940275831444), (2.4668453889578603, 2.921263524147326), (2.532846259123281, 3.3615417496061113), (2.497651319590837, 3.7820494001259655), (2.497651319590837, 3.7820494001259655)], [(1, 1), (1.4999999986312154, 1.4999999976417437), (1.9469294217038196, 1.9857183716205578), (2.2982941289497942, 2.453463546710798), (2.5254015181952383, 2.8999730046233427), (2.6284990850479986, 3.322281927910226), (2.6280624990716146, 3.717724608129799), (2.6280624990716146, 3.717724608129799)], [(1, 1), (1.499999998718335, 1.4999999976014837), (1.9595288332775824, 1.9852468651195), (2.348494517090238, 2.4518252940297622), (2.6410910913081436, 2.896258221564911), (2.6410910913081436, 2.896258221564911)], [(1, 1), (1.4999999985606116, 1.499999997627275), (1.9426900620229344, 1.9855500305407883), (2.2817412903056398, 2.452879240372902), (2.4889684793692197, 2.898649139654859), (2.569371442317222, 3.3198248303688933), (2.5476548391529574, 3.7136805732869904), (2.5476548391529574, 3.7136805732869904)], [(1, 1), (1.4999999988836588, 1.4999999977117935), (1.9619539124383973, 1.9865159869509958), (2.3578282363369873, 2.456222844873722), (2.662726547849891, 2.9062081922205154), (2.662726547849891, 2.9062081922205154)], [(1, 1), (1.499999998917367, 1.4999999978230236), (1.9546640245311062, 1.9877242918214684), (2.3283490653507437, 2.460372846851994), (2.5928458019910563, 2.9155312257844384), (2.740909309994596, 3.351023321210268), (2.7847195560387896, 3.7648783142492475), (2.7847195560387896, 3.7648783142492475)], [(1, 1), (1.4999999990221815, 1.499999997835602), (1.9613678832195345, 1.987856522556788), (2.3551064045551033, 2.4608247224132196), (2.655646424640037, 2.916542164127999), (2.8509694100967384, 3.3528813645206785), (2.9451902560983765, 3.767915346468817), (2.9451902560983765, 3.767915346468817)], [(1, 1), (1.4999999986853543, 1.4999999976895564), (1.9464715710867926, 1.9862658938665052), (2.296292244742408, 2.4553593193822), (2.5206706851870417, 2.904259882762772), (2.6204538832727606, 3.330226864240831), (2.616769236305944, 3.730788548055702), (2.616769236305944, 3.730788548055702)], [(1, 1), (1.4999999987764931, 1.4999999976616243), (1.959379903016692, 1.9859476648930996), (2.3477288631831237, 2.4542583383445153), (2.6390190918565595, 2.901771830935421), (2.9038914229828934, 3.7232123575829563), (2.9038914229828934, 3.7232123575829563)], [(1, 1), (1.499999998849765, 1.499999997825977), (1.9525933487244422, 1.9877554207021877), (2.3201970641050482, 2.4604792657244823), (2.5742081160271995, 2.9157693834683043), (2.7092499303835615, 3.351461154178211), (2.7398840333052306, 3.765594107780981), (2.7398840333052306, 3.765594107780981)], [(1, 1), (1.4999999986736439, 1.4999999978576177), (1.9316156410148964, 1.9880858337998633), (2.2383394693193557, 2.46160725882213), (2.3959996590735804, 2.918290822327578), (2.4232673208424385, 3.3560922742280948), (2.354390505181745, 3.773159908490177), (2.354390505181745, 3.773159908490177)], [(1, 1), (1.4999999986813972, 1.499999997758642), (1.942028772358508, 1.9870335165400914), (2.278720374849203, 2.458004867024835), (2.4818156759574186, 2.910219876548974), (2.5573422154894057, 3.3412412511264455), (2.5309811553093753, 3.7488644778003435), (2.5309811553093753, 3.7488644778003435)], [(1, 1), (1.4999999988963897, 1.4999999976873828), (1.963032575730405, 1.986241293238976), (2.3621499358150033, 2.4552742955071345), (2.6730813713889265, 2.9040678996425844), (2.6730813713889265, 2.9040678996425844)], [(1, 1), (1.49999999870549, 1.4999999978873646), (1.9280030772683479, 1.9883913968071307), (2.2245310010763557, 2.4626478252621546), (2.3676159771069476, 2.920612006355875), (2.3802962239894443, 3.3603483993060883), (2.2992076769017102, 3.7801040105614256), (2.2992076769017102, 3.7801040105614256)], [(1, 1), (1.4999999989653414, 1.4999999978332312), (1.9590150428465747, 1.9878316668960219), (2.345739701548274, 2.46073981760702), (2.6335113734254096, 2.916352279903009), (2.8117180262435304, 3.3525324653669633), (2.887255110899325, 3.7673451796739057), (2.887255110899325, 3.7673451796739057)], [(1, 1), (1.4999999990266915, 1.4999999979486676), (1.9524032107282145, 1.9890057944844708), (2.3189401953263173, 2.4647324017474017), (2.5706114661471204, 2.9252476664087492), (2.7023818162460573, 3.368826720396342), (2.72947234807979, 3.7939090275432017), (2.72947234807979, 3.7939090275432017)], [(1, 1), (1.4999999988220243, 1.4999999978541105), (1.9435004744137196, 1.9880494830738447), (2.2840774113622717, 2.4614833032479764), (2.492985739888695, 2.9180140043804896), (2.5747546818630203, 3.355584235476636), (2.5539740062330423, 3.772330424553557), (2.5539740062330423, 3.772330424553557)], [(1, 1), (1.499999998811286, 1.499999997802729), (1.948029829317512, 1.9875090748535287), (2.3020873246091687, 2.4596364023252257), (2.533133791993778, 2.9138818311090673), (2.6404705011900402, 3.347989152028801), (2.643852709415485, 3.759915544128992), (2.643852709415485, 3.759915544128992)], [(1, 1), (1.4999999987325505, 1.4999999977366494), (1.9510954864271053, 1.9867921383692217), (2.3145459394668046, 2.4571745554754534), (2.561724848696121, 2.90835220513937), (2.688612616275314, 3.3377938128073943), (2.7112542432113953, 3.743211581828384), (2.7112542432113953, 3.743211581828384)], [(1, 1), (1.4999999989712245, 1.4999999978406475), (1.9623014961103151, 1.9879093137251758), (2.3589679440807427, 2.4610049984466014), (2.6650604873885237, 2.916945239471562), (2.8681131746374735, 3.353621838568679), (2.971057557223319, 3.7691252339648518), (2.971057557223319, 3.7691252339648518)], [(1, 1), (1.4999999986772714, 1.4999999977145095), (1.9485303184797789, 1.986546336841586), (2.304475077209838, 2.456327533105876), (2.5390597342378376, 2.9064442025364876), (2.6508671004721074, 3.3342679995858795), (2.6587551859452963, 3.7374255887358383), (2.6587551859452963, 3.7374255887358383)], [(1, 1), (1.4999999984462316, 1.4999999976932727), (1.929262963713483, 1.9863078923386304), (2.2301725804009913, 2.4555044391178833), (2.380103793161717, 2.904587500036976), (2.3999637048616163, 3.3308332915779384), (2.325063676241127, 3.73178487964176), (2.325063676241127, 3.73178487964176)]]"
        self.expected_all_intermediate_budgets = "[[0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000], [0, 180, 330, 480, 630, 780, 930, 1000]]"
        self.expected_all_est_objectives = "[[-9.16944227603262, -7.018017019163427, -6.045399102140761, -5.7212537204920135, -5.648727110217291, -5.587087892913641, -5.450109809520928, -5.450109809520928], [-8.940090362495347, -6.8817800264007865, -5.984458403025596, -5.658405109009439, -5.487402548197918, -5.288838750431085, -5.047284182131535, -5.047284182131535], [-9.121210005202611, -6.983022006353776, -6.023652187523378, -5.676467342085714, -5.526834517889321, -5.363838608584933, -5.145260518756914, -5.145260518756914], [-8.779886386724968, -6.741647515064164, -5.8409285218667994, -5.550080879197394, -5.478317264188384, -5.401334578889208, -5.249821223855754, -5.249821223855754], [-8.99288952739613, -6.817445425647, -5.786154251036526, -5.427931736233523, -5.3935083049195995, -5.3935083049195995], [-8.87740808504234, -6.766447332604166, -5.806702036011494, -5.461009177903708, -5.33492981969938, -5.2148171630214275, -5.044442300285056, -5.044442300285056], [-9.024638576352391, -6.912889654296439, -5.959515437505122, -5.684964263965716, -5.732991320083336, -5.732991320083336], [-8.921050660074993, -6.85559432013702, -5.945223949177388, -5.679317431735191, -5.67459623098717, -5.684048487899454, -5.604281884301284, -5.604281884301284], [-8.550164686658025, -6.502194651028625, -5.550339283606514, -5.245116437761885, -5.25406069371343, -5.3417764085036685, -5.3805742813393245, -5.3805742813393245], [-8.983830735669818, -6.868664620931846, -5.910780630697875, -5.578583905595107, -5.4777230604013765, -5.382247436745347, -5.222565523580854, -5.222565523580854], [-9.025843710458552, -6.9081268525602875, -5.955696789550235, -5.675665672042113, -5.700204824511177, -5.770129103911526, -5.770129103911526], [-9.203733926294058, -6.997802230838146, -5.962819861114303, -5.588289861922594, -5.491586126697632, -5.430514153795232, -5.307499015020994, -5.307499015020994], [-9.33623207280299, -7.076931327591272, -6.009587848864462, -5.55978789440806, -5.318364099722526, -5.100610923843614, -4.883405189587304, -4.883405189587304], [-9.573886675373538, -7.38666516441867, -6.429424196928853, -6.109733460998381, -5.99138340435494, -5.846426298675342, -5.624785972107778, -5.624785972107778], [-8.941889405024408, -6.888475943607802, -5.999271786143165, -5.789751694751333, -5.89993388225389, -5.89993388225389], [-9.587195496910567, -7.274067555163913, -6.184014361873583, -5.715425481172872, -5.445851824294664, -5.197949239886101, -4.959415277195165, -4.959415277195165], [-9.346621843523279, -7.164023172275251, -6.166709784034232, -5.854667811074332, -5.853087344438859, -5.903997195344375, -5.879117231557177, -5.879117231557177], [-9.398264139884379, -7.151784828744314, -6.10115382729314, -5.724788679511979, -5.6301668446844095, -5.570123439217002, -5.447342416563703, -5.447342416563703], [-8.499265659696825, -6.522807859400025, -5.647657033011576, -5.352712699347441, -5.255574556357986, -5.1508834345082395, -4.987463183341615, -4.987463183341615], [-9.254478807791063, -7.0680319854455345, -6.06260136706065, -5.704646290315452, -5.595922408982277, -5.502117283504468, -5.345856188699463, -5.345856188699463], [-9.605611629911163, -7.328480447065199, -6.27328072243698, -5.899056461857668, -5.799698663319386, -5.723690466070742, -5.5756531236002, -5.5756531236002], [-8.501695309087717, -6.539038421559411, -5.687146813829602, -5.481515608090276, -5.5775781319905215, -5.7301862813206075, -5.805300749242865, -5.805300749242865], [-9.152042163756049, -7.000076525763647, -6.033038857142321, -5.709941544403361, -5.62721819921529, -5.546516624174383, -5.388458119128175, -5.388458119128175], [-9.213076761398039, -7.0163284435229665, -6.003669890375732, -5.589253606534186, -5.362328352391241, -5.146540566156712, -4.926486420202277, -4.926486420202277]]"
        self.expected_objective_curves = "[([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.018017019163427, -6.045399102140761, -5.7212537204920135, -5.648727110217291, -5.587087892913641, -5.450109809520928, -5.450109809520928]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.8817800264007865, -5.984458403025596, -5.658405109009439, -5.487402548197918, -5.288838750431085, -5.047284182131535, -5.047284182131535]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.983022006353776, -6.023652187523378, -5.676467342085714, -5.526834517889321, -5.363838608584933, -5.145260518756914, -5.145260518756914]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.741647515064164, -5.8409285218667994, -5.550080879197394, -5.478317264188384, -5.401334578889208, -5.249821223855754, -5.249821223855754]), ([0, 180, 330, 480, 630, 1000], [-9.265122221743944, -6.817445425647, -5.786154251036526, -5.427931736233523, -5.3935083049195995, -5.3935083049195995]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.766447332604166, -5.806702036011494, -5.461009177903708, -5.33492981969938, -5.2148171630214275, -5.044442300285056, -5.044442300285056]), ([0, 180, 330, 480, 630, 1000], [-9.265122221743944, -6.912889654296439, -5.959515437505122, -5.684964263965716, -5.732991320083336, -5.732991320083336]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.85559432013702, -5.945223949177388, -5.679317431735191, -5.67459623098717, -5.684048487899454, -5.604281884301284, -5.604281884301284]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.502194651028625, -5.550339283606514, -5.245116437761885, -5.25406069371343, -5.3417764085036685, -5.3805742813393245, -5.3805742813393245]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.868664620931846, -5.910780630697875, -5.578583905595107, -5.4777230604013765, -5.382247436745347, -5.222565523580854, -5.222565523580854]), ([0, 180, 330, 480, 630, 930, 1000], [-9.265122221743944, -6.9081268525602875, -5.955696789550235, -5.675665672042113, -5.700204824511177, -5.770129103911526, -5.770129103911526]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.997802230838146, -5.962819861114303, -5.588289861922594, -5.491586126697632, -5.430514153795232, -5.307499015020994, -5.307499015020994]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.076931327591272, -6.009587848864462, -5.55978789440806, -5.318364099722526, -5.100610923843614, -4.883405189587304, -4.883405189587304]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.38666516441867, -6.429424196928853, -6.109733460998381, -5.99138340435494, -5.846426298675342, -5.624785972107778, -5.624785972107778]), ([0, 180, 330, 480, 630, 1000], [-9.265122221743944, -6.888475943607802, -5.999271786143165, -5.789751694751333, -5.89993388225389, -5.89993388225389]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.274067555163913, -6.184014361873583, -5.715425481172872, -5.445851824294664, -5.197949239886101, -4.959415277195165, -4.959415277195165]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.164023172275251, -6.166709784034232, -5.854667811074332, -5.853087344438859, -5.903997195344375, -5.879117231557177, -5.879117231557177]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.151784828744314, -6.10115382729314, -5.724788679511979, -5.6301668446844095, -5.570123439217002, -5.447342416563703, -5.447342416563703]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.522807859400025, -5.647657033011576, -5.352712699347441, -5.255574556357986, -5.1508834345082395, -4.987463183341615, -4.987463183341615]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.0680319854455345, -6.06260136706065, -5.704646290315452, -5.595922408982277, -5.502117283504468, -5.345856188699463, -5.345856188699463]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.328480447065199, -6.27328072243698, -5.899056461857668, -5.799698663319386, -5.723690466070742, -5.5756531236002, -5.5756531236002]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -6.539038421559411, -5.687146813829602, -5.481515608090276, -5.5775781319905215, -5.7301862813206075, -5.805300749242865, -5.805300749242865]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.000076525763647, -6.033038857142321, -5.709941544403361, -5.62721819921529, -5.546516624174383, -5.388458119128175, -5.388458119128175]), ([0, 180, 330, 480, 630, 780, 930, 1000], [-9.265122221743944, -7.0163284435229665, -6.003669890375732, -5.589253606534186, -5.362328352391241, -5.146540566156712, -4.926486420202277, -4.926486420202277])]"
        self.expected_progress_curves = "[([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5175794672015666, 0.3087726640307372, 0.2391834042401568, 0.2236130046297531, 0.21037996862469321, 0.18097278292812005, 0.18097278292812005]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.4883313827950448, 0.29568958963685216, 0.22569072904086157, 0.18897898701745505, 0.1463502516101624, 0.09449202823675577, 0.09449202823675577]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5100665511593927, 0.3041039203847378, 0.2295684255964922, 0.1974444526333831, 0.16245162126959636, 0.1155261108699032, 0.1155261108699032]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.45824698767915856, 0.26487582904317497, 0.20243510549422258, 0.1870285097779065, 0.1705014562088817, 0.13797376085337335, 0.13797376085337335]), ([0.0, 0.18, 0.33, 0.48, 0.63, 1.0], [1.0, 0.474519687491516, 0.25311659637029366, 0.17621147583868518, 0.16882126996130004, 0.16882126996130004]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.46357114481128237, 0.2575279044675151, 0.18331271747873615, 0.15624532824837492, 0.13045890233299237, 0.093881917881017, 0.093881917881017]), ([0.0, 0.18, 0.33, 0.48, 0.63, 1.0], [1.0, 0.49501016367604095, 0.2903347007326113, 0.231392590115265, 0.2417032947384378, 0.2417032947384378]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.4827096956782322, 0.2872665277758532, 0.2301802980471656, 0.2291667254838103, 0.2311959864238567, 0.21407126642269256, 0.21407126642269256]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.40683996938937, 0.20249058113131424, 0.13696371227554058, 0.13888391285924032, 0.15771519045821875, 0.1660445247783605, 0.1660445247783605]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.48551569758060636, 0.27987205241566493, 0.2085542872598835, 0.18690094293893977, 0.16640372670691334, 0.13212236171402186, 0.13212236171402186]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.93, 1.0], [1.0, 0.49398765999061983, 0.2895148930178454, 0.2293963187947642, 0.23466451495885704, 0.24967623229417588, 0.24967623229417588]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5132396486015782, 0.2910441120215454, 0.21063801374382715, 0.18987713996842437, 0.17676588301757343, 0.15035633676153218, 0.15035633676153218]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5302275052322623, 0.30108451313068474, 0.2045190593048559, 0.15268891110856048, 0.10594049763623135, 0.05930961185194669, 0.05930961185194669]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5967228176975549, 0.39121722008574095, 0.3225843074027063, 0.2971762858658918, 0.26605612109809895, 0.21847319337866936, 0.21847319337866936]), ([0.0, 0.18, 0.33, 0.48, 0.63, 1.0], [1.0, 0.48976889802257983, 0.29886980575130834, 0.25388891477871384, 0.2775434145942275, 0.2775434145942275]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5725497622544315, 0.3385313274780508, 0.2379321667304985, 0.18005865594414827, 0.12683760660691662, 0.07562786295996364, 0.07562786295996364]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5489248470685922, 0.33481628839063965, 0.2678254529469238, 0.2674861499381107, 0.2784157483255488, 0.2730743849695108, 0.2730743849695108]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5462974541899746, 0.32074238586803816, 0.2399423081009436, 0.21962838780942315, 0.2067379492027415, 0.18037866424451157, 0.18037866424451157]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.41126532293035967, 0.22338327474655773, 0.16006305171973537, 0.13920891696796278, 0.1167332684206578, 0.08164933708209732, 0.08164933708209732]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5283169469840003, 0.31246573803477695, 0.2356180325321526, 0.21227660966488723, 0.19213802489357318, 0.15859105943555693, 0.15859105943555693]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5842314121709452, 0.3576955059840316, 0.2773550453026841, 0.25602438305621994, 0.23970653778060458, 0.20792509134601375, 0.20792509134601375]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.4147497866019125, 0.23186115156356127, 0.1877151473093632, 0.2083383624168269, 0.24110109405247002, 0.257227068748409, 0.257227068748409]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5137279063691456, 0.3061191006947531, 0.23675484592898807, 0.2189953568696109, 0.2016699122112129, 0.16773706913374983, 0.16773706913374983]), ([0.0, 0.18, 0.33, 0.48, 0.63, 0.78, 0.93, 1.0], [1.0, 0.5172169547748204, 0.29981401423106324, 0.2108449155784505, 0.16212739141298518, 0.11580091827451797, 0.06855852027110776, 0.06855852027110776])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
