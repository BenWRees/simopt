import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_SSCONT1_NELDMD(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "SSCONT-1"
        self.expected_solver_name = "NELDMD"
        self.expected_all_recommended_xs = "[[(600, 600), (386.50898996914805, 420.1320551157649), (378.6017084362248, 415.67079758302384), (384.72863772603625, 415.3550700801035), (384.72863772603625, 415.3550700801035)], [(600, 600), (97.68228084475709, 746.8016557398353), (192.60441917479966, 497.7546679304735), (404.7040984405264, 380.4423000756949), (463.3489817843795, 135.08147325196518), (602.8941510777272, 25.141427368450763), (602.8941510777272, 25.141427368450763)], [(600, 600), (397.50753683570093, 261.5403268770166), (641.516908702544, 0), (609.6900641937873, 81.53934371392694), (638.8655626517414, 97.69360570859973), (638.8655626517414, 97.69360570859973)], [(600, 600), (403.21990585682386, 165.71476201389407), (634.6937675396191, 104.83279038197128), (535.8854112122359, 167.27440056284132), (539.2395043970282, 158.0383625323855), (539.2395043970282, 158.0383625323855)], [(600, 600), (379.3932928263026, 480.793598757748), (351.91642412280794, 403.0532414570137), (338.6952203778805, 408.62149229505553), (335.13130413823876, 387.7943402603615), (331.0643317938014, 395.08922233330065), (335.64144749404636, 395.9525379507494), (335.64144749404636, 395.9525379507494)], [(600, 600), (373.36516544516064, 405.7402513642893), (339.442132732995, 438.03790108331475), (329.73435016980113, 365.27341915119587), (346.69586652588396, 349.1245942916831), (377.8987490657163, 350.1694346195193), (436.85751218995745, 346.5714285597352), (436.85751218995745, 346.5714285597352)], [(600, 600), (410.5130965152081, 560.9679254242766), (131.84419720317976, 612.57542465047), (168.07645281200163, 556.4496670513751), (386.1361911982283, 503.7126032319561), (252.8959678714591, 543.830183393133), (379.95868927732135, 453.896587461982), (460.91726563621205, 410.14209394750617), (463.72969406997515, 397.99116611778754), (462.3234798530936, 404.06663003264686), (504.20898224942044, 376.1139193605496), (504.20898224942044, 376.1139193605496)], [(600, 600), (325.1173485120577, 320.0626123028588), (505.6377521001699, 427.65031195988803), (411.27550420033987, 255.30062391977617), (391.7869883311563, 330.7690401213455), (434.09598331377543, 435.81098819179374), (434.09598331377543, 435.81098819179374)], [(600, 600), (617.0189059187588, 71.65654768451077), (580.8391424867718, 175.82935290011238), (590.4159241547297, 133.27541871135293), (585.6275333207508, 154.55238580573265), (607.4421242508008, 114.21048187327025), (608.7726380478678, 136.5934640957985), (596.8674572350426, 139.97717939513353), (596.8674572350426, 139.97717939513353)], [(600, 600), (752.6553518700596, 1.0000002248489182e-07), (676.4634009641036, 116.08518829901602), (685.987394827348, 101.57453977413903), (680.1462105255633, 106.29891928370029), (679.7651018202796, 110.01095891396784), (679.2493274292785, 108.5134840606375), (679.5072146247791, 109.26222148730267), (679.5072146247791, 109.26222148730267)], [(600, 600), (198.05652087540932, 648.8958181739654), (197.40410320185592, 595.62273544339), (297.23755530945016, 530.1256981693232), (347.3989379908298, 517.3545855562556), (334.6954879020965, 507.2290930268787), (330.09479853720984, 516.7503040110062), (312.79065908358996, 516.1460224657567), (302.11289917581837, 510.9322058147559), (302.11289917581837, 510.9322058147559)], [(600, 600), (257.13636461656006, 598.1905402747217), (250.4187959904272, 579.6165084320462), (194.72407059432535, 561.6026948614251), (223.22282542138936, 527.0834545898083), (289.93027994214674, 510.3894795301095), (310.3374140470195, 432.2498180222135), (453.9558901409706, 359.7920371488679), (566.5793963976917, 167.28382369640303), (710.1978724916428, 94.82604282305738), (710.1978724916428, 94.82604282305738)], [(600, 600), (389.06844705255185, 384.9310649362852), (391.7699268823566, 369.2621945678611), (397.1606400423721, 376.35533493482365), (406.6005113221963, 369.55289002510267), (421.431095762036, 369.8435854823442), (421.431095762036, 369.8435854823442)], [(600, 600), (648.012342204768, 0), (585.9301825270759, 123.42926809330453), (585.2166108521117, 122.63072936129564), (585.2166108521117, 122.63072936129564)], [(600, 600), (176.4947230177745, 636.337327545191), (186.47163223963094, 638.244131606435), (174.8788509101159, 639.1559228858027), (182.76550085342285, 639.8813770965828), (186.6198782305343, 639.4941144786462), (185.370911502916, 639.2401391850881), (185.76932087974603, 639.5163290327093), (185.76932087974603, 639.5163290327093)], [(600, 600), (635.6001949843964, 14.789462140985393), (585.7115242801334, 107.76294608001064), (573.2393566040676, 131.00631706476696), (598.3679465343575, 92.73479813304698), (598.3679465343575, 92.73479813304698)], [(600, 600), (253.33972238832996, 542.734993878152), (318.02096335029466, 551.2847095466295), (323.8344815507563, 554.9138164914946), (337.8247224660744, 555.6903303042895), (337.8247224660744, 555.6903303042895)], [(600, 600), (60.07149020270015, 636.1373609105667), (201.0350750471851, 648.4950285984711), (215.5418327381783, 647.1003526976742), (198.2175486573255, 647.6393887651193), (212.7243063483187, 646.2447128643224), (212.7243063483187, 646.2447128643224)], [(600, 600), (766.3725428070627, 287.8407136187349), (747.8361918680812, 135.45012599099425), (801.7490102255204, 18.69781489492749), (711.611607219871, 117.63098772515733), (605.57294110377, 190.83316025223073), (556.0821811736381, 273.94260900782155), (556.0821811736381, 273.94260900782155)], [(600, 600), (663.4497185614963, 161.1019742359814), (722.4625306518369, 61.07690036568886), (705.9400378229793, 55.946813914025384), (703.7760522869272, 65.13725114516035), (703.7760522869272, 65.13725114516035)], [(600, 600), (503.704402368549, 131.94524212000715), (512.2262701944092, 136.8200781421082), (513.1559513633026, 131.094770695576), (530.6645275994698, 137.98178901651198), (530.6645275994698, 137.98178901651198)], [(600, 600), (301.22488336132477, 539.2832522826413), (267.4615858691099, 522.349167099915), (302.7781676742975, 515.5502295311558), (310.4836953645281, 517.3954996153665), (310.4836953645281, 517.3954996153665)], [(600, 600), (410.54827513010315, 238.0924532243675), (430.33332416324595, 209.2009774624977), (448.6687869842989, 267.5673335492365), (467.72904291139673, 282.30477371167103), (458.0177166713366, 285.8432826115299), (465.86286967225766, 285.69505137566364), (461.8927356662515, 284.0925570660837), (465.8153121667121, 284.0184414481506), (465.8153121667121, 284.0184414481506)], [(600, 600), (236.84781274749605, 514.9021990924593), (346.50046939764525, 292.36049369255454), (382.4621878856966, 424.90579661939216), (619.7483604300207, 46.095037283001375), (655.7100789180721, 178.640340209839), (693.4584140536233, 82.76107853548368), (671.8852060530935, 81.58450669522605), (677.278508053226, 81.87864965529046), (677.278508053226, 81.87864965529046)]]"
        self.expected_all_intermediate_budgets = "[[0, 510, 630, 750, 1000], [0, 150, 270, 390, 510, 570, 1000], [0, 270, 330, 540, 600, 1000], [0, 150, 270, 450, 690, 1000], [0, 210, 390, 510, 630, 780, 960, 1000], [0, 150, 270, 330, 510, 630, 780, 1000], [0, 150, 210, 270, 390, 450, 510, 690, 750, 870, 930, 1000], [0, 240, 300, 360, 420, 540, 1000], [0, 210, 390, 450, 570, 630, 690, 750, 1000], [0, 150, 420, 600, 660, 720, 840, 960, 1000], [0, 210, 270, 390, 510, 570, 690, 780, 900, 1000], [0, 150, 420, 540, 600, 720, 780, 840, 900, 960, 1000], [0, 540, 600, 690, 750, 840, 1000], [0, 150, 210, 870, 1000], [0, 300, 510, 570, 630, 750, 900, 990, 1000], [0, 390, 690, 750, 810, 1000], [0, 270, 330, 390, 570, 1000], [0, 270, 570, 690, 750, 810, 1000], [0, 240, 330, 540, 600, 720, 780, 1000], [0, 240, 480, 660, 780, 1000], [0, 420, 810, 870, 930, 1000], [0, 360, 420, 600, 930, 1000], [0, 150, 270, 330, 510, 570, 720, 900, 960, 1000], [0, 150, 210, 270, 330, 390, 630, 720, 960, 1000]]"
        self.expected_all_est_objectives = "[[618.5809976153716, 531.1444951247202, 530.1364995728987, 530.3231123326633, 530.3231123326633], [619.371245290233, 548.332940129753, 541.0318624791117, 527.3543164453117, 528.4834974637095, 527.6341320229454, 527.6341320229454], [620.2040298994102, 533.0586082668939, 533.0168219505572, 519.1923884743609, 520.4311467807754, 520.4311467807754], [620.3929887875448, 541.1619522590145, 516.1767385555041, 521.1693989681909, 521.8596473125608, 521.8596473125608], [617.140803174291, 532.6667375301192, 526.7604330470449, 527.5683854750222, 526.7401317499002, 527.5835903022498, 527.4895877336083, 527.4895877336083], [617.6250759903628, 528.8195081311449, 529.429614265211, 531.2991127132857, 530.3987414502466, 527.3496986321633, 524.9445217806227, 524.9445217806227], [622.8299886318688, 547.7415327166732, 538.5473977797091, 535.6284315555572, 535.02527887644, 531.400388170159, 529.994446511586, 531.8332060038596, 531.6220618557606, 532.8284844056692, 531.6477083039185, 531.6477083039185], [617.1638109984892, 539.7762638951599, 545.9728696725527, 532.990322448582, 533.7926164793174, 538.8239584900106, 538.8239584900106], [625.4509909440814, 520.6197506321978, 523.5295041592052, 522.233631875064, 520.1716655029037, 520.279738767584, 522.0032336129273, 521.0412373327464, 521.0412373327464], [616.3517529689802, 530.573410838247, 522.5942511189746, 521.7261752324249, 520.9234075273365, 520.6150065414831, 520.1255712985693, 520.7072236244998, 520.7072236244998], [620.885724515664, 550.6018221010959, 549.6842372251567, 546.3525730247653, 547.045272025392, 545.8127793373274, 545.6726361867783, 545.3143022666478, 546.1196323529668, 546.1196323529668], [618.8018614763591, 540.2173502295794, 538.7090883335585, 540.2882272693846, 539.5430350915167, 536.0047501748273, 533.9673418851602, 530.0052475797918, 521.7236732071332, 525.0852945933879, 525.0852945933879], [619.9876951863847, 528.2853996306297, 527.5235622533248, 527.8321097515122, 527.4214616750403, 527.6604206457322, 527.6604206457322], [620.5752955225382, 531.5573235464038, 516.2054467083691, 517.0764825034295, 517.0764825034295], [624.383736629565, 546.4357453610928, 546.3525397263361, 546.304253145094, 546.1837598963997, 546.0042375435766, 546.1020330054357, 546.068134459315, 546.068134459315], [621.6851306868389, 521.9436937736533, 512.4970480869669, 512.0660153129204, 514.197197289285, 514.197197289285], [619.7087176057688, 539.9399235521036, 541.2096397619, 541.5722395591645, 542.4165059487115, 542.4165059487115], [623.808754566687, 547.5887301365392, 540.7123348808792, 540.256533913138, 540.3054870140554, 539.8796906888679, 539.8796906888679], [618.1205002744614, 593.4092648215742, 540.9815516850757, 540.595536233601, 526.7945341525135, 518.1613110192667, 525.8323134316978, 525.8323134316978], [621.6456203016469, 524.7155263002585, 521.377656038648, 519.1676891131846, 518.9404933374591, 518.9404933374591], [617.7541201292993, 522.3250468909133, 519.458872500829, 521.1904376062283, 517.6049995806098, 517.6049995806098], [626.0524700155847, 543.3481763049257, 539.7063951093749, 540.538858854516, 540.5311377090809, 540.5311377090809], [616.5518744333754, 530.7328887220028, 530.6405933626814, 528.6798631600553, 529.0308038802776, 528.9185431567388, 528.7578129324651, 528.6726574154407, 528.5218353824689, 528.5218353824689], [619.165760431194, 540.0360096682115, 537.9395340726029, 534.0198596489678, 518.6675861117205, 528.2656614268095, 522.8601594760138, 520.505632010381, 520.7939039103356, 520.7939039103356]]"
        self.expected_objective_curves = "[([0, 510, 630, 750, 1000], [624.4131899421741, 531.1444951247202, 530.1364995728987, 530.3231123326633, 530.3231123326633]), ([0, 150, 270, 390, 510, 570, 1000], [624.4131899421741, 548.332940129753, 541.0318624791117, 527.3543164453117, 528.4834974637095, 527.6341320229454, 527.6341320229454]), ([0, 270, 330, 540, 600, 1000], [624.4131899421741, 533.0586082668939, 533.0168219505572, 519.1923884743609, 520.4311467807754, 520.4311467807754]), ([0, 150, 270, 450, 690, 1000], [624.4131899421741, 541.1619522590145, 516.1767385555041, 521.1693989681909, 521.8596473125608, 521.8596473125608]), ([0, 210, 390, 510, 630, 780, 960, 1000], [624.4131899421741, 532.6667375301192, 526.7604330470449, 527.5683854750222, 526.7401317499002, 527.5835903022498, 527.4895877336083, 527.4895877336083]), ([0, 150, 270, 330, 510, 630, 780, 1000], [624.4131899421741, 528.8195081311449, 529.429614265211, 531.2991127132857, 530.3987414502466, 527.3496986321633, 524.9445217806227, 524.9445217806227]), ([0, 150, 210, 270, 390, 450, 510, 690, 750, 870, 930, 1000], [624.4131899421741, 547.7415327166732, 538.5473977797091, 535.6284315555572, 535.02527887644, 531.400388170159, 529.994446511586, 531.8332060038596, 531.6220618557606, 532.8284844056692, 531.6477083039185, 531.6477083039185]), ([0, 240, 300, 360, 420, 540, 1000], [624.4131899421741, 539.7762638951599, 545.9728696725527, 532.990322448582, 533.7926164793174, 538.8239584900106, 538.8239584900106]), ([0, 210, 390, 450, 570, 630, 690, 750, 1000], [624.4131899421741, 520.6197506321978, 523.5295041592052, 522.233631875064, 520.1716655029037, 520.279738767584, 522.0032336129273, 521.0412373327464, 521.0412373327464]), ([0, 150, 420, 600, 660, 720, 840, 960, 1000], [624.4131899421741, 530.573410838247, 522.5942511189746, 521.7261752324249, 520.9234075273365, 520.6150065414831, 520.1255712985693, 520.7072236244998, 520.7072236244998]), ([0, 210, 270, 390, 510, 570, 690, 780, 900, 1000], [624.4131899421741, 550.6018221010959, 549.6842372251567, 546.3525730247653, 547.045272025392, 545.8127793373274, 545.6726361867783, 545.3143022666478, 546.1196323529668, 546.1196323529668]), ([0, 150, 420, 540, 600, 720, 780, 840, 900, 960, 1000], [624.4131899421741, 540.2173502295794, 538.7090883335585, 540.2882272693846, 539.5430350915167, 536.0047501748273, 533.9673418851602, 530.0052475797918, 521.7236732071332, 525.0852945933879, 525.0852945933879]), ([0, 540, 600, 690, 750, 840, 1000], [624.4131899421741, 528.2853996306297, 527.5235622533248, 527.8321097515122, 527.4214616750403, 527.6604206457322, 527.6604206457322]), ([0, 150, 210, 870, 1000], [624.4131899421741, 531.5573235464038, 516.2054467083691, 517.0764825034295, 517.0764825034295]), ([0, 300, 510, 570, 630, 750, 900, 990, 1000], [624.4131899421741, 546.4357453610928, 546.3525397263361, 546.304253145094, 546.1837598963997, 546.0042375435766, 546.1020330054357, 546.068134459315, 546.068134459315]), ([0, 390, 690, 750, 810, 1000], [624.4131899421741, 521.9436937736533, 512.4970480869669, 519.9301969801962, 514.197197289285, 514.197197289285]), ([0, 270, 330, 390, 570, 1000], [624.4131899421741, 539.9399235521036, 541.2096397619, 541.5722395591645, 542.4165059487115, 542.4165059487115]), ([0, 270, 570, 690, 750, 810, 1000], [624.4131899421741, 547.5887301365392, 540.7123348808792, 540.256533913138, 540.3054870140554, 539.8796906888679, 539.8796906888679]), ([0, 240, 330, 540, 600, 720, 780, 1000], [624.4131899421741, 593.4092648215742, 540.9815516850757, 540.595536233601, 526.7945341525135, 518.1613110192667, 525.8323134316978, 525.8323134316978]), ([0, 240, 480, 660, 780, 1000], [624.4131899421741, 524.7155263002585, 521.377656038648, 519.1676891131846, 518.9404933374591, 518.9404933374591]), ([0, 420, 810, 870, 930, 1000], [624.4131899421741, 522.3250468909133, 519.458872500829, 521.1904376062283, 517.6049995806098, 517.6049995806098]), ([0, 360, 420, 600, 930, 1000], [624.4131899421741, 543.3481763049257, 539.7063951093749, 540.538858854516, 540.5311377090809, 540.5311377090809]), ([0, 150, 270, 330, 510, 570, 720, 900, 960, 1000], [624.4131899421741, 530.7328887220028, 530.6405933626814, 528.6798631600553, 529.0308038802776, 528.9185431567388, 528.7578129324651, 528.6726574154407, 528.5218353824689, 528.5218353824689]), ([0, 150, 210, 270, 330, 390, 630, 720, 960, 1000], [624.4131899421741, 540.0360096682115, 537.9395340726029, 534.0198596489678, 518.6675861117205, 528.2656614268095, 522.8601594760138, 520.505632010381, 520.7939039103356, 520.7939039103356])]"
        self.expected_progress_curves = "[([0.0, 0.51, 0.63, 0.75, 1.0], [1.0, 0.10733132566947895, 0.09768386512833398, 0.09946992383965428, 0.09946992383965428]), ([0.0, 0.15, 0.27, 0.39, 0.51, 0.57, 1.0], [1.0, 0.2718408263811192, 0.20196268216201044, 0.07105576950515945, 0.08186308834611807, 0.07373386638677863, 0.07373386638677863]), ([0.0, 0.27, 0.33, 0.54, 0.6, 1.0], [1.0, 0.12565117934049977, 0.12525124519665395, -0.007061517716130512, 0.004794558294874628, 0.004794558294874628]), ([0.0, 0.15, 0.27, 0.45, 0.69, 1.0], [1.0, 0.20320776307149466, -0.03592410897013651, 0.01186032245884842, 0.018466644931072397, 0.018466644931072397]), ([0.0, 0.21, 0.39, 0.51, 0.63, 0.78, 0.96, 1.0], [1.0, 0.12190060974380709, 0.06537174972901326, 0.07310461040875378, 0.0651774473208495, 0.07325013483140486, 0.07235044229794448, 0.07235044229794448]), ([0.0, 0.15, 0.27, 0.33, 0.51, 0.63, 0.78, 1.0], [1.0, 0.08507902481491429, 0.09091831135112702, 0.10881116065680373, 0.10019376525574768, 0.07101157271276724, 0.04799177988949114, 0.04799177988949114]), ([0.0, 0.15, 0.21, 0.27, 0.39, 0.45, 0.51, 0.69, 0.75, 0.87, 0.93, 1.0], [1.0, 0.26618050409981764, 0.17818403045065687, 0.15024679261507828, 0.14447405714858272, 0.10978046153537004, 0.09632428442255919, 0.11392293316094934, 0.11190208611098246, 0.12344867867794289, 0.11214754661542281, 0.11214754661542281]), ([0.0, 0.24, 0.3, 0.36, 0.42, 0.54, 1.0], [1.0, 0.18994542893871544, 0.2492527439545462, 0.12499762016903977, 0.13267632469301321, 0.1808309752065575, 0.1808309752065575]), ([0.0, 0.21, 0.39, 0.45, 0.57, 0.63, 0.69, 0.75, 1.0], [1.0, 0.006599673616284113, 0.03444873732052057, 0.022046027105157955, 0.0023110796873452547, 0.003345441946853568, 0.019840900169134947, 0.010633695695858161, 0.010633695695858161]), ([0.0, 0.15, 0.42, 0.6, 0.66, 0.72, 0.84, 0.96, 1.0], [1.0, 0.1018655147247163, 0.02549749067532805, 0.017189192243777403, 0.009505954213062369, 0.006554268229434284, 0.0018699150247750615, 0.007436871994912113, 0.007436871994912113]), ([0.0, 0.21, 0.27, 0.39, 0.51, 0.57, 0.69, 0.78, 0.9, 1.0], [1.0, 0.2935561496794151, 0.2847740038973444, 0.2528868602968178, 0.259516637842325, 0.24772052966122432, 0.246379228588426, 0.24294963770504785, 0.2506574001215791, 0.2506574001215791]), ([0.0, 0.15, 0.42, 0.54, 0.6, 0.72, 0.78, 0.84, 0.9, 0.96, 1.0], [1.0, 0.19416703785242692, 0.17973156033342239, 0.19484539743800044, 0.18771321107213798, 0.15384851389623533, 0.13434861030514483, 0.09642766075108455, 0.017165245520767244, 0.04933910741882755, 0.04933910741882755]), ([0.0, 0.54, 0.6, 0.69, 0.75, 0.84, 1.0], [1.0, 0.07996710673740015, 0.07267561023918868, 0.07562869848293464, 0.07169841217670889, 0.07398547310325466, 0.07398547310325466]), ([0.0, 0.15, 0.21, 0.87, 1.0], [1.0, 0.11128247991937602, -0.03564934508702864, -0.027312717561653717, -0.027312717561653717]), ([0.0, 0.3, 0.51, 0.57, 0.63, 0.75, 0.9, 0.99, 1.0], [1.0, 0.25368289737395017, 0.2528865415996951, 0.2524243938388659, 0.2512711607118427, 0.24955296382894449, 0.25048895789924025, 0.2501645170963911, 0.2501645170963911]), ([0.0, 0.39, 0.69, 0.75, 0.81, 1.0], [1.0, 0.01927104820006263, -0.07114218958040713, 0.0, -0.05487017100474451, -0.05487017100474451]), ([0.0, 0.27, 0.33, 0.39, 0.57, 1.0], [1.0, 0.1915118049804432, 0.20366417709193615, 0.20713459641076654, 0.21521501567913706, 0.21521501567913706]), ([0.0, 0.27, 0.57, 0.69, 0.75, 0.81, 1.0], [1.0, 0.26471804044135794, 0.19890450408752894, 0.19454206236548652, 0.19501058934322363, 0.19093532012364356, 0.19093532012364356]), ([0.0, 0.24, 0.33, 0.54, 0.6, 0.72, 0.78, 1.0], [1.0, 0.7032634284138238, 0.20148116079083064, 0.19778663175283528, 0.06569812921434268, -0.016929893667701965, 0.05648877663419724, 0.05648877663419724]), ([0.0, 0.24, 0.48, 0.66, 0.78, 1.0], [1.0, 0.045800078887515, 0.013853537474548308, -0.007297913712034895, -0.009472389856761673, -0.009472389856761673]), ([0.0, 0.42, 0.81, 0.87, 0.93, 1.0], [1.0, 0.022920954337406745, -0.0045110162525566115, 0.012061681909233892, -0.02225431463695286, -0.02225431463695286]), ([0.0, 0.36, 0.42, 0.6, 0.93, 1.0], [1.0, 0.2241319726862288, 0.18927671928746653, 0.19724417620597257, 0.1971702776200286, 0.1971702776200286]), ([0.0, 0.15, 0.27, 0.33, 0.51, 0.57, 0.72, 0.9, 0.96, 1.0], [1.0, 0.10339186728444674, 0.10250851434149487, 0.08374249178565524, 0.08710132282861749, 0.08602688266992399, 0.08448854403971064, 0.08367352606778666, 0.08223001809872771, 0.08223001809872771]), ([0.0, 0.15, 0.21, 0.27, 0.33, 0.39, 0.63, 0.72, 0.96, 1.0], [1.0, 0.19243143901258555, 0.1723662060385311, 0.13485125444194432, -0.012084367347087422, 0.07977819365919796, 0.028042482443853788, 0.005507451632766114, 0.00826648343098024, 0.00826648343098024])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
