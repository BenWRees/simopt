import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_FACSIZE1_RNDSRCH(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "FACSIZE-1"
        self.expected_solver_name = "RNDSRCH"
        self.expected_all_recommended_xs = "[[(300, 300, 300), (289.8915086187877, 195.03698226817045, 212.9793556453907), (289.8915086187877, 195.03698226817045, 212.9793556453907)], [(300, 300, 300), (380.927949319142, 227.6318357963392, 290.7130595057053), (221.8705975458371, 451.4169891215547, 211.149308573062), (212.9283349015932, 299.0174639377216, 281.77804395323756), (398.14575586829335, 229.4098837465824, 164.94492952979186), (356.936183203668, 188.95044489766755, 228.44368280537333), (334.62232455609757, 225.11087331417042, 201.39873978276938), (373.97224895725583, 192.1043516615712, 172.33971889199702), (373.97224895725583, 192.1043516615712, 172.33971889199702)], [(300, 300, 300), (217.71567896416917, 205.77047481676706, 406.5343135354902), (317.73985356050315, 227.79275595882498, 220.31893894315053), (250.64041365878714, 224.88687352391975, 256.6246316494979), (208.51974831378504, 211.92050242140425, 244.1953580172491), (208.51974831378504, 211.92050242140425, 244.1953580172491)], [(300, 300, 300), (190.20498923989018, 474.0379345263219, 193.32111016188117), (237.85025044134346, 216.5066264927754, 396.99080077925316), (194.9605027171918, 332.9019112349397, 200.38632260364227), (219.73676588685467, 237.2873240604807, 202.67779636082452), (220.6489322008942, 242.10349595988814, 195.22303227384361), (203.44781664835222, 253.34246266593482, 172.0981958215241), (203.44781664835222, 253.34246266593482, 172.0981958215241)], [(300, 300, 300), (218.38483452962876, 236.36409120816987, 414.52735391378417), (214.55410145789597, 396.98550216843745, 209.0336858353265), (251.73379592593736, 192.64639356909197, 219.44809358445386), (199.39430208017, 200.57275004544425, 191.33531933032947), (199.82844464071093, 173.65927835678093, 202.92545955199498), (199.82844464071093, 173.65927835678093, 202.92545955199498)], [(300, 300, 300), (190.27113654655494, 353.51049361957394, 301.40561613205386), (236.160970145895, 252.2290312214704, 182.12199371577316), (236.160970145895, 252.2290312214704, 182.12199371577316)], [(300, 300, 300), (256.9312040061072, 193.3304141300806, 386.43317647300904), (153.45887974518723, 156.80969447211004, 366.90608264783685), (251.80855077884598, 148.4823947697158, 245.34435671209596), (160.327459900841, 162.80050614091945, 255.4448822726978), (160.327459900841, 162.80050614091945, 255.4448822726978)], [(300, 300, 300), (223.33067077931395, 272.4287310368244, 314.77278889001514), (331.7142259966948, 218.57542759744746, 202.05499582108524), (331.7142259966948, 218.57542759744746, 202.05499582108524)], [(300, 300, 300), (276.7918561983725, 274.4581344529287, 271.0922413370609), (253.2060207603967, 307.43904225567366, 189.91293747120812), (211.38549249416735, 217.35983410353742, 202.62911801108402), (191.213402041859, 202.64370663337124, 183.20912544847488), (191.213402041859, 202.64370663337124, 183.20912544847488)], [(300, 300, 300), (270.26477222338156, 338.7828797005254, 276.22655957311554), (406.7379863459669, 241.94662382482272, 224.61629501669952), (228.73215177759894, 308.58981561460513, 320.85399379539217), (294.9631195928099, 268.00060409145647, 290.44914405899385), (339.59912111493975, 231.45331994977818, 197.86058593467408), (352.3466244656597, 218.42418077276466, 191.34295722525428), (209.95456005981617, 249.07148405405155, 240.54051120480395), (209.95456005981617, 249.07148405405155, 240.54051120480395)], [(300, 300, 300), (313.0716869568913, 194.1799698999494, 327.56294093005266), (153.71193844734492, 281.4599847725306, 333.1952971852801), (171.30892391720434, 225.55585685406854, 216.14636836389036), (207.4882101011298, 212.82597628854495, 177.93031078021517), (207.4882101011298, 212.82597628854495, 177.93031078021517)], [(300, 300, 300), (176.6887720323861, 275.0920085159166, 189.72553185979461), (180.94573967882556, 221.0893692647831, 212.2528862602388), (180.94573967882556, 221.0893692647831, 212.2528862602388)], [(300, 300, 300), (229.9680321658122, 312.180625040086, 264.19947514174044), (200.01141195193262, 243.79821029457491, 346.09898808457604), (227.09281886596514, 225.22196433805968, 232.1891244348642), (227.09281886596514, 225.22196433805968, 232.1891244348642)], [(300, 300, 300), (215.9250763139733, 211.93718124643215, 279.1783744223167), (285.4471705080392, 196.13886622487797, 202.01933970009952), (179.06724030091175, 229.2628320385026, 211.78813151763597), (179.06724030091175, 229.2628320385026, 211.78813151763597)], [(300, 300, 300), (234.27985677879494, 167.20194183425818, 155.82955953862216), (174.53447033277325, 159.34967756882742, 218.69043332111875), (147.40113215741516, 140.80698432627833, 207.66814207174627), (147.40113215741516, 140.80698432627833, 207.66814207174627)], [(300, 300, 300), (269.9564110564077, 411.30252642389996, 174.09084555946492), (223.49638125926305, 383.0153221165371, 157.55707607818513), (291.0566250395212, 204.57488810694608, 178.53264594634462), (222.24225328036158, 199.128241104121, 206.12676221678265), (222.24225328036158, 199.128241104121, 206.12676221678265)], [(300, 300, 300), (180.8365699378329, 203.53867228599316, 265.6599666721429), (180.8365699378329, 203.53867228599316, 265.6599666721429)], [(300, 300, 300), (242.4874520830724, 403.62917332265295, 226.75858327312764), (284.8260285021233, 360.8846133059947, 195.37531168961561), (237.19575273655883, 274.8285218334893, 222.0916992527625), (235.89400303266865, 273.41694082878143, 190.04092072524367), (235.89400303266865, 273.41694082878143, 190.04092072524367)], [(300, 300, 300), (386.1669834913501, 238.0006371559659, 166.93807477530447), (257.52092736863347, 232.81003897249306, 227.47005146664375), (257.52092736863347, 232.81003897249306, 227.47005146664375)], [(300, 300, 300), (233.0450455987119, 413.28670195052877, 248.4221640669292), (147.95483776316172, 348.86844136194173, 220.20948493174075), (211.8467858934462, 203.29725336159137, 238.25868466461438), (211.8467858934462, 203.29725336159137, 238.25868466461438)], [(300, 300, 300), (259.95910626172497, 265.0985557675948, 209.3761288425141), (236.86866537939187, 243.70251291172286, 250.49478270565191), (254.37139988098352, 235.325323120341, 210.35468541691128), (254.37139988098352, 235.325323120341, 210.35468541691128)], [(300, 300, 300), (481.947185413572, 154.40147509799212, 176.1037383706913), (241.80423520244335, 212.57981686130356, 339.0882136593301), (269.6413580089287, 266.6739882973431, 253.48046742704187), (198.83020709091775, 204.66142765676472, 193.16022036373147), (237.23710200580655, 142.0122689499209, 201.36582821047887), (237.23710200580655, 142.0122689499209, 201.36582821047887)], [(300, 300, 300), (268.07852441779784, 323.42586677007023, 306.9648594523046), (268.4193705349711, 369.12409420099266, 228.13251439424874), (192.76722793198007, 233.2660314377132, 176.74238083365975), (192.76722793198007, 233.2660314377132, 176.74238083365975)], [(300, 300, 300), (183.2855791789462, 323.52168426850193, 266.4668288296814), (222.13303535037045, 202.257126050655, 212.53569493455626), (222.13303535037045, 202.257126050655, 212.53569493455626)]]"
        self.expected_all_intermediate_budgets = "[[0, 710, 10000], [0, 230, 380, 1120, 2510, 4340, 4400, 5330, 10000], [0, 790, 1020, 5090, 8070, 10000], [0, 140, 160, 1480, 1670, 2920, 8980, 10000], [0, 1120, 1610, 1870, 3260, 5910, 10000], [0, 750, 1040, 10000], [0, 430, 530, 590, 3400, 10000], [0, 1170, 1790, 10000], [0, 210, 2630, 4060, 4100, 10000], [0, 50, 770, 3190, 3270, 4180, 5770, 9150, 10000], [0, 90, 400, 1630, 1910, 10000], [0, 200, 5630, 10000], [0, 180, 770, 2290, 10000], [0, 250, 4990, 6030, 10000], [0, 330, 2010, 2040, 10000], [0, 20, 1420, 1660, 2080, 10000], [0, 1540, 10000], [0, 20, 800, 1600, 4980, 10000], [0, 130, 4160, 10000], [0, 460, 500, 2970, 10000], [0, 50, 1800, 8010, 10000], [0, 230, 750, 1020, 1970, 9620, 10000], [0, 380, 790, 1270, 10000], [0, 90, 930, 10000]]"
        self.expected_all_est_objectives = "[[900.0, 697.907846532349, 697.907846532349], [900.0, 899.2728446211863, 884.4368952404539, 793.7238427925523, 792.5005691446677, 774.3303109067091, 761.1319376530373, 738.416319510824, 738.416319510824], [900.0, 830.0204673164263, 765.8515484624787, 732.1519188322047, 664.6356087524383, 664.6356087524383], [900.0, 857.5640339280933, 851.3476777133723, 728.2487365557737, 659.70188630816, 657.975460434626, 628.8884751358111, 628.8884751358111], [900.0, 869.2762796515829, 820.5732894616596, 663.8282830794832, 591.3023714559439, 576.4131825494869, 576.4131825494869], [900.0, 845.1872462981829, 670.5119950831386, 670.5119950831386], [900.0, 836.6947946091968, 677.1746568651344, 645.6353022606579, 578.5728483144584, 578.5728483144584], [900.0, 810.5321907061536, 752.3446494152274, 752.3446494152274], [900.0, 822.3422319883621, 750.5580004872785, 631.3744446087886, 577.066234123705, 577.066234123705], [900.0, 885.2742114970225, 873.3009051874889, 858.1759611875963, 853.4128677432601, 768.9130269993921, 762.1137624636788, 699.5665553186717, 699.5665553186717], [900.0, 834.8145977868934, 768.3672204051556, 613.0111491351634, 598.2444971698898, 598.2444971698898], [900.0, 641.5063124080972, 614.2879952038475, 614.2879952038475], [900.0, 806.3481323476389, 789.9086103310837, 684.5039076388892, 684.5039076388892], [900.0, 707.0406319827223, 683.6053764330169, 620.1182038570504, 620.1182038570504], [900.0, 557.3113581516753, 552.5745812227195, 495.8762585554396, 495.8762585554396], [900.0, 855.3497830397724, 764.0687794539854, 674.1641590928119, 627.4972566012653, 627.4972566012653], [900.0, 650.0352088959689, 650.0352088959689], [900.0, 872.8752086788529, 841.0859534977336, 734.1159738228106, 699.3518645866935, 699.3518645866935], [900.0, 791.1056954226207, 717.8010178077704, 717.8010178077704], [900.0, 894.7539116161698, 717.0327640568441, 653.4027239196521, 653.4027239196521], [900.0, 734.4337908718338, 731.0659609967668, 700.0514084182358, 700.0514084182358], [900.0, 812.4523988822555, 793.472265723077, 789.7958137333137, 596.6518551114141, 580.6151991662064, 580.6151991662064], [900.0, 898.4692506401728, 865.6759791302122, 602.775640203353, 602.775640203353], [900.0, 773.2740922771296, 636.9258563355817, 636.9258563355817]]"
        self.expected_objective_curves = "[([0, 710, 10000], [900.0, 697.907846532349, 697.907846532349]), ([0, 230, 380, 1120, 2510, 4340, 4400, 5330, 10000], [900.0, 899.2728446211863, 884.4368952404539, 793.7238427925523, 792.5005691446677, 774.3303109067091, 761.1319376530373, 738.416319510824, 738.416319510824]), ([0, 790, 1020, 5090, 8070, 10000], [900.0, 830.0204673164263, 765.8515484624787, 732.1519188322047, 664.6356087524383, 664.6356087524383]), ([0, 140, 160, 1480, 1670, 2920, 8980, 10000], [900.0, 857.5640339280933, 851.3476777133723, 728.2487365557737, 659.70188630816, 657.975460434626, 628.8884751358111, 628.8884751358111]), ([0, 1120, 1610, 1870, 3260, 5910, 10000], [900.0, 869.2762796515829, 820.5732894616596, 663.8282830794832, 591.3023714559439, 576.4131825494869, 576.4131825494869]), ([0, 750, 1040, 10000], [900.0, 845.1872462981829, 670.5119950831386, 670.5119950831386]), ([0, 430, 530, 590, 3400, 10000], [900.0, 836.6947946091968, 677.1746568651344, 645.6353022606579, 578.5728483144584, 578.5728483144584]), ([0, 1170, 1790, 10000], [900.0, 810.5321907061536, 752.3446494152274, 752.3446494152274]), ([0, 210, 2630, 4060, 4100, 10000], [900.0, 822.3422319883621, 750.5580004872785, 631.3744446087886, 577.066234123705, 577.066234123705]), ([0, 50, 770, 3190, 3270, 4180, 5770, 9150, 10000], [900.0, 885.2742114970225, 873.3009051874889, 858.1759611875963, 853.4128677432601, 768.9130269993921, 762.1137624636788, 699.5665553186717, 699.5665553186717]), ([0, 90, 400, 1630, 1910, 10000], [900.0, 834.8145977868934, 768.3672204051556, 613.0111491351634, 598.2444971698898, 598.2444971698898]), ([0, 200, 5630, 10000], [900.0, 641.5063124080972, 614.2879952038475, 614.2879952038475]), ([0, 180, 770, 2290, 10000], [900.0, 806.3481323476389, 789.9086103310837, 684.5039076388892, 684.5039076388892]), ([0, 250, 4990, 6030, 10000], [900.0, 707.0406319827223, 683.6053764330169, 620.1182038570504, 620.1182038570504]), ([0, 330, 2010, 2040, 10000], [900.0, 557.3113581516753, 552.5745812227195, 495.8762585554396, 495.8762585554396]), ([0, 20, 1420, 1660, 2080, 10000], [900.0, 855.3497830397724, 764.0687794539854, 674.1641590928119, 627.4972566012653, 627.4972566012653]), ([0, 1540, 10000], [900.0, 650.0352088959689, 650.0352088959689]), ([0, 20, 800, 1600, 4980, 10000], [900.0, 872.8752086788529, 841.0859534977336, 734.1159738228106, 699.3518645866935, 699.3518645866935]), ([0, 130, 4160, 10000], [900.0, 791.1056954226207, 717.8010178077704, 717.8010178077704]), ([0, 460, 500, 2970, 10000], [900.0, 894.7539116161698, 717.0327640568441, 653.4027239196521, 653.4027239196521]), ([0, 50, 1800, 8010, 10000], [900.0, 734.4337908718338, 731.0659609967668, 700.0514084182358, 700.0514084182358]), ([0, 230, 750, 1020, 1970, 9620, 10000], [900.0, 812.4523988822555, 793.472265723077, 789.7958137333137, 596.6518551114141, 580.6151991662064, 580.6151991662064]), ([0, 380, 790, 1270, 10000], [900.0, 898.4692506401728, 865.6759791302122, 602.775640203353, 602.775640203353]), ([0, 90, 930, 10000], [900.0, 773.2740922771296, 636.9258563355817, 636.9258563355817])]"
        self.expected_progress_curves = "[([0.0, 0.071, 1.0], [1.0, 0.4999250656611697, 0.4999250656611697]), ([0.0, 0.023, 0.038, 0.112, 0.251, 0.434, 0.44, 0.533, 1.0], [1.0, 0.9982006615691164, 0.9614892589484719, 0.7370207530308458, 0.7339937750970278, 0.6890316598473567, 0.6563724223413059, 0.6001628612276351, 0.6001628612276351]), ([0.0, 0.079, 0.102, 0.509, 0.807, 1.0], [1.0, 0.8268363733508248, 0.6680510502599997, 0.5846616668255769, 0.4175932589205475, 0.4175932589205475]), ([0.0, 0.014, 0.016, 0.148, 0.167, 0.292, 0.898, 1.0], [1.0, 0.8949926427974332, 0.8796103339221854, 0.57500328283042, 0.4053848139857302, 0.4011127910964962, 0.3291373481422118, 0.3291373481422118]), ([0.0, 0.112, 0.161, 0.187, 0.326, 0.591, 1.0], [1.0, 0.9239744731685555, 0.8034594298903951, 0.41559553992965304, 0.23613092504637045, 0.19928778177239492, 0.19928778177239492]), ([0.0, 0.075, 0.104, 1.0], [1.0, 0.8643664103824087, 0.4321343158495337, 0.4321343158495337]), ([0.0, 0.043, 0.053, 0.059, 0.34, 1.0], [1.0, 0.843351926901113, 0.44862100321459614, 0.3705771978896789, 0.20463185227231565, 0.20463185227231565]), ([0.0, 0.117, 0.179, 1.0], [1.0, 0.7786128353309825, 0.6346283688828298, 0.6346283688828298]), ([0.0, 0.021, 0.263, 0.406, 0.41, 1.0], [1.0, 0.807836659796214, 0.6302073246710682, 0.3352888537778157, 0.20090375110862782, 0.20090375110862782]), ([0.0, 0.005, 0.077, 0.319, 0.327, 0.418, 0.577, 0.915, 1.0], [1.0, 0.9635611893269636, 0.9339333672476804, 0.8965068504441198, 0.8847206251970946, 0.6756266470956864, 0.658801937635636, 0.5040295233215722, 0.5040295233215722]), ([0.0, 0.009, 0.04, 0.163, 0.191, 1.0], [1.0, 0.8386993993965854, 0.6742760543483131, 0.2898490698938381, 0.25330914300785645, 0.25330914300785645]), ([0.0, 0.02, 0.563, 1.0], [1.0, 0.3603600553931717, 0.29300861222639185, 0.29300861222639185]), ([0.0, 0.018, 0.077, 0.229, 1.0], [1.0, 0.7682594263885663, 0.7275799999391542, 0.4667571581149643, 0.4667571581149643]), ([0.0, 0.025, 0.499, 0.603, 1.0], [1.0, 0.5225240483829658, 0.46453375198034697, 0.30743540297212374, 0.30743540297212374]), ([0.0, 0.033, 0.201, 0.204, 1.0], [1.0, 0.15202051573766218, 0.14029941043455885, 0.0, 0.0]), ([0.0, 0.002, 0.142, 0.166, 0.208, 1.0], [1.0, 0.8895135019768372, 0.6636396068686247, 0.44117155775128025, 0.32569479233103193, 0.32569479233103193]), ([0.0, 0.154, 1.0], [1.0, 0.3814647211507062, 0.3814647211507062]), ([0.0, 0.002, 0.08, 0.16, 0.498, 1.0], [1.0, 0.9328799856593721, 0.8542178039536227, 0.5895217004964155, 0.5034982733355884, 0.5034982733355884]), ([0.0, 0.013, 0.416, 1.0], [1.0, 0.7305421745623476, 0.5491505113237093, 0.5491505113237093]), ([0.0, 0.046, 0.05, 0.297, 1.0], [1.0, 0.987018608792748, 0.5472494753979799, 0.38979760209367137, 0.38979760209367137]), ([0.0, 0.005, 0.18, 0.801, 1.0], [1.0, 0.5903081354826085, 0.5819744754431647, 0.5052292872795892, 0.5052292872795892]), ([0.0, 0.023, 0.075, 0.102, 0.197, 0.962, 1.0], [1.0, 0.7833643705148298, 0.7363982281859158, 0.7273008859297503, 0.24936816677918275, 0.2096856282381807, 0.2096856282381807]), ([0.0, 0.038, 0.079, 0.127, 1.0], [1.0, 0.9962121766111651, 0.9150655669298348, 0.2645214093727733, 0.2645214093727733]), ([0.0, 0.009, 0.093, 1.0], [1.0, 0.6864180578208983, 0.3490257644254041, 0.3490257644254041])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives

        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
