import unittest
import math

from simopt.experiment_base import ProblemSolver, post_normalize

# Note: Tests have inherent randomness and may vary **slightly** between
#       runs/systems. To make sure these tsts still work, assertAlmostEqual
#       is used instead of assertEqual.
#       Some attributes, such as the lengths of lists, are still checked
#       with assertEqual as these should not change between runs.

class test_PARAMESTI1_NELDMD(unittest.TestCase):
    def setUp(self):
        # Expected values
        self.expected_problem_name = "PARAMESTI-1"
        self.expected_solver_name = "NELDMD"
        self.expected_all_recommended_xs = "[[(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.893320294453125, 5.598085844609374), (2.023596170727539, 4.886765058198241), (1.9693346972143555, 5.418140779885253), (2.03178373159729, 5.371039645582885), (2.012077692566681, 5.1406776354661545), (1.9948174418701459, 5.230328688991021), (1.9948174418701459, 5.230328688991021)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.7192968604687495, 4.952265545156248), (1.8706005683496087, 5.069731363095701), (1.7775161586090082, 4.94685752524597), (1.8124643543141168, 4.910731045873259), (1.8327954124055856, 4.9992628243276584), (1.8204040790758984, 5.039459008627613), (1.8204040790758984, 5.039459008627613)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.4949999899999993, 7.434999869999996), (1.8005077963281244, 5.598085844609373), (1.8965228090368647, 5.575305693702391), (1.9114024168905634, 5.8907684864016705), (1.8671148124996182, 5.981024260029982), (1.870746909670505, 5.800728920273264), (1.870746909670505, 5.800728920273264)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.8498144359570312, 4.895224530683592), (2.038521097183838, 4.775885543836669), (1.9353155328625489, 4.516542287357176), (1.9826810256800844, 4.709758149542693), (1.9386823273807146, 4.691934720795096), (1.9479986046964741, 4.608694361263035), (1.9479986046964741, 4.608694361263035)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.1362707266139744, 4.516538274772572), (2.1522356795947872, 4.472089871954433), (2.1599390896771906, 4.510594501056751), (2.1599390896771906, 4.510594501056751)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.7424999849999994, 6.197499894999996), (2.1137499774999995, 5.331249912499998), (1.9590624806249997, 4.372187431874998), (1.8957372865917965, 4.870571210869139), (1.8912658511352536, 4.4220983195385735), (1.9262820247442622, 4.509261098539428), (1.9022556122657772, 4.668125459954069), (1.920147490986051, 4.58965960403344), (1.920147490986051, 4.58965960403344)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.216230444179687, 5.174628821914063), (2.169945044724121, 4.813409346789552), (2.2334817255694572, 4.97839927265564), (2.208971914663238, 5.035266565818329), (2.1955859324202347, 4.910121133013268), (2.1955859324202347, 4.910121133013268)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.19882810078125, 5.957734274843751), (2.0267382605078126, 5.905527244648438), (2.144204078447266, 5.229252844248046), (2.0424487094091797, 5.554338286899414), (2.0496959092749787, 5.361873958207015), (2.0684833024653817, 5.391211144427699), (2.05076915763968, 5.465440419108385), (2.05076915763968, 5.465440419108385)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.071210915859375, 6.008007711328125), (2.2500683341210936, 5.817548730800782), (2.168132300620117, 5.219826574907227), (2.14015561661499, 5.763347682091065), (2.2021061463693234, 5.654567929649964), (2.1696315910561372, 5.464392190388871), (2.1956423446390962, 5.557768574668098), (2.1695927043906247, 5.537847449300931), (2.1695927043906247, 5.537847449300931)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.893320294453125, 5.598085844609374), (1.8498144359570312, 4.895224530683592), (2.023596170727539, 4.886765058198241), (1.9204057126071166, 4.803665847230528), (1.9384056950773427, 4.929465567360628), (1.956302530519776, 4.8418488942306075), (1.956302530519776, 4.8418488942306075)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.107828346760254, 4.576785816413574), (2.1270132218609623, 4.788544540162963), (2.1464416844506458, 4.703653356117439), (2.1464416844506458, 4.703653356117439)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.19882810078125, 5.957734274843751), (2.0267382605078126, 5.905527244648438), (1.9721142381738286, 5.177045814052733), (2.071815163894043, 5.385269686799316), (2.024351480770874, 5.593342497537231), (2.044520147203026, 5.424264456061591), (2.022267297120047, 5.420989714954957), (2.022267297120047, 5.420989714954957)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.4949999899999993, 7.434999869999996), (1.9899999799999994, 4.959999919999999), (1.7115624856249996, 5.857187401874998), (1.7313818211621088, 5.518325104033202), (1.819964583044433, 5.549141753801268), (1.7848502191297908, 5.666584912439421), (1.8173040034167858, 5.667070199142264), (1.8105208471588607, 5.607984654796056), (1.8105208471588607, 5.607984654796056)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.9701806444628898, 5.298862217841795), (1.8815978825805657, 5.2680455680737275), (1.8693618598785395, 5.090910256710813), (1.9167122464952082, 5.1506024094355745), (1.8873174678837197, 5.194400950573461), (1.8856883585340016, 5.1317059683576645), (1.8856883585340016, 5.1317059683576645)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (3.0418749587499994, 5.14562491625), (1.5878124881250013, 5.238437414374999), (2.39992184671875, 3.8385155676562497), (2.5178710630859378, 4.842050703632813), (2.023354471513673, 4.7893602750097655), (2.205958227590333, 5.304300450153808), (2.3162637063189706, 4.9444405331073), (2.1422327192341624, 4.95686538332016), (2.2525381979627994, 4.597005466273653), (2.2568245824587256, 4.860687978952104), (2.1984570547224624, 4.842856052966519), (2.1984570547224624, 4.842856052966519)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.4949999899999993, 7.434999869999996), (1.9899999799999994, 4.959999919999999), (1.7115624856249996, 5.857187401874998), (1.8090881184204095, 5.831688134812009), (1.7529761353010553, 5.807102792901457), (1.7817024645241921, 5.887919079263188), (1.7882137091665167, 5.8395995354471655), (1.7882137091665167, 5.8395995354471655)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.071210915859375, 6.008007711328125), (2.2500683341210936, 5.817548730800782), (2.168132300620117, 5.219826574907227), (2.14015561661499, 5.763347682091065), (2.106181770865784, 5.328606327348329), (2.1456504971802524, 5.382901789813462), (2.1330358753190044, 5.559550870335981), (2.1330358753190044, 5.559550870335981)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.8662499824999998, 6.568749887500001), (2.1920605227929686, 6.200400285566407), (2.08885495847168, 5.941057029086915), (2.003353861566162, 6.319739272413331), (2.0448628691351893, 6.247840365250722), (2.0313279491930154, 6.179051211157156), (2.0207246353651325, 6.266592530308635), (2.0207246353651325, 6.266592530308635)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.4949999899999993, 7.434999869999996), (1.9899999799999994, 4.959999919999999), (1.9822656051562495, 5.864921776718748), (1.848847639101562, 5.634824125117186), (1.9415392876196285, 5.679901028503416), (1.8908051120088192, 5.613924696218108), (1.920079041013374, 5.5765311842477026), (1.9234906820653626, 5.637564484368161), (1.9234906820653626, 5.637564484368161)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.8430468579687502, 5.137890541406251), (1.9377929498046875, 5.700566311289063), (1.9142272764526367, 5.237349767912598), (1.9795162765985108, 5.22100485857483), (1.9423323631651308, 5.464871812266388), (1.984272841596413, 5.395732619174614), (1.9714094394896415, 5.325653537147666), (1.9714094394896415, 5.325653537147666)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.893320294453125, 5.5980858446093755), (1.8498144359570314, 4.895224530683595), (2.023596170727539, 4.886765058198243), (1.9856040755477906, 5.152981636072083), (2.019873436351452, 5.013622212389012), (2.019873436351452, 5.013622212389012)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (2.3767187221875, 6.367656141562501), (2.071210915859375, 6.008007711328125), (2.1997948976367185, 5.357353427597657), (2.236604932598648, 5.453946252489549), (2.216799759124851, 5.609990475029889), (2.1934434482754375, 5.600705118219028), (2.1934434482754375, 5.600705118219028)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (2.17562497625, 4.52687492875), (1.893320294453125, 5.598085844609374), (1.8498144359570312, 4.895224530683592), (2.023596170727539, 4.886765058198241), (1.9407953072269442, 5.089071076755293), (1.945877599681034, 4.984178338624705), (1.983466312090764, 4.96169488294412), (1.9766102802153762, 4.914869377798972), (1.9766102802153762, 4.914869377798972)], [(1, 1), (2.4849999699999996, 2.4849999699999996), (1.2474999949999996, 4.712499924999999), (1.7502343598437493, 5.292578038281247), (1.728964829023437, 4.81111320425781), (1.8202062822583003, 4.716487962028806), (1.8196926714288324, 4.884861676889035), (1.7744571529335016, 4.805894011858365), (1.7855092271426, 4.909822785546148), (1.7998379307334416, 4.871360037795647), (1.783565365935761, 4.848242711764631), (1.783565365935761, 4.848242711764631)]]"
        self.expected_all_intermediate_budgets = "[[0, 150, 270, 480, 600, 690, 750, 810, 960, 1000], [0, 150, 210, 480, 600, 720, 780, 840, 960, 1000], [0, 150, 210, 300, 540, 720, 780, 900, 960, 1000], [0, 150, 270, 540, 660, 720, 840, 900, 960, 1000], [0, 150, 270, 840, 900, 960, 1000], [0, 150, 210, 300, 360, 480, 660, 720, 780, 840, 960, 1000], [0, 150, 270, 570, 690, 750, 810, 870, 1000], [0, 150, 270, 480, 540, 600, 690, 870, 930, 990, 1000], [0, 150, 270, 480, 540, 600, 660, 720, 780, 900, 960, 1000], [0, 150, 270, 480, 540, 600, 720, 900, 960, 1000], [0, 150, 270, 690, 750, 900, 1000], [0, 150, 270, 480, 540, 660, 720, 780, 900, 960, 1000], [0, 150, 210, 300, 420, 480, 660, 720, 870, 930, 990, 1000], [0, 150, 210, 600, 660, 780, 840, 900, 960, 1000], [0, 150, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900, 1000], [0, 150, 210, 300, 420, 480, 750, 870, 930, 990, 1000], [0, 150, 270, 480, 540, 600, 660, 720, 780, 840, 1000], [0, 150, 270, 390, 570, 630, 690, 870, 930, 990, 1000], [0, 150, 210, 300, 420, 540, 600, 720, 840, 900, 960, 1000], [0, 150, 270, 480, 540, 660, 720, 780, 840, 900, 1000], [0, 150, 270, 480, 540, 600, 750, 870, 1000], [0, 150, 270, 420, 480, 540, 780, 840, 960, 1000], [0, 150, 270, 480, 540, 600, 780, 840, 900, 960, 1000], [0, 150, 210, 510, 570, 690, 750, 810, 870, 930, 990, 1000]]"
        self.expected_all_est_objectives = "[[-9.16944227603262, -5.871306999372082, -4.733473119939698, -4.70195670115451, -4.661971214987844, -4.672729472534877, -4.671188904222991, -4.659190785420632, -4.661201281768439, -4.661201281768439], [-8.940090362495347, -5.894566377996935, -5.301941613745327, -4.62320670963959, -4.564870041789244, -4.593826651779861, -4.582341790772201, -4.573621950873492, -4.576308083367474, -4.576308083367474], [-9.121210005202611, -5.871803178327859, -5.413893744735817, -5.399481873661548, -4.6369610393619825, -4.602612841400927, -4.637750661821271, -4.661680227473518, -4.6337265689999025, -4.6337265689999025], [-8.779886386724968, -5.7170727489201365, -4.613311046152679, -4.545486835343257, -4.543872842445989, -4.551699000775199, -4.538282447567526, -4.538214051214219, -4.543415053565002, -4.543415053565002], [-8.99288952739613, -5.504851643116329, -4.569017770707743, -4.562675792755738, -4.56823696325917, -4.566849233161828, -4.566849233161828], [-8.87740808504234, -5.612334938595852, -5.410165644686853, -4.82725975260652, -4.5819737841154575, -4.573603514166729, -4.559903955589788, -4.583069003788504, -4.565758860463795, -4.561881043921569, -4.561379280029752, -4.561379280029752], [-9.024638576352391, -5.792069128742862, -4.693739890477101, -4.697327572926619, -4.671428985876372, -4.702761415196267, -4.689038054552377, -4.681701073687395, -4.681701073687395], [-8.921050660074993, -5.831898214873072, -4.684856910801284, -4.7681902308602035, -4.684975666440125, -4.647780152462962, -4.636109243428385, -4.619441301205763, -4.627315464131804, -4.628795973244435, -4.628795973244435], [-8.550164686658025, -5.331603422732724, -4.490390709006505, -4.702064059848396, -4.6934255621860235, -4.538287972354088, -4.642613210147299, -4.633069365437234, -4.581384520336194, -4.608837002457795, -4.596566155447619, -4.596566155447619], [-8.983830735669818, -5.731522782616615, -4.640719309645201, -4.632407649870032, -4.604274728718362, -4.578404016462647, -4.586296642189949, -4.580505014460019, -4.5799203113391895, -4.5799203113391895], [-9.025843710458552, -5.794101788883463, -4.6477648995381875, -4.613486026102541, -4.602590198916288, -4.6163907434335805, -4.6163907434335805], [-9.203733926294058, -5.708068171554023, -4.587703988231211, -4.631506940077755, -4.591654150418014, -4.532893526379731, -4.535825995482913, -4.551283256845755, -4.536976826630056, -4.537137001155761, -4.537137001155761], [-9.33623207280299, -5.708947446210799, -5.623594201201413, -5.586574879585653, -4.594598687048996, -4.826780315611561, -4.764314818590872, -4.694337381795261, -4.733504507478083, -4.709308510939448, -4.707208233144394, -4.707208233144394], [-9.573886675373538, -6.322604215827017, -5.7435735506105585, -4.898026294313087, -4.902306755590132, -4.907900874922683, -4.899136526745858, -4.901820530246154, -4.903423638061531, -4.903423638061531], [-8.941889405024408, -5.912770139850011, -6.07227177431568, -4.814889823223561, -5.08592265697724, -5.07422054558255, -4.656930505995438, -4.749939177207356, -4.8328864842801345, -4.70020650826556, -4.79463220899948, -4.7815534167970375, -4.7378638740489665, -4.7378638740489665], [-9.587195496910567, -5.882528281267375, -5.703706827928055, -5.544670045035816, -4.649160833635417, -4.843867004188279, -4.755647669707734, -4.798318159083361, -4.78327971353546, -4.7723091039235355, -4.7723091039235355], [-9.346621843523279, -5.973236777891195, -4.832435787350673, -4.854476025749205, -4.894645345023858, -4.797212699395212, -4.833154474142832, -4.780378662097111, -4.796131447115726, -4.806266733803049, -4.806266733803049], [-9.398264139884379, -5.849301522509905, -4.76340496834074, -4.99242142037703, -4.877640009859203, -4.800332063421356, -4.882683742116099, -4.862496366376613, -4.847041511521476, -4.867998347634081, -4.867998347634081], [-8.499265659696825, -5.5292215292983675, -5.184683074202536, -5.455072020995824, -4.463968078653569, -4.592326476927942, -4.5573993929397485, -4.55194576334328, -4.5443573487966225, -4.533941801906541, -4.544803271620421, -4.544803271620421], [-9.254478807791063, -5.847863095865838, -4.746387361292399, -4.730549654436768, -4.744165002119087, -4.706785482932965, -4.693394111387412, -4.715790667524193, -4.703586697071323, -4.699964310691083, -4.699964310691083], [-9.605611629911163, -6.034756966791299, -4.807100003550516, -4.744083520404026, -4.770697704500347, -4.7290553530579125, -4.715254500072173, -4.7196193612173705, -4.7196193612173705], [-8.501695309087717, -5.603394842736275, -4.588871558382808, -5.028780337015253, -4.712500516598881, -4.643635975287881, -4.682944095586841, -4.696261123810974, -4.67935398677834, -4.67935398677834], [-9.152042163756049, -5.871266881396155, -4.677196657358649, -4.612294181740685, -4.609859917536228, -4.591983784056054, -4.583463151365305, -4.5854355888595935, -4.585258465402988, -4.587250894395371, -4.587250894395371], [-9.213076761398039, -5.763843941247447, -5.559162565611603, -4.72832607206506, -4.743950158967783, -4.684403025019747, -4.675894419905385, -4.708536710886516, -4.696746310160166, -4.688488662436644, -4.700189225616131, -4.700189225616131]]"
        self.expected_objective_curves = "[([0, 150, 270, 480, 600, 690, 750, 810, 960, 1000], [-9.265122221743944, -5.871306999372082, -4.733473119939698, -4.70195670115451, -4.661971214987844, -4.672729472534877, -4.671188904222991, -4.659190785420632, -4.661201281768439, -4.661201281768439]), ([0, 150, 210, 480, 600, 720, 780, 840, 960, 1000], [-9.265122221743944, -5.894566377996935, -5.301941613745327, -4.62320670963959, -4.564870041789244, -4.593826651779861, -4.582341790772201, -4.573621950873492, -4.576308083367474, -4.576308083367474]), ([0, 150, 210, 300, 540, 720, 780, 900, 960, 1000], [-9.265122221743944, -5.871803178327859, -5.413893744735817, -5.399481873661548, -4.6369610393619825, -4.602612841400927, -4.637750661821271, -4.661680227473518, -4.6337265689999025, -4.6337265689999025]), ([0, 150, 270, 540, 660, 720, 840, 900, 960, 1000], [-9.265122221743944, -5.7170727489201365, -4.613311046152679, -4.545486835343257, -4.543872842445989, -4.551699000775199, -4.538282447567526, -4.538214051214219, -4.543415053565002, -4.543415053565002]), ([0, 150, 270, 840, 900, 960, 1000], [-9.265122221743944, -5.504851643116329, -4.569017770707743, -4.562675792755738, -4.56823696325917, -4.566849233161828, -4.566849233161828]), ([0, 150, 210, 300, 360, 480, 660, 720, 780, 840, 960, 1000], [-9.265122221743944, -5.612334938595852, -5.410165644686853, -4.82725975260652, -4.5819737841154575, -4.573603514166729, -4.559903955589788, -4.583069003788504, -4.565758860463795, -4.561881043921569, -4.561379280029752, -4.561379280029752]), ([0, 150, 270, 570, 690, 750, 810, 870, 1000], [-9.265122221743944, -5.792069128742862, -4.693739890477101, -4.697327572926619, -4.671428985876372, -4.702761415196267, -4.689038054552377, -4.681701073687395, -4.681701073687395]), ([0, 150, 270, 480, 540, 600, 690, 870, 930, 990, 1000], [-9.265122221743944, -5.831898214873072, -4.684856910801284, -4.7681902308602035, -4.684975666440125, -4.647780152462962, -4.636109243428385, -4.619441301205763, -4.627315464131804, -4.628795973244435, -4.628795973244435]), ([0, 150, 270, 480, 540, 600, 660, 720, 780, 900, 960, 1000], [-9.265122221743944, -5.331603422732724, -4.490390709006505, -4.702064059848396, -4.6934255621860235, -4.538287972354088, -4.642613210147299, -4.633069365437234, -4.581384520336194, -4.608837002457795, -4.596566155447619, -4.596566155447619]), ([0, 150, 270, 480, 540, 600, 720, 900, 960, 1000], [-9.265122221743944, -5.731522782616615, -4.640719309645201, -4.632407649870032, -4.604274728718362, -4.578404016462647, -4.586296642189949, -4.580505014460019, -4.5799203113391895, -4.5799203113391895]), ([0, 150, 270, 690, 750, 900, 1000], [-9.265122221743944, -5.794101788883463, -4.6477648995381875, -4.613486026102541, -4.602590198916288, -4.6163907434335805, -4.6163907434335805]), ([0, 150, 270, 480, 540, 660, 720, 780, 900, 960, 1000], [-9.265122221743944, -5.708068171554023, -4.587703988231211, -4.631506940077755, -4.591654150418014, -4.532893526379731, -4.535825995482913, -4.551283256845755, -4.536976826630056, -4.537137001155761, -4.537137001155761]), ([0, 150, 210, 300, 420, 480, 660, 720, 870, 930, 990, 1000], [-9.265122221743944, -5.708947446210799, -5.623594201201413, -5.586574879585653, -4.594598687048996, -4.826780315611561, -4.764314818590872, -4.694337381795261, -4.733504507478083, -4.709308510939448, -4.707208233144394, -4.707208233144394]), ([0, 150, 210, 600, 660, 780, 840, 900, 960, 1000], [-9.265122221743944, -6.322604215827017, -5.7435735506105585, -4.898026294313087, -4.902306755590132, -4.907900874922683, -4.899136526745858, -4.901820530246154, -4.903423638061531, -4.903423638061531]), ([0, 150, 300, 360, 420, 480, 540, 600, 660, 720, 780, 840, 900, 1000], [-9.265122221743944, -5.912770139850011, -6.07227177431568, -4.814889823223561, -5.08592265697724, -5.07422054558255, -4.656930505995438, -4.749939177207356, -4.8328864842801345, -4.70020650826556, -4.79463220899948, -4.7815534167970375, -4.7378638740489665, -4.7378638740489665]), ([0, 150, 210, 300, 420, 480, 750, 870, 930, 990, 1000], [-9.265122221743944, -5.882528281267375, -5.703706827928055, -5.544670045035816, -4.649160833635417, -4.843867004188279, -4.755647669707734, -4.798318159083361, -4.78327971353546, -4.7723091039235355, -4.7723091039235355]), ([0, 150, 270, 480, 540, 600, 660, 720, 780, 840, 1000], [-9.265122221743944, -5.973236777891195, -4.832435787350673, -4.854476025749205, -4.894645345023858, -4.797212699395212, -4.833154474142832, -4.780378662097111, -4.796131447115726, -4.806266733803049, -4.806266733803049]), ([0, 150, 270, 390, 570, 630, 690, 870, 930, 990, 1000], [-9.265122221743944, -5.849301522509905, -4.76340496834074, -4.99242142037703, -4.877640009859203, -4.800332063421356, -4.882683742116099, -4.862496366376613, -4.847041511521476, -4.867998347634081, -4.867998347634081]), ([0, 150, 210, 300, 420, 540, 600, 720, 840, 900, 960, 1000], [-9.265122221743944, -5.5292215292983675, -5.184683074202536, -5.455072020995824, -4.463968078653569, -4.592326476927942, -4.5573993929397485, -4.55194576334328, -4.5443573487966225, -4.533941801906541, -4.544803271620421, -4.544803271620421]), ([0, 150, 270, 480, 540, 660, 720, 780, 840, 900, 1000], [-9.265122221743944, -5.847863095865838, -4.746387361292399, -4.730549654436768, -4.744165002119087, -4.706785482932965, -4.693394111387412, -4.715790667524193, -4.703586697071323, -4.699964310691083, -4.699964310691083]), ([0, 150, 270, 480, 540, 600, 750, 870, 1000], [-9.265122221743944, -6.034756966791299, -4.807100003550516, -4.744083520404026, -4.770697704500347, -4.7290553530579125, -4.715254500072173, -4.7196193612173705, -4.7196193612173705]), ([0, 150, 270, 420, 480, 540, 780, 840, 960, 1000], [-9.265122221743944, -5.603394842736275, -4.588871558382808, -5.028780337015253, -4.712500516598881, -4.643635975287881, -4.682944095586841, -4.696261123810974, -4.67935398677834, -4.67935398677834]), ([0, 150, 270, 480, 540, 600, 780, 840, 900, 960, 1000], [-9.265122221743944, -5.871266881396155, -4.677196657358649, -4.612294181740685, -4.609859917536228, -4.591983784056054, -4.583463151365305, -4.5854355888595935, -4.585258465402988, -4.587250894395371, -4.587250894395371]), ([0, 150, 210, 510, 570, 690, 750, 810, 870, 930, 990, 1000], [-9.265122221743944, -5.763843941247447, -5.559162565611603, -4.72832607206506, -4.743950158967783, -4.684403025019747, -4.675894419905385, -4.708536710886516, -4.696746310160166, -4.688488662436644, -4.700189225616131, -4.700189225616131])]"
        self.expected_progress_curves = "[([0.0, 0.15, 0.27, 0.48, 0.6, 0.69, 0.75, 0.81, 0.96, 1.0], [1.0, 0.2713976426578085, 0.0271213952789498, 0.020355282359630678, 0.011770984873880855, 0.014080624997477477, 0.013749887573622412, 0.011174067421292353, 0.01160569150288159, 0.01160569150288159]), ([0.0, 0.15, 0.21, 0.48, 0.6, 0.72, 0.78, 0.84, 0.96, 1.0], [1.0, 0.27639109014565943, 0.14916324420791993, 0.003448814063944291, -0.009075213005963622, -0.002858653494789866, -0.005324284725614635, -0.007196306473871647, -0.006619633220022319, -0.006619633220022319]), ([0.0, 0.15, 0.21, 0.3, 0.54, 0.72, 0.78, 0.9, 0.96, 1.0], [1.0, 0.2715041650030617, 0.17319772493375815, 0.1701037075667533, 0.00640166694566155, -0.0009723874341731879, 0.006571187307717682, 0.011708514121938476, 0.005707273593003455, 0.005707273593003455]), ([0.0, 0.15, 0.27, 0.54, 0.66, 0.72, 0.84, 0.9, 0.96, 1.0], [1.0, 0.23828581095836304, 0.001324360234961386, -0.013236503171763047, -0.01358300377731498, -0.011902842356030995, -0.014783179573590422, -0.014797863267600858, -0.013681284336507933, -0.013681284336507933]), ([0.0, 0.15, 0.27, 0.84, 0.9, 0.96, 1.0], [1.0, 0.19272505180237187, -0.008184756434340848, -0.009546286094406848, -0.00835238434286994, -0.008650309643461706, -0.008650309643461706]), ([0.0, 0.15, 0.21, 0.3, 0.36, 0.48, 0.66, 0.72, 0.78, 0.84, 0.96, 1.0], [1.0, 0.21580013908026952, 0.17239735652649288, 0.047256009914945205, -0.0054032903579347, -0.007200264564436105, -0.010141358884453567, -0.005168162755722059, -0.008884396671220726, -0.009716907013970554, -0.00982462836308741, -0.00982462836308741]), ([0.0, 0.15, 0.27, 0.57, 0.69, 0.75, 0.81, 0.87, 1.0], [1.0, 0.2543864338711155, 0.018591253608174232, 0.019361476416087448, 0.0138014295837635, 0.020528042663122185, 0.01758183838839221, 0.0160066961948039, 0.0160066961948039]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.6, 0.69, 0.87, 0.93, 0.99, 1.0], [1.0, 0.2629371545626724, 0.016684208142245888, 0.034574649861004635, 0.01670970323633256, 0.008724371864232972, 0.006218798850456395, 0.002640436093582768, 0.004330903397810639, 0.004648746992364111, 0.004648746992364111]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.6, 0.66, 0.72, 0.78, 0.9, 0.96, 1.0], [1.0, 0.1555311996018342, -0.02506483350181733, 0.02037833069677375, 0.01852377193375996, -0.014781993482937435, 0.0076151051231839306, 0.005566181626105141, -0.005529796649685026, 0.0003638486663125696, -0.0022705222326284426, -0.0022705222326284426]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.6, 0.72, 0.9, 0.96, 1.0], [1.0, 0.24138802128069473, 0.007208512459769507, 0.005424120998002817, -0.0006156045989916105, -0.006169667121718496, -0.004475236124820292, -0.00571861366319043, -0.0058441408484576456, -0.0058441408484576456]), ([0.0, 0.15, 0.27, 0.69, 0.75, 0.9, 1.0], [1.0, 0.2548228161939816, 0.00872109728497067, 0.0013619258640848247, -0.000977248443569186, 0.001985526076865019, 0.001985526076865019]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.66, 0.72, 0.78, 0.9, 0.96, 1.0], [1.0, 0.23635266025157972, -0.004173099568740222, 0.005230751814669486, -0.0033250576770613425, -0.015940101923126664, -0.015310543811852116, -0.011992096480724223, -0.015063477241703, -0.015029090120021878, -0.015029090120021878]), ([0.0, 0.15, 0.21, 0.3, 0.42, 0.48, 0.66, 0.72, 0.87, 0.93, 0.99, 1.0], [1.0, 0.23654142762567099, 0.21821733764260395, 0.21026983218660542, -0.002692908844540538, 0.047153081823155966, 0.03374265568038618, 0.018719526231867303, 0.027128133723137122, 0.02193360810486499, 0.02148270926321256, 0.02148270926321256]), ([0.0, 0.15, 0.21, 0.6, 0.66, 0.78, 0.84, 0.9, 0.96, 1.0], [1.0, 0.3682845366771101, 0.2439751444423484, 0.06244854861548304, 0.06336750087794231, 0.06456847625989072, 0.06268689923704389, 0.06326311542717104, 0.06360727916527245, 0.06360727916527245]), ([0.0, 0.15, 0.3, 0.36, 0.42, 0.48, 0.54, 0.6, 0.66, 0.72, 0.78, 0.84, 0.9, 1.0], [1.0, 0.28029917085412454, 0.31454183265419744, 0.044600367483628243, 0.10278714214605475, 0.10027487044315013, 0.010688818576100965, 0.03065641629667105, 0.04846398668825414, 0.01997954161326175, 0.04025135479121681, 0.037443529908155415, 0.028064025795023383, 0.028064025795023383]), ([0.0, 0.15, 0.21, 0.3, 0.42, 0.48, 0.75, 0.87, 0.93, 0.99, 1.0], [1.0, 0.27380668731864255, 0.23541634373496076, 0.20127347875057255, 0.009020783864025158, 0.05082134328126452, 0.03188194592044922, 0.04104267421911552, 0.037814140501447525, 0.035458911503699356, 0.035458911503699356]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.6, 0.66, 0.72, 0.78, 0.84, 1.0], [1.0, 0.2932804712876154, 0.048367228667049005, 0.05309894462721582, 0.061722708385305546, 0.040805348235832, 0.048521520181656536, 0.037191327302066875, 0.04057321922818238, 0.04274911664417724, 0.04274911664417724]), ([0.0, 0.15, 0.27, 0.39, 0.57, 0.63, 0.69, 0.87, 0.93, 0.99, 1.0], [1.0, 0.2666733894897131, 0.03354732417479771, 0.08271379786017714, 0.058071912311704714, 0.041475029946219495, 0.05915472766003397, 0.054820794140205215, 0.05150286345098974, 0.05600198882865441, 0.05600198882865441]), ([0.0, 0.15, 0.21, 0.3, 0.42, 0.54, 0.6, 0.72, 0.84, 0.9, 0.96, 1.0], [1.0, 0.19795690897696053, 0.12398955538532361, 0.1820380969600705, -0.030737384746040795, -0.0031807190351670466, -0.010679051755562403, -0.011849866051480683, -0.013478987369205355, -0.015715052540666883, -0.013383254278472919, -0.013383254278472919]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.66, 0.72, 0.78, 0.84, 0.9, 1.0], [1.0, 0.2663645803840133, 0.029893893507739, 0.02649377010860978, 0.029416785584519586, 0.02139195099252537, 0.018517019908529563, 0.023325232061635937, 0.02070521857879182, 0.019927545345891876, 0.019927545345891876]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.6, 0.75, 0.87, 1.0], [1.0, 0.3064879536400066, 0.04292800743890988, 0.029399292655239873, 0.03511296767899863, 0.026172965516763805, 0.023210124772677723, 0.024147196449090243, 0.024147196449090243]), ([0.0, 0.15, 0.27, 0.42, 0.48, 0.54, 0.78, 0.84, 0.96, 1.0], [1.0, 0.21388083160730675, -0.003922439379815372, 0.09051952405245446, 0.022618884908617222, 0.007834677799835007, 0.016273554767478632, 0.019132525430623562, 0.015502811055874737, 0.015502811055874737]), ([0.0, 0.15, 0.27, 0.48, 0.54, 0.6, 0.78, 0.84, 0.9, 0.96, 1.0], [1.0, 0.2713890299167142, 0.015039664067084924, 0.0011060543582028211, 0.0005834535324213013, -0.003254290169109894, -0.005083545051226778, -0.004660091647348135, -0.004698117455934531, -0.004270372170593713, -0.004270372170593713]), ([0.0, 0.15, 0.21, 0.51, 0.57, 0.69, 0.75, 0.81, 0.87, 0.93, 0.99, 1.0], [1.0, 0.2483269000432211, 0.20438481038281409, 0.026016399582633187, 0.029370661910647456, 0.016586765521265173, 0.014760092783411916, 0.02176791395208495, 0.01923668782445146, 0.017463891958076943, 0.019975831281882475, 0.019975831281882475])]"

        # Convert the expected values from string to their actual types
        self.expected_all_recommended_xs = eval(self.expected_all_recommended_xs, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_intermediate_budgets = eval(self.expected_all_intermediate_budgets, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_all_est_objectives = eval(self.expected_all_est_objectives, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_objective_curves = eval(self.expected_objective_curves, {'nan': float('nan'), 'inf': float('inf')})
        self.expected_progress_curves = eval(self.expected_progress_curves, {'nan': float('nan'), 'inf': float('inf')})
        
        # Number of macro-replications and post-replications
        self.num_macroreps = 24
        self.num_postreps = 200

        # Setup the solver and experiment
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.assertEqual(self.myexperiment.solver.name, self.expected_solver_name, "Solver name does not match (expected: " + self.expected_solver_name + ", actual: " + self.myexperiment.solver.name + ")")
        self.assertEqual(self.myexperiment.problem.name, self.expected_problem_name, "Problem name does not match (expected: " + self.expected_problem_name + ", actual: " + self.myexperiment.problem.name + ")")

    def test_run(self):
        # Check actual run results against expected
        self.myexperiment.run(n_macroreps=self.num_macroreps)
        self.assertEqual(self.myexperiment.n_macroreps, self.num_macroreps, "Number of macro-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep]), len(self.expected_all_recommended_xs[mrep]), "Length of recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of recommended solutions
            for list in range(len(self.myexperiment.all_recommended_xs[mrep])):
                # Check to make sure the tuples are the same length
                self.assertEqual(len(self.myexperiment.all_recommended_xs[mrep][list]), len(self.expected_all_recommended_xs[mrep][list]), "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
                # For each tuple of recommended solutions
                for tuple in range(len(self.myexperiment.all_recommended_xs[mrep][list])):
                    self.assertAlmostEqual(self.myexperiment.all_recommended_xs[mrep][list][tuple], self.expected_all_recommended_xs[mrep][list][tuple], 5, "Recommended solutions for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + " and tuple " + str(tuple) + ".")
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_intermediate_budgets[mrep]), len(self.expected_all_intermediate_budgets[mrep]), "Length of intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list of intermediate budgets
            for list in range(len(self.myexperiment.all_intermediate_budgets[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_intermediate_budgets[mrep][list], self.expected_all_intermediate_budgets[mrep][list], 5, "Intermediate budgets for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")
            
    def test_post_replicate(self):
        # Simulate results from the run method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets

        # Check actual post-replication results against expected
        self.myexperiment.post_replicate(n_postreps=self.num_postreps)
        self.assertEqual(self.myexperiment.n_postreps, self.num_postreps, "Number of post-replications for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
        # For each macroreplication
        for mrep in range(self.num_macroreps):
            # Check to make sure the list lengths are the same
            self.assertEqual(len(self.myexperiment.all_est_objectives[mrep]), len(self.expected_all_est_objectives[mrep]), "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
            # For each list in the estimated objectives
            for list in range(len(self.myexperiment.all_est_objectives[mrep])):
                # Check the values in the list
                self.assertAlmostEqual(self.myexperiment.all_est_objectives[mrep][list], self.expected_all_est_objectives[mrep][list], 5, "Estimated objectives for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(list) + ".")

    def test_post_normalize(self):
        # Simulate results from the post_replicate method
        self.myexperiment = ProblemSolver(self.expected_solver_name, self.expected_problem_name)
        self.myexperiment.n_macroreps = self.num_macroreps
        self.myexperiment.n_postreps = self.num_postreps
        self.myexperiment.all_recommended_xs = self.expected_all_recommended_xs
        self.myexperiment.all_intermediate_budgets = self.expected_all_intermediate_budgets
        self.myexperiment.all_est_objectives = self.expected_all_est_objectives
        self.myexperiment.has_run = True
        self.myexperiment.has_postreplicated= True
        # Check actual post-normalization results against expected
        post_normalize([self.myexperiment], n_postreps_init_opt=self.num_postreps)

        # Loop through each curve object and convert it into a tuple
        for i in range(len(self.myexperiment.objective_curves)):
            self.myexperiment.objective_curves[i] = (self.myexperiment.objective_curves[i].x_vals, self.myexperiment.objective_curves[i].y_vals)
        for i in range(len(self.myexperiment.progress_curves)):
            self.myexperiment.progress_curves[i] = (self.myexperiment.progress_curves[i].x_vals, self.myexperiment.progress_curves[i].y_vals)

        for mrep in range(self.num_macroreps):
            # Check to make sure the same number of objective curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.objective_curves[mrep]), len(self.expected_objective_curves[mrep]), "Number of objective curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.objective_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][0]), len(self.expected_objective_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.objective_curves[mrep][1]), len(self.expected_objective_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.objective_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][0][x_index], self.expected_objective_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.objective_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.objective_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_objective_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.objective_curves[mrep][1][y_index], self.expected_objective_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
            
            # Check to make sure the same number of progress curves are present
            # This should probably always be 2 (x and y)
            self.assertEqual(len(self.myexperiment.progress_curves[mrep]), len(self.expected_progress_curves[mrep]), "Number of progress curves for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " does not match.")
            # Make sure that curves are only checked if they exist
            if (len(self.myexperiment.progress_curves[mrep]) > 0):
                # Make sure the lengths of the X and Y values are the same
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][0]), len(self.expected_progress_curves[mrep][0]), "Length of X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                self.assertEqual(len(self.myexperiment.progress_curves[mrep][1]), len(self.expected_progress_curves[mrep][1]), "Length of Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match.")
                # Check X (0) and Y (1) values
                for x_index in range(len(self.myexperiment.progress_curves[mrep][0])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][0][x_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][0][x_index]), "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][0][x_index], self.expected_progress_curves[mrep][0][x_index], 5, "X values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(x_index) + ".")
                for y_index in range(len(self.myexperiment.progress_curves[mrep][1])):
                    # If the value is NaN, make sure we're expecting NaN
                    if (math.isnan(self.myexperiment.progress_curves[mrep][1][y_index])):
                        self.assertTrue(math.isnan(self.expected_progress_curves[mrep][1][y_index]), "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")
                    # Otherwise, check the value normally
                    else:
                        self.assertAlmostEqual(self.myexperiment.progress_curves[mrep][1][y_index], self.expected_progress_curves[mrep][1][y_index], 5, "Y values for problem " + self.expected_problem_name + " and solver " + self.expected_solver_name + " do not match at mrep " + str(mrep) + " and index " + str(y_index) + ".")      
